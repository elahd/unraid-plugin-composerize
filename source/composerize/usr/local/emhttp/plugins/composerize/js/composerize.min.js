!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).composerize=t()}(this,function(){"use strict";function j(t,e){var r,n=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)),n}function C(n){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?j(Object(s),!0).forEach(function(e){var t,r;t=n,r=s[e=e],(e=function(e){e=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0===r)return("string"===t?String:Number)(e);r=r.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}(e,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(s)):j(Object(s)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(s,e))})}return n}function R(e,t){if(null==e)return{};var r,n=function(e,t){if(null==e)return{};for(var r,n={},s=Object.keys(e),o=0;o<s.length;o++)r=s[o],0<=t.indexOf(r)||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols)for(var s=Object.getOwnPropertySymbols(e),o=0;o<s.length;o++)r=s[o],0<=t.indexOf(r)||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r]);return n}var L="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function D(){throw new Error("setTimeout has not been defined")}function F(){throw new Error("clearTimeout has not been defined")}var r=D,n=F;function V(t){if(r===setTimeout)return setTimeout(t,0);if((r===D||!r)&&setTimeout)return(r=setTimeout)(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}"function"==typeof L.setTimeout&&(r=setTimeout),"function"==typeof L.clearTimeout&&(n=clearTimeout);var s,o=[],B=!1,Y=-1;function z(){B&&s&&(B=!1,s.length?o=s.concat(o):Y=-1,o.length)&&q()}function q(){if(!B){for(var e=V(z),t=(B=!0,o.length);t;){for(s=o,o=[];++Y<t;)s&&s[Y].run();Y=-1,t=o.length}s=null,B=!1,!function(t){if(n===clearTimeout)return clearTimeout(t);if((n===F||!n)&&clearTimeout)return(n=clearTimeout)(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(e)}}function W(e,t){this.fun=e,this.array=t}W.prototype.run=function(){this.fun.apply(null,this.array)};function e(){}var t=e,i=e,J=e,G=e,H=e,Q=e,Z=e;var X=L.performance||{},ee=X.now||X.mozNow||X.msNow||X.oNow||X.webkitNow||function(){return(new Date).getTime()};var te=new Date;var K={nextTick:function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];o.push(new W(e,t)),1!==o.length||B||V(q)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:t,addListener:i,once:J,off:G,removeListener:H,removeAllListeners:Q,emit:Z,binding:function(e){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(e){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(e){var t=.001*ee.call(X),r=Math.floor(t),t=Math.floor(t%1*1e9);return e&&(r-=e[0],(t-=e[1])<0)&&(r--,t+=1e9),[r,t]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-te)/1e3}};function re(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function ne(r){var t,n;return r.__esModule?r:("function"==typeof(t=r.default)?(n=function e(){return this instanceof e?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)}).prototype=t.prototype:n={},Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(r).forEach(function(e){var t=Object.getOwnPropertyDescriptor(r,e);Object.defineProperty(n,e,t.get?t:{enumerable:!0,get:function(){return r[e]}})}),n)}t={exports:{}};i=(e,t)=>{if("string"!=typeof e&&!Array.isArray(e))throw new TypeError("Expected the input to be `string | string[]`");t=Object.assign({pascalCase:!1},t);return 0===(e=Array.isArray(e)?e.map(e=>e.trim()).filter(e=>e.length).join("-"):e.trim()).length?"":1===e.length?t.pascalCase?e.toUpperCase():e.toLowerCase():(e=(e=e!==e.toLowerCase()?(t=>{let r=!1,n=!1,s=!1;for(let e=0;e<t.length;e++){var o=t[e];r&&/[a-zA-Z]/.test(o)&&o.toUpperCase()===o?(t=t.slice(0,e)+"-"+t.slice(e),r=!1,s=n,n=!0,e++):n&&s&&/[a-zA-Z]/.test(o)&&o.toLowerCase()===o?(t=t.slice(0,e-1)+"-"+t.slice(e-1),s=n,n=!1,r=!0):(r=o.toLowerCase()===o&&o.toUpperCase()!==o,s=n,n=o.toUpperCase()===o&&o.toLowerCase()!==o)}return t})(e):e).replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(e,t)=>t.toUpperCase()).replace(/\d+(\w|$)/g,e=>e.toUpperCase()),e=e,t.pascalCase?e.charAt(0).toUpperCase()+e.slice(1):e)},t.exports=i,t.exports.default=i,J=t.exports;function se(e,t){for(var r=0,n=e.length-1;0<=n;n--){var s=e[n];"."===s?e.splice(n,1):".."===s?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;)e.unshift("..");return e}function oe(e){return ie.exec(e).slice(1)}var ie=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;function ae(){for(var e="",t=!1,r=arguments.length-1;-1<=r&&!t;r--){var n=0<=r?arguments[r]:"/";if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(e=n+"/"+e,t="/"===n.charAt(0))}return(t?"/":"")+(e=se(me(e.split("/"),function(e){return!!e}),!t).join("/"))||"."}function ce(e){var t=le(e),r="/"===ge(e,-1);return(e=(e=se(me(e.split("/"),function(e){return!!e}),!t).join("/"))||t?e:".")&&r&&(e+="/"),(t?"/":"")+e}function le(e){return"/"===e.charAt(0)}function ue(){return ce(me(Array.prototype.slice.call(arguments,0),function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function pe(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;0<=r&&""===e[r];r--);return r<t?[]:e.slice(t,r-t+1)}e=ae(e).substr(1),t=ae(t).substr(1);for(var n=r(e.split("/")),s=r(t.split("/")),o=Math.min(n.length,s.length),i=o,a=0;a<o;a++)if(n[a]!==s[a]){i=a;break}for(var c=[],a=i;a<n.length;a++)c.push("..");return(c=c.concat(s.slice(i))).join("/")}function fe(e){var e=oe(e),t=e[0],e=e[1];return t||e?t+(e=e&&e.substr(0,e.length-1)):"."}function de(e,t){e=oe(e)[2];return e=t&&e.substr(-1*t.length)===t?e.substr(0,e.length-t.length):e}function he(e){return oe(e)[3]}G={extname:he,basename:de,dirname:fe,sep:"/",delimiter:":",relative:pe,join:ue,isAbsolute:le,normalize:ce,resolve:ae};function me(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}var ge="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)},H=ne(Object.freeze({__proto__:null,basename:de,default:G,delimiter:":",dirname:fe,extname:he,isAbsolute:le,join:ue,normalize:ce,relative:pe,resolve:ae,sep:"/"})),c=[],l=[],ye="undefined"!=typeof Uint8Array?Uint8Array:Array,ve=!1;function be(){ve=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,r=e.length;t<r;++t)c[t]=e[t],l[e.charCodeAt(t)]=t;l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63}function we(e,t,r){for(var n,s=[],o=t;o<r;o+=3)n=(e[o]<<16)+(e[o+1]<<8)+e[o+2],s.push(c[n>>18&63]+c[n>>12&63]+c[n>>6&63]+c[63&n]);return s.join("")}function _e(e){ve||be();for(var t,r=e.length,n=r%3,s="",o=[],i=0,a=r-n;i<a;i+=16383)o.push(we(e,i,a<i+16383?a:i+16383));return 1==n?(t=e[r-1],s=(s+=c[t>>2])+c[t<<4&63]+"=="):2==n&&(t=(e[r-2]<<8)+e[r-1],s=(s=(s+=c[t>>10])+c[t>>4&63])+c[t<<2&63]+"="),o.push(s),o.join("")}function $e(e,t,r,n,s){var o,i,a=8*s-n-1,c=(1<<a)-1,l=c>>1,u=-7,p=r?s-1:0,f=r?-1:1,s=e[t+p];for(p+=f,o=s&(1<<-u)-1,s>>=-u,u+=a;0<u;o=256*o+e[t+p],p+=f,u-=8);for(i=o&(1<<-u)-1,o>>=-u,u+=n;0<u;i=256*i+e[t+p],p+=f,u-=8);if(0===o)o=1-l;else{if(o===c)return i?NaN:1/0*(s?-1:1);i+=Math.pow(2,n),o-=l}return(s?-1:1)*i*Math.pow(2,o-n)}function Ee(e,t,r,n,s,o){var i,a,c=8*o-s-1,l=(1<<c)-1,u=l>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:o-1,d=n?1:-1,o=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=l):(i=Math.floor(Math.log(t)/Math.LN2),t*(n=Math.pow(2,-i))<1&&(i--,n*=2),2<=(t+=1<=i+u?p/n:p*Math.pow(2,1-u))*n&&(i++,n/=2),l<=i+u?(a=0,i=l):1<=i+u?(a=(t*n-1)*Math.pow(2,s),i+=u):(a=t*Math.pow(2,u-1)*Math.pow(2,s),i=0));8<=s;e[r+f]=255&a,f+=d,a/=256,s-=8);for(i=i<<s|a,c+=s;0<c;e[r+f]=255&i,f+=d,i/=256,c-=8);e[r+f-d]|=128*o}var Se={}.toString,Oe=Array.isArray||function(e){return"[object Array]"==Se.call(e)};function Pe(){return y.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(Pe()<t)throw new RangeError("Invalid typed array length");return y.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=y.prototype:(e=null===e?new y(t):e).length=t,e}function y(e,t,r){if(!(y.TYPED_ARRAY_SUPPORT||this instanceof y))return new y(e,t,r);if("number"!=typeof e)return ke(this,e,t,r);if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return Ne(this,e)}function ke(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer){var s=e,o=t,i=r;if(o.byteLength,i<0||o.byteLength<i)throw new RangeError("'offset' is out of bounds");if(o.byteLength<i+(n||0))throw new RangeError("'length' is out of bounds");return o=void 0===i&&void 0===n?new Uint8Array(o):void 0===n?new Uint8Array(o,i):new Uint8Array(o,i,n),y.TYPED_ARRAY_SUPPORT?(s=o).__proto__=y.prototype:s=xe(s,o),s}if("string"!=typeof t){i=e,n=t;if(p(n))return o=0|Te(n.length),0!==(i=a(i,o)).length&&n.copy(i,0,0,o),i;if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||function(e){return e!=e}(n.length)?a(i,0):xe(i,n);if("Buffer"===n.type&&Oe(n.data))return xe(i,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}s=e,n=t,e=r;if(y.isEncoding(e="string"==typeof e&&""!==e?e:"utf8"))return t=0|je(n,e),s=(n=(s=a(s,t)).write(n,e))!==t?s.slice(0,n):s;throw new TypeError('"encoding" must be a valid string encoding')}function Ae(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function Ne(e,t){if(Ae(t),e=a(e,t<0?0:0|Te(t)),!y.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function xe(e,t){var r=t.length<0?0:0|Te(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function Te(e){if(e>=Pe())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Pe().toString(16)+" bytes");return 0|e}function p(e){return null!=e&&e._isBuffer}function je(e,t){if(p(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;var r=(e="string"!=typeof e?""+e:e).length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Ke(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return We(e).length;default:if(n)return Ke(e).length;t=(""+t).toLowerCase(),n=!0}}function Ce(e,t,r){var n,s=!1;if((t=void 0===t||t<0?0:t)>this.length)return"";if((r=void 0===r||r>this.length?this.length:r)<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":var o=this,i=t,a=r,c=o.length;(!a||a<0||c<a)&&(a=c);for(var l="",u=i=!i||i<0?0:i;u<a;++u)l+=function(e){return e<16?"0"+e.toString(16):e.toString(16)}(o[u]);return l;case"utf8":case"utf-8":return De(this,t,r);case"ascii":var p=this,c=t,f=r,d="";f=Math.min(p.length,f);for(var h=c;h<f;++h)d+=String.fromCharCode(127&p[h]);return d;case"latin1":case"binary":var m=this,i=t,g=r,y="";g=Math.min(m.length,g);for(var v=i;v<g;++v)y+=String.fromCharCode(m[v]);return y;case"base64":return b=this,n=r,0===(w=t)&&n===b.length?_e(b):_e(b.slice(w,n));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":for(var b=t,w=r,_=this.slice(b,w),$="",E=0;E<_.length;E+=2)$+=String.fromCharCode(_[E]+256*_[E+1]);return $;default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function u(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function Me(e,t,r,n,s){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):2147483647<r?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,(r=(r=isNaN(r)?s?0:e.length-1:r)<0?e.length+r:r)>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if(p(t="string"==typeof t?y.from(t,n):t))return 0===t.length?-1:Ie(e,t,r,n,s);if("number"==typeof t)return t&=255,y.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?(s?Uint8Array.prototype.indexOf:Uint8Array.prototype.lastIndexOf).call(e,t,r):Ie(e,[t],r,n,s);throw new TypeError("val must be string, number or Buffer")}function Ie(e,t,r,n,s){var o=1,i=e.length,a=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i/=o=2,a/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s)for(var l=-1,u=r;u<i;u++)if(c(e,u)===c(t,-1===l?0:u-l)){if(u-(l=-1===l?u:l)+1===a)return l*o}else-1!==l&&(u-=u-l),l=-1;else for(u=r=i<r+a?i-a:r;0<=u;u--){for(var p=!0,f=0;f<a;f++)if(c(e,u+f)!==c(t,f)){p=!1;break}if(p)return u}return-1}function Re(e,t,r,n){return Je(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function Le(e,t,r,n){return Je(function(e,t){for(var r,n,s=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,s.push(r%256),s.push(n);return s}(t,e.length-r),e,r,n)}function De(e,t,r){r=Math.min(e.length,r);for(var n=[],s=t;s<r;){var o,i,a,c,l=e[s],u=null,p=239<l?4:223<l?3:191<l?2:1;if(s+p<=r)switch(p){case 1:l<128&&(u=l);break;case 2:128==(192&(o=e[s+1]))&&127<(c=(31&l)<<6|63&o)&&(u=c);break;case 3:o=e[s+1],i=e[s+2],128==(192&o)&&128==(192&i)&&2047<(c=(15&l)<<12|(63&o)<<6|63&i)&&(c<55296||57343<c)&&(u=c);break;case 4:o=e[s+1],i=e[s+2],a=e[s+3],128==(192&o)&&128==(192&i)&&128==(192&a)&&65535<(c=(15&l)<<18|(63&o)<<12|(63&i)<<6|63&a)&&c<1114112&&(u=c)}null===u?(u=65533,p=1):65535<u&&(n.push((u-=65536)>>>10&1023|55296),u=56320|1023&u),n.push(u),s+=p}var f=n,d=f.length;if(d<=Fe)return String.fromCharCode.apply(String,f);for(var h="",m=0;m<d;)h+=String.fromCharCode.apply(String,f.slice(m,m+=Fe));return h}y.TYPED_ARRAY_SUPPORT=void 0===L.TYPED_ARRAY_SUPPORT||L.TYPED_ARRAY_SUPPORT,y.poolSize=8192,y._augment=function(e){return e.__proto__=y.prototype,e},y.from=function(e,t,r){return ke(null,e,t,r)},y.TYPED_ARRAY_SUPPORT&&(y.prototype.__proto__=Uint8Array.prototype,y.__proto__=Uint8Array),y.alloc=function(e,t,r){return n=null,t=t,r=r,Ae(e=e),!(e<=0)&&void 0!==t?"string"==typeof r?a(n,e).fill(t,r):a(n,e).fill(t):a(n,e);var n},y.allocUnsafe=function(e){return Ne(null,e)},y.allocUnsafeSlow=function(e){return Ne(null,e)},y.isBuffer=Ge,y.compare=function(e,t){if(!p(e)||!p(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,s=0,o=Math.min(r,n);s<o;++s)if(e[s]!==t[s]){r=e[s],n=t[s];break}return r<n?-1:n<r?1:0},y.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},y.concat=function(e,t){if(!Oe(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return y.alloc(0);if(void 0===t)for(s=t=0;s<e.length;++s)t+=e[s].length;for(var r=y.allocUnsafe(t),n=0,s=0;s<e.length;++s){var o=e[s];if(!p(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,n),n+=o.length}return r},y.byteLength=je,y.prototype._isBuffer=!0,y.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)u(this,t,t+1);return this},y.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)u(this,t,t+3),u(this,t+1,t+2);return this},y.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)u(this,t,t+7),u(this,t+1,t+6),u(this,t+2,t+5),u(this,t+3,t+4);return this},y.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?De(this,0,e):Ce.apply(this,arguments)},y.prototype.equals=function(e){if(p(e))return this===e||0===y.compare(this,e);throw new TypeError("Argument must be a Buffer")},y.prototype.inspect=function(){var e="";return 0<this.length&&(e=this.toString("hex",0,50).match(/.{2}/g).join(" "),50<this.length)&&(e+=" ... "),"<Buffer "+e+">"},y.prototype.compare=function(e,t,r,n,s){if(!p(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),(t=void 0===t?0:t)<0||r>e.length||n<0||s>this.length)throw new RangeError("out of range index");if(s<=n&&r<=t)return 0;if(s<=n)return-1;if(r<=t)return 1;if(this===e)return 0;for(var o=(s>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),a=Math.min(o,i),c=this.slice(n,s),l=e.slice(t,r),u=0;u<a;++u)if(c[u]!==l[u]){o=c[u],i=l[u];break}return o<i?-1:i<o?1:0},y.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},y.prototype.indexOf=function(e,t,r){return Me(this,e,t,r,!0)},y.prototype.lastIndexOf=function(e,t,r){return Me(this,e,t,r,!1)},y.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var s=this.length-t;if((void 0===r||s<r)&&(r=s),0<e.length&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n=n||"utf8";for(var o,i,a,c=!1;;)switch(n){case"hex":var l=this,u=e,p=t,f=r,d=(p=Number(p)||0,l.length-p);if((!f||d<(f=Number(f)))&&(f=d),(d=u.length)%2!=0)throw new TypeError("Invalid hex string");d/2<f&&(f=d/2);for(var h=0;h<f;++h){var m=parseInt(u.substr(2*h,2),16);if(isNaN(m))return h;l[p+h]=m}return h;case"utf8":case"utf-8":return d=t,a=r,Je(Ke(e,(i=this).length-d),i,d,a);case"ascii":return Re(this,e,t,r);case"latin1":case"binary":return Re(this,e,t,r);case"base64":return i=this,a=t,o=r,Je(We(e),i,a,o);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Le(this,e,t,r);default:if(c)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),c=!0}},y.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Fe=4096;function f(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(r<e+t)throw new RangeError("Trying to access beyond buffer length")}function d(e,t,r,n,s,o){if(!p(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(s<t||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function Ve(e,t,r,n){t<0&&(t=65535+t+1);for(var s=0,o=Math.min(e.length-r,2);s<o;++s)e[r+s]=(t&255<<8*(n?s:1-s))>>>8*(n?s:1-s)}function Be(e,t,r,n){t<0&&(t=4294967295+t+1);for(var s=0,o=Math.min(e.length-r,4);s<o;++s)e[r+s]=t>>>8*(n?s:3-s)&255}function Ue(e,t,r,n){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Ye(e,t,r,n,s){return s||Ue(e,0,r,4),Ee(e,t,r,n,23,4),r+4}function ze(e,t,r,n,s){return s||Ue(e,0,r,8),Ee(e,t,r,n,52,8),r+8}y.prototype.slice=function(e,t){var r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e),y.TYPED_ARRAY_SUPPORT)(s=this.subarray(e,t)).__proto__=y.prototype;else for(var n=t-e,s=new y(n,void 0),o=0;o<n;++o)s[o]=this[o+e];return s},y.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||f(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return n},y.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||f(e,t,this.length);for(var n=this[e+--t],s=1;0<t&&(s*=256);)n+=this[e+--t]*s;return n},y.prototype.readUInt8=function(e,t){return t||f(e,1,this.length),this[e]},y.prototype.readUInt16LE=function(e,t){return t||f(e,2,this.length),this[e]|this[e+1]<<8},y.prototype.readUInt16BE=function(e,t){return t||f(e,2,this.length),this[e]<<8|this[e+1]},y.prototype.readUInt32LE=function(e,t){return t||f(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},y.prototype.readUInt32BE=function(e,t){return t||f(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},y.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||f(e,t,this.length);for(var n=this[e],s=1,o=0;++o<t&&(s*=256);)n+=this[e+o]*s;return(s*=128)<=n&&(n-=Math.pow(2,8*t)),n},y.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||f(e,t,this.length);for(var n=t,s=1,o=this[e+--n];0<n&&(s*=256);)o+=this[e+--n]*s;return(s*=128)<=o&&(o-=Math.pow(2,8*t)),o},y.prototype.readInt8=function(e,t){return t||f(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},y.prototype.readInt16LE=function(e,t){t||f(e,2,this.length);t=this[e]|this[e+1]<<8;return 32768&t?4294901760|t:t},y.prototype.readInt16BE=function(e,t){t||f(e,2,this.length);t=this[e+1]|this[e]<<8;return 32768&t?4294901760|t:t},y.prototype.readInt32LE=function(e,t){return t||f(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},y.prototype.readInt32BE=function(e,t){return t||f(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},y.prototype.readFloatLE=function(e,t){return t||f(e,4,this.length),$e(this,e,!0,23,4)},y.prototype.readFloatBE=function(e,t){return t||f(e,4,this.length),$e(this,e,!1,23,4)},y.prototype.readDoubleLE=function(e,t){return t||f(e,8,this.length),$e(this,e,!0,52,8)},y.prototype.readDoubleBE=function(e,t){return t||f(e,8,this.length),$e(this,e,!1,52,8)},y.prototype.writeUIntLE=function(e,t,r,n){e=+e,t|=0,r|=0,n||d(this,e,t,r,Math.pow(2,8*r)-1,0);var s=1,o=0;for(this[t]=255&e;++o<r&&(s*=256);)this[t+o]=e/s&255;return t+r},y.prototype.writeUIntBE=function(e,t,r,n){e=+e,t|=0,r|=0,n||d(this,e,t,r,Math.pow(2,8*r)-1,0);var s=r-1,o=1;for(this[t+s]=255&e;0<=--s&&(o*=256);)this[t+s]=e/o&255;return t+r},y.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,1,255,0),y.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},y.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,2,65535,0),y.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):Ve(this,e,t,!0),t+2},y.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,2,65535,0),y.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):Ve(this,e,t,!1),t+2},y.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,4,4294967295,0),y.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):Be(this,e,t,!0),t+4},y.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,4,4294967295,0),y.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):Be(this,e,t,!1),t+4},y.prototype.writeIntLE=function(e,t,r,n){e=+e,t|=0,n||d(this,e,t,r,(n=Math.pow(2,8*r-1))-1,-n);var s=0,o=1,i=0;for(this[t]=255&e;++s<r&&(o*=256);)e<0&&0===i&&0!==this[t+s-1]&&(i=1),this[t+s]=(e/o>>0)-i&255;return t+r},y.prototype.writeIntBE=function(e,t,r,n){e=+e,t|=0,n||d(this,e,t,r,(n=Math.pow(2,8*r-1))-1,-n);var s=r-1,o=1,i=0;for(this[t+s]=255&e;0<=--s&&(o*=256);)e<0&&0===i&&0!==this[t+s+1]&&(i=1),this[t+s]=(e/o>>0)-i&255;return t+r},y.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,1,127,-128),y.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&(e=e<0?255+e+1:e),t+1},y.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,2,32767,-32768),y.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):Ve(this,e,t,!0),t+2},y.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,2,32767,-32768),y.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):Ve(this,e,t,!1),t+2},y.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,4,2147483647,-2147483648),y.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):Be(this,e,t,!0),t+4},y.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||d(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),y.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):Be(this,e,t,!1),t+4},y.prototype.writeFloatLE=function(e,t,r){return Ye(this,e,t,!0,r)},y.prototype.writeFloatBE=function(e,t,r){return Ye(this,e,t,!1,r)},y.prototype.writeDoubleLE=function(e,t,r){return ze(this,e,t,!0,r)},y.prototype.writeDoubleBE=function(e,t,r){return ze(this,e,t,!1,r)},y.prototype.copy=function(e,t,r,n){if(r=r||0,n||0===n||(n=this.length),t>=e.length&&(t=e.length),(n=0<n&&n<r?r:n)===r)return 0;if(0===e.length||0===this.length)return 0;if((t=t||0)<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length);var s,o=(n=e.length-t<n-r?e.length-t+r:n)-r;if(this===e&&r<t&&t<n)for(s=o-1;0<=s;--s)e[s+t]=this[s+r];else if(o<1e3||!y.TYPED_ARRAY_SUPPORT)for(s=0;s<o;++s)e[s+t]=this[s+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},y.prototype.fill=function(e,t,r,n){if("string"==typeof e){var s;if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length&&(s=e.charCodeAt(0))<256&&(e=s),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!y.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(!(r<=t))if(t>>>=0,r=void 0===r?this.length:r>>>0,"number"==typeof(e=e||0))for(a=t;a<r;++a)this[a]=e;else for(var o=p(e)?e:Ke(new y(e,n).toString()),i=o.length,a=0;a<r-t;++a)this[a+t]=o[a%i];return this};var qe=/[^+\/0-9A-Za-z-_]/g;function Ke(e,t){t=t||1/0;for(var r,n=e.length,s=null,o=[],i=0;i<n;++i){if(55295<(r=e.charCodeAt(i))&&r<57344){if(!s){if(56319<r){-1<(t-=3)&&o.push(239,191,189);continue}if(i+1===n){-1<(t-=3)&&o.push(239,191,189);continue}s=r;continue}if(r<56320){-1<(t-=3)&&o.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&-1<(t-=3)&&o.push(239,191,189);if(s=null,r<128){if(--t<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function We(e){var t=function(e){var t;if((e=((t=e).trim?t.trim():t.replace(/^\s+|\s+$/g,"")).replace(qe,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e);ve||be();var r,e=t.length;if(0<e%4)throw new Error("Invalid string. Length must be a multiple of 4");for(var n="="===t[e-2]?2:"="===t[e-1]?1:0,s=new ye(3*e/4-n),o=0<n?e-4:e,i=0,a=0;a<o;a+=4)r=l[t.charCodeAt(a)]<<18|l[t.charCodeAt(a+1)]<<12|l[t.charCodeAt(a+2)]<<6|l[t.charCodeAt(a+3)],s[i++]=r>>16&255,s[i++]=r>>8&255,s[i++]=255&r;return 2==n?(r=l[t.charCodeAt(a)]<<2|l[t.charCodeAt(a+1)]>>4,s[i++]=255&r):1==n&&(r=l[t.charCodeAt(a)]<<10|l[t.charCodeAt(a+1)]<<4|l[t.charCodeAt(a+2)]>>2,s[i++]=r>>8&255,s[i++]=255&r),s}function Je(e,t,r,n){for(var s=0;s<n&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}function Ge(e){return null!=e&&(!!e._isBuffer||He(e)||"function"==typeof(e=e).readFloatLE&&"function"==typeof e.slice&&He(e.slice(0,0)))}function He(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var Q="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;function r(){}r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e},Qe=/%[sdj%]/g;function Ze(e){if(!dt(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(h(arguments[r]));return t.join(" ")}for(var r=1,n=arguments,s=n.length,o=String(e).replace(Qe,function(e){if("%%"===e)return"%";if(s<=r)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}}),i=n[r];r<s;i=n[++r])ut(i)||!g(i)?o+=" "+i:o+=" "+h(i);return o}function Xe(e,t){var r;return m(L.process)?function(){return Xe(e,t).apply(this,arguments)}:!0===K.noDeprecation?e:(r=!1,function(){if(!r){if(K.throwDeprecation)throw new Error(t);K.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)})}var et,tt={};function rt(t){return m(et)&&(et=K.env.NODE_DEBUG||""),t=t.toUpperCase(),tt[t]||(new RegExp("\\b"+t+"\\b","i").test(et)?tt[t]=function(){var e=Ze.apply(null,arguments);console.error("%s %d: %s",t,0,e)}:tt[t]=function(){}),tt[t]}function h(e,t){var r={seen:[],stylize:st};return 3<=arguments.length&&(r.depth=arguments[2]),4<=arguments.length&&(r.colors=arguments[3]),lt(t)?r.showHidden=t:t&&Ot(r,t),m(r.showHidden)&&(r.showHidden=!1),m(r.depth)&&(r.depth=2),m(r.colors)&&(r.colors=!1),m(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=nt),ot(r,e,r.depth)}function nt(e,t){t=h.styles[t];return t?"["+h.colors[t][0]+"m"+e+"["+h.colors[t][1]+"m":e}function st(e,t){return e}function ot(t,r,n){if(t.customInspect&&r&&vt(r.inspect)&&r.inspect!==h&&(!r.constructor||r.constructor.prototype!==r))return dt(e=r.inspect(n,t))?e:ot(t,e,n);var e=function(e,t){if(m(t))return e.stylize("undefined","undefined");{var r;if(dt(t))return r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'",e.stylize(r,"string")}return ft(t)?e.stylize(""+t,"number"):lt(t)?e.stylize(""+t,"boolean"):ut(t)?e.stylize("null","null"):void 0}(t,r);if(e)return e;var s,e=Object.keys(r),o=(s={},e.forEach(function(e,t){s[e]=!0}),s);if(t.showHidden&&(e=Object.getOwnPropertyNames(r)),yt(r)&&(0<=e.indexOf("message")||0<=e.indexOf("description")))return it(r);if(0===e.length){if(vt(r))return i=r.name?": "+r.name:"",t.stylize("[Function"+i+"]","special");if(mt(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(gt(r))return t.stylize(Date.prototype.toString.call(r),"date");if(yt(r))return it(r)}var i="",a=!1,c=["{","}"];if(ct(r)&&(a=!0,c=["[","]"]),vt(r)&&(i=" [Function"+(r.name?": "+r.name:"")+"]"),mt(r)&&(i=" "+RegExp.prototype.toString.call(r)),gt(r)&&(i=" "+Date.prototype.toUTCString.call(r)),yt(r)&&(i=" "+it(r)),0===e.length&&(!a||0==r.length))return c[0]+i+c[1];if(n<0)return mt(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special");t.seen.push(r),l=a?function(t,r,n,s,e){for(var o=[],i=0,a=r.length;i<a;++i)Pt(r,String(i))?o.push(at(t,r,n,s,String(i),!0)):o.push("");return e.forEach(function(e){e.match(/^\d+$/)||o.push(at(t,r,n,s,e,!0))}),o}(t,r,n,o,e):e.map(function(e){return at(t,r,n,o,e,a)}),t.seen.pop();var l;return 60<l.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)?c[0]+(""===i?"":i+"\n ")+" "+l.join(",\n  ")+" "+c[1]:c[0]+i+" "+l.join(", ")+" "+c[1]}function it(e){return"["+Error.prototype.toString.call(e)+"]"}function at(e,t,r,n,s,o){var i,a,t=Object.getOwnPropertyDescriptor(t,s)||{value:t[s]};if(t.get?a=t.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):t.set&&(a=e.stylize("[Setter]","special")),Pt(n,s)||(i="["+s+"]"),a||(e.seen.indexOf(t.value)<0?-1<(a=ut(r)?ot(e,t.value,null):ot(e,t.value,r-1)).indexOf("\n")&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),m(i)){if(o&&s.match(/^\d+$/))return a;i=(i=JSON.stringify(""+s)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(i=i.substr(1,i.length-2),e.stylize(i,"name")):(i=i.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),e.stylize(i,"string"))}return i+": "+a}function ct(e){return Array.isArray(e)}function lt(e){return"boolean"==typeof e}function ut(e){return null===e}function pt(e){return null==e}function ft(e){return"number"==typeof e}function dt(e){return"string"==typeof e}function ht(e){return"symbol"==typeof e}function m(e){return void 0===e}function mt(e){return g(e)&&"[object RegExp]"===_t(e)}function g(e){return"object"==typeof e&&null!==e}function gt(e){return g(e)&&"[object Date]"===_t(e)}function yt(e){return g(e)&&("[object Error]"===_t(e)||e instanceof Error)}function vt(e){return"function"==typeof e}function bt(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function wt(e){return Ge(e)}function _t(e){return Object.prototype.toString.call(e)}function $t(e){return e<10?"0"+e.toString(10):e.toString(10)}h.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},h.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var Et=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function St(){var e,t;console.log("%s - %s",(e=new Date,t=[$t(e.getHours()),$t(e.getMinutes()),$t(e.getSeconds())].join(":"),[e.getDate(),Et[e.getMonth()],t].join(" ")),Ze.apply(null,arguments))}function Ot(e,t){if(t&&g(t))for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}function Pt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var kt=J,At=function(e,t){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/([a-z\d])([A-Z])/g,"$1"+(t=void 0===t?"_":t)+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+t+"$2").toLowerCase()},Nt=H,xt=function(e){if(Array.isArray(e))return e.map(e=>"string"!=typeof e?e+"":e);e=e.trim();for(var t,r=0,n=null,s=null,o=[],i=0;i<e.length;i++)t=n," "!==(n=e.charAt(i))||s?(n===s?s=null:"'"!==n&&'"'!==n||(s=s||n),o[r]||(o[r]=""),o[r]+=n):" "!==t&&r++;return o},Tt=ne(Object.freeze({__proto__:null,_extend:Ot,debuglog:rt,default:{inherits:Q,_extend:Ot,log:St,isBuffer:wt,isPrimitive:bt,isFunction:vt,isError:yt,isDate:gt,isObject:g,isRegExp:mt,isUndefined:m,isSymbol:ht,isString:dt,isNumber:ft,isNullOrUndefined:pt,isNull:ut,isBoolean:lt,isArray:ct,inspect:h,deprecate:Xe,format:Ze,debuglog:rt},deprecate:Xe,format:Ze,inherits:Q,inspect:h,isArray:ct,isBoolean:lt,isBuffer:wt,isDate:gt,isError:yt,isFunction:vt,isNull:ut,isNullOrUndefined:pt,isNumber:ft,isObject:g,isPrimitive:bt,isRegExp:mt,isString:dt,isSymbol:ht,isUndefined:m,log:St}));function jt(e,t){t=t||{},e=xt(e);for(var s,o,r,n,i,a,c=function(t){var r=[],e=!0,n={};Object.keys(t).forEach(function(e){r.push([].concat(t[e],e))});for(;e;){e=!1;for(var s=0;s<r.length;s++)for(var o=s+1;o<r.length;o++)if(r[s].filter(function(e){return-1!==r[o].indexOf(e)}).length){r[s]=r[s].concat(r[o]),r.splice(o,1),e=!0;break}}return r.forEach(function(e){e=e.filter(function(e,t,r){return r.indexOf(e)===t}),n[e.pop()]=e}),n}(t.alias||{}),l=Object.assign({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1,"strip-aliased":!1,"strip-dashed":!1},t.configuration),u=t.default||{},R=t.configObjects||[],p=t.envPrefix,L=l["populate--"],D=L?"--":"_",f={},F=t.__||Tt.format,d=null,h={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},m=/^-[0-9]+(\.[0-9]+)?/,V=new RegExp("^--"+l["negation-prefix"]+"(.+)"),g=([].concat(t.array).filter(Boolean).forEach(function(e){var t=e.key||e,e=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();e&&(h[e][t]=!0),h.arrays[t]=!0,h.keys.push(t)}),[].concat(t.boolean).filter(Boolean).forEach(function(e){h.bools[e]=!0,h.keys.push(e)}),[].concat(t.string).filter(Boolean).forEach(function(e){h.strings[e]=!0,h.keys.push(e)}),[].concat(t.number).filter(Boolean).forEach(function(e){h.numbers[e]=!0,h.keys.push(e)}),[].concat(t.count).filter(Boolean).forEach(function(e){h.counts[e]=!0,h.keys.push(e)}),[].concat(t.normalize).filter(Boolean).forEach(function(e){h.normalize[e]=!0,h.keys.push(e)}),Object.keys(t.narg||{}).forEach(function(e){h.nargs[e]=t.narg[e],h.keys.push(e)}),Object.keys(t.coerce||{}).forEach(function(e){h.coercions[e]=t.coerce[e],h.keys.push(e)}),Array.isArray(t.config)||"string"==typeof t.config?[].concat(t.config).filter(Boolean).forEach(function(e){h.configs[e]=!0}):Object.keys(t.config||{}).forEach(function(e){h.configs[e]=t.config[e]}),[t.key,c,t.default,h.arrays].forEach(function(e){Object.keys(e||{}).forEach(function(r){h.aliases[r]||(h.aliases[r]=[].concat(c[r]||[]),h.aliases[r].concat(r).forEach(function(e){/-/.test(e)&&l["camel-case-expansion"]&&(e=kt(e))!==r&&-1===h.aliases[r].indexOf(e)&&(h.aliases[r].push(e),f[e]=!0)}),h.aliases[r].concat(r).forEach(function(e){1<e.length&&/[A-Z]/.test(e)&&l["camel-case-expansion"]&&(e=At(e,"-"))!==r&&-1===h.aliases[r].indexOf(e)&&(h.aliases[r].push(e),f[e]=!0)}),h.aliases[r].forEach(function(t){h.aliases[t]=[r].concat(h.aliases[r].filter(function(e){return t!==e}))}))})}),Object.keys(u).forEach(function(t){(h.aliases[t]||[]).forEach(function(e){u[e]=u[t]})}),{_:[]}),y=(Object.keys(h.bools).forEach(function(e){Object.prototype.hasOwnProperty.call(u,e)&&(N(e,u[e]),[].concat(h.aliases[e]||[],e).forEach(function(e){h.defaulted[e]=!0}))}),[]),v=0;v<e.length;v++){var b,w,_,$,E=e[v];if(E.match(/^--.+=/)||!l["short-option-groups"]&&E.match(/^-.+=/))C((w=E.match(/^--?([^=]+)=([\s\S]*)$/))[1],h.nargs)?(e.splice(v+1,0,w[2]),v=k(v,w[1],e)):C(w[1],h.arrays)&&e.length>v+1?(e.splice(v+1,0,w[2]),v=A(v,w[1],e)):N(w[1],w[2]);else if(E.match(V)&&l["boolean-negation"])N(b=E.match(V)[1],!1);else if(E.match(/^--.+/)||!l["short-option-groups"]&&E.match(/^-[^-]+/))C(b=E.match(/^--?(.+)/)[1],h.nargs)?v=k(v,b,e):C(b,h.arrays)&&e.length>v+1?v=A(v,b,e):!(void 0===(_=0===h.nargs[b]?void 0:e[v+1])||_.match(/^-/)&&!_.match(m)||C(b,h.bools)||C(b,h.counts))||/^(true|false)$/.test(_)?(N(b,_),v++):N(b,M(b));else if(E.match(/^-.\..+=/))N((w=E.match(/^-([^=]+)=([\s\S]*)$/))[1],w[2]);else if(E.match(/^-.\..+/))_=e[v+1],b=E.match(/^-(.\..+)/)[1],void 0===_||_.match(/^-/)||C(b,h.bools)||C(b,h.counts)?N(b,M(b)):(N(b,_),v++);else if(E.match(/^-[^-]+/)&&!E.match(m)){for(var S=E.slice(1,-1).split(""),O=!1,P=0;P<S.length;P++){if(_=E.slice(P+2),S[P+1]&&"="===S[P+1]){$=E.slice(P+3),C(b=S[P],h.nargs)?(e.splice(v+1,0,$),v=k(v,b,e)):C(b,h.arrays)&&e.length>v+1?(e.splice(v+1,0,$),v=A(v,b,e)):N(b,$),O=!0;break}if("-"===_)N(S[P],_);else{if(/[A-Za-z]/.test(S[P])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){N(S[P],_),O=!0;break}if(S[P+1]&&S[P+1].match(/\W/)){N(S[P],_),O=!0;break}N(S[P],M(S[P]))}}b=E.slice(-1)[0],O||"-"===b||(C(b,h.nargs)?v=k(v,b,e):C(b,h.arrays)&&e.length>v+1?v=A(v,b,e):!(void 0===(_=e[v+1])||/^(-|--)[^-]/.test(_)&&!_.match(m)||C(b,h.bools)||C(b,h.counts))||/^(true|false)$/.test(_)?(N(b,_),v++):N(b,M(b)))}else{if("--"===E){y=e.slice(v+1);break}if(l["halt-at-non-option"]){y=e.slice(v);break}g._.push(U("_",E))}}function k(e,t,r){for(var n=C(t,h.nargs),s=0,o=e+1;o<r.length&&!r[o].match(/^-[^0-9]/);o++)s++;s<n&&(d=Error(F("Not enough arguments following: %s",t)));var i=Math.min(s,n);for(o=e+1;o<i+e+1;o++)N(t,r[o]);return e+i}function A(e,t,r){for(var n=e+1,s=[],o=0<e,i=e+1;i<r.length;i++){if(/^-/.test(r[i])&&!m.test(r[i])){i===n&&N(t,q("array")),o=!0;break}e=i,s.push(r[i])}return o?N(t,s.map(function(e){return B(t,e)})):s.forEach(function(e){N(t,e)}),e}function N(e,t){[].concat(h.aliases[e]||[],e).forEach(function(e){delete h.defaulted[e]}),/-/.test(e)&&l["camel-case-expansion"]&&(r=e.split(".").map(function(e){return kt(e)}).join("."),function e(t,r){h.aliases[t]&&h.aliases[t].length||(h.aliases[t]=[r],f[r]=!0);h.aliases[r]&&h.aliases[r].length||e(r,t)}(e,r));var r,n=B(e,t),s=e.split(".");j(g,s,n),h.aliases[e]&&h.aliases[e].forEach&&h.aliases[e].forEach(function(e){e=e.split("."),j(g,e,n)}),1<s.length&&l["dot-notation"]&&(h.aliases[s[0]]||[]).forEach(function(e){e=e.split(".");var t=[].concat(s);t.shift(),e=e.concat(t),j(g,e,n)}),C(e,h.normalize)&&!C(e,h.arrays)&&[e].concat(h.aliases[e]||[]).forEach(function(e){g.__defineSetter__(e,function(e){t=Nt.normalize(e)}),g.__defineGetter__(e,function(){return"string"==typeof t?Nt.normalize(t):t})})}function B(e,t){"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]||(t=t.substring(1,t.length-1));var r=U(e,t=(C(e,h.bools)||C(e,h.counts))&&"string"==typeof t?"true"===t:t);return C(e,h.counts)&&(I(r)||"boolean"==typeof r)&&(r=Ct),r=C(e,h.normalize)&&C(e,h.arrays)?Array.isArray(t)?t.map(Nt.normalize):Nt.normalize(t):r}function U(e,t){var r;return t=C(e,h.strings)||C(e,h.coercions)||!(null!=(r=t)&&("number"==typeof r||!!/^0x[0-9a-f]+$/i.test(r)||!(1<r.length&&"0"===r[0])&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(r))&&l["parse-numbers"]&&Number.isSafeInteger(Math.floor(t))||!I(t)&&C(e,h.numbers))?t:Number(t)}function x(r,n){Object.keys(r).forEach(function(e){var t=r[e],e=n?n+"."+e:e;"object"==typeof t&&null!==t&&!Array.isArray(t)&&l["dot-notation"]?x(t,e):(!T(g,e.split("."))||h.defaulted[e]||h.arrays[e]&&l["combine-arrays"])&&N(e,t)})}function Y(r,n){var s;void 0!==p&&(s="string"==typeof p?p:"",Object.keys(K.env).forEach(function(e){var t;""!==s&&0!==e.lastIndexOf(s,0)||(t=e.split("__").map(function(e,t){return 0===t&&(e=e.substring(s.length)),kt(e)}),!(n&&h.configs[t.join(".")]||!n))||T(r,t)&&!h.defaulted[t.join(".")]||N(t.join("."),K.env[e])}))}function z(r,e,n){Object.keys(n).forEach(function(t){T(r,t.split("."))||(j(r,t.split("."),n[t]),(e[t]||[]).forEach(function(e){T(r,e.split("."))||j(r,e.split("."),n[t])}))})}function T(e,t){var r=e,e=((t=l["dot-notation"]?t:[t.join(".")]).slice(0,-1).forEach(function(e){r=r[e]||{}}),t[t.length-1]);return"object"==typeof r&&e in r}function j(e,t,r){var n=e,e=((t=l["dot-notation"]?t:[t.join(".")]).slice(0,-1).forEach(function(e,t){e=It(e),"object"==typeof n&&void 0===n[e]&&(n[e]={}),n="object"!=typeof n[e]||Array.isArray(n[e])?(Array.isArray(n[e])?n[e].push({}):n[e]=[n[e],{}],n[e][n[e].length-1]):n[e]}),It(t[t.length-1])),s=C(t.join("."),h.arrays),o=Array.isArray(r);let i=l["duplicate-arguments-array"];!i&&C(e,h.nargs)&&(i=!0,!I(n[e])&&1===h.nargs[e]||Array.isArray(n[e])&&n[e].length===h.nargs[e])&&(n[e]=void 0),r===Ct?n[e]=Ct(n[e]):Array.isArray(n[e])?i&&s&&o?n[e]=l["flatten-duplicate-arrays"]?n[e].concat(r):(Array.isArray(n[e][0])?n[e]:[n[e]]).concat([r]):i||Boolean(s)!==Boolean(o)?n[e]=n[e].concat([r]):n[e]=r:void 0===n[e]&&s?n[e]=o?r:[r]:i&&!(void 0===n[e]||C(e,h.bools)||C(t.join("."),h.bools)||C(e,h.counts))?n[e]=[n[e],r]:n[e]=r}function C(e,t){var r=!1;return[].concat(h.aliases[e]||[],e).forEach(function(e){t[e]&&(r=t[e])}),r}function M(e){return!C(e,h.bools)&&!C(e,h.counts)&&""+e in u?u[e]:q(function(e){var t="boolean";C(e,h.strings)?t="string":C(e,h.numbers)?t="number":C(e,h.arrays)&&(t="array");return t}(e))}function q(e){return{boolean:!0,string:"",number:void 0,array:[]}[e]}function I(e){return void 0===e}return Y(g,!0),Y(g,!1),s=g,z(o={},h.aliases,u),Object.keys(h.configs).forEach(function(t){var r=s[t]||o[t];if(r)try{var n=null,e=Nt.resolve(K.cwd(),r);if("function"==typeof h.configs[t]){try{n=h.configs[t](e)}catch(e){n=e}if(n instanceof Error)return void(d=n)}else n=function(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}(e);x(n)}catch(e){s[t]&&(d=Error(F("Invalid JSON config file: %s",r)))}}),void 0!==R&&R.forEach(function(e){x(e)}),z(g,h.aliases,u),r=g,i={},Object.keys(r).forEach(function(e){if(!i.hasOwnProperty(e)&&"function"==typeof(n=C(e,h.coercions)))try{var t=n(r[e]);[].concat(h.aliases[e]||[],e).forEach(e=>{i[e]=r[e]=t})}catch(e){d=e}}),l["set-placeholder-key"]&&(a=g,h.keys.forEach(e=>{~e.indexOf(".")||void 0===a[e]&&(a[e]=void 0)})),Object.keys(h.counts).forEach(function(e){T(g,e.split("."))||N(e,0)}),L&&y.length&&(g[D]=[]),y.forEach(function(e){g[D].push(e)}),l["camel-case-expansion"]&&l["strip-dashed"]&&Object.keys(g).filter(e=>"--"!==e&&e.includes("-")).forEach(e=>{delete g[e]}),l["strip-aliased"]&&[].concat(...Object.keys(c).map(e=>c[e])).forEach(e=>{l["camel-case-expansion"]&&delete g[e.split(".").map(e=>kt(e)).join(".")],delete g[e]}),{argv:g,error:d,aliases:h.aliases,newAliases:f,configuration:l}}function Ct(e){return void 0!==e?e+1:1}function Mt(e,t){return jt(e.slice(),t).argv}function It(e){return"__proto__"===e?"___proto___":e}Mt.detailed=function(e,t){return jt(e.slice(),t)};function Rt(e){return!(!(t=e)||"object"!=typeof t||(t=e,"[object RegExp]"===(e=Object.prototype.toString.call(t)))||"[object Date]"===e||function(e){return e.$$typeof===Dt}(t));var t}var Lt=re(Mt);var Dt="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Ft(e,t){return!1!==t.clone&&t.isMergeableObject(e)?Bt(Array.isArray(e)?[]:{},e,t):e}function Vt(e,t,r){return e.concat(t).map(function(e){return Ft(e,r)})}function Bt(e,t,r){(r=r||{}).arrayMerge=r.arrayMerge||Vt,r.isMergeableObject=r.isMergeableObject||Rt;var n,s,o,i,a=Array.isArray(t);return a===Array.isArray(e)?a?r.arrayMerge(e,t,r):(n=e,s=t,i={},(o=r).isMergeableObject(n)&&Object.keys(n).forEach(function(e){i[e]=Ft(n[e],o)}),Object.keys(s).forEach(function(e){o.isMergeableObject(s[e])&&n[e]?i[e]=Bt(n[e],s[e],o):i[e]=Ft(s[e],o)}),i):Ft(t,r)}Bt.all=function(e,r){if(Array.isArray(e))return e.reduce(function(e,t){return Bt(e,t,r)},{});throw new Error("first argument should be an array")};var Ut,Yt,zt=Bt,Z={exports:{}},qt={},Kt={},v={};function Wt(){if(!Ut){Ut=1;const i={ANCHOR:"&",COMMENT:"#",TAG:"!",DIRECTIVES_END:"-",DOCUMENT_END:"."},e={ALIAS:"ALIAS",BLANK_LINE:"BLANK_LINE",BLOCK_FOLDED:"BLOCK_FOLDED",BLOCK_LITERAL:"BLOCK_LITERAL",COMMENT:"COMMENT",DIRECTIVE:"DIRECTIVE",DOCUMENT:"DOCUMENT",FLOW_MAP:"FLOW_MAP",FLOW_SEQ:"FLOW_SEQ",MAP:"MAP",MAP_KEY:"MAP_KEY",MAP_VALUE:"MAP_VALUE",PLAIN:"PLAIN",QUOTE_DOUBLE:"QUOTE_DOUBLE",QUOTE_SINGLE:"QUOTE_SINGLE",SEQ:"SEQ",SEQ_ITEM:"SEQ_ITEM"};class a{static copy(e){return new a(e.start,e.end)}constructor(e,t){this.start=e,this.end=t||e}isEmpty(){return"number"!=typeof this.start||!this.end||this.end<=this.start}setOrigRange(e,t){var{start:r,end:n}=this;if(0===e.length||n<=e[0])return this.origStart=r,this.origEnd=n,t;let s=t;for(;s<e.length&&!(e[s]>r);)++s;this.origStart=r+s;for(t=s;s<e.length&&!(e[s]>=n);)++s;return this.origEnd=n+s,t}}class l{static addStringTerminator(e,t,r){return"\n"!==r[r.length-1]&&((t=l.endOfWhiteSpace(e,t))>=e.length||"\n"===e[t])?r+"\n":r}static atDocumentBoundary(e,t,r){var n=e[t];if(!n)return!0;var s=e[t-1];if(s&&"\n"!==s)return!1;if(r){if(n!==r)return!1}else if(n!==i.DIRECTIVES_END&&n!==i.DOCUMENT_END)return!1;var s=e[t+1],r=e[t+2];return s===n&&r===n&&(!(s=e[t+3])||"\n"===s||"\t"===s||" "===s)}static endOfIdentifier(e,t){let r=e[t];for(var n="<"===r,s=n?["\n","\t"," ",">"]:["\n","\t"," ","[","]","{","}",","];r&&-1===s.indexOf(r);)r=e[t+=1];return n&&">"===r&&(t+=1),t}static endOfIndent(e,t){let r=e[t];for(;" "===r;)r=e[t+=1];return t}static endOfLine(e,t){let r=e[t];for(;r&&"\n"!==r;)r=e[t+=1];return t}static endOfWhiteSpace(e,t){let r=e[t];for(;"\t"===r||" "===r;)r=e[t+=1];return t}static startOfLine(e,t){let r=e[t-1];if("\n"===r)return t;for(;r&&"\n"!==r;)r=e[--t];return t+1}static endOfBlockIndent(e,t,r){var n=l.endOfIndent(e,r);return r+t<n?n:(t=e[r=l.endOfWhiteSpace(e,n)])&&"\n"!==t?null:r}static atBlank(e,t,r){e=e[t];return"\n"===e||"\t"===e||" "===e||r&&!e}static nextNodeIsIndented(e,t,r){return!(!e||t<0)&&(0<t||r&&"-"===e)}static normalizeOffset(e,t){var r=e[t];return r?"\n"!==r&&"\n"===e[t-1]?t-1:l.endOfWhiteSpace(e,t):t}static foldNewline(e,t,r){let n=0,s=!1,o="",i=e[t+1];for(;" "===i||"\t"===i||"\n"===i;){switch(i){case"\n":n=0,t+=1,o+="\n";break;case"\t":n<=r&&(s=!0),t=l.endOfWhiteSpace(e,t+2)-1;break;case" ":n+=1,t+=1}i=e[t+1]}return o=o||" ",i&&n<=r&&(s=!0),{fold:o,offset:t,error:s}}constructor(e,t,r){Object.defineProperty(this,"context",{value:r||null,writable:!0}),this.error=null,this.range=null,this.valueRange=null,this.props=t||[],this.type=e,this.value=null}getPropValue(e,t,r){var n;return this.context&&(n=this.context.src,e=this.props[e])&&n[e.start]===t?n.slice(e.start+(r?1:0),e.end):null}get anchor(){for(let e=0;e<this.props.length;++e){var t=this.getPropValue(e,i.ANCHOR,!0);if(null!=t)return t}return null}get comment(){var t=[];for(let e=0;e<this.props.length;++e){var r=this.getPropValue(e,i.COMMENT,!0);null!=r&&t.push(r)}return 0<t.length?t.join("\n"):null}commentHasRequiredWhitespace(e){var t,r=this.context["src"];return!(this.header&&e===this.header.end||!this.valueRange)&&(t=this.valueRange["end"],e!==t||l.atBlank(r,t-1))}get hasComment(){if(this.context){var t=this.context["src"];for(let e=0;e<this.props.length;++e)if(t[this.props[e].start]===i.COMMENT)return!0}return!1}get hasProps(){if(this.context){var t=this.context["src"];for(let e=0;e<this.props.length;++e)if(t[this.props[e].start]!==i.COMMENT)return!0}return!1}get includesTrailingLines(){return!1}get jsonLike(){return-1!==[e.FLOW_MAP,e.FLOW_SEQ,e.QUOTE_DOUBLE,e.QUOTE_SINGLE].indexOf(this.type)}get rangeAsLinePos(){if(this.range&&this.context){var e=s(this.range.start,this.context.root);if(e)return{start:e,end:s(this.range.end,this.context.root)}}}get rawValue(){var e,t;return this.valueRange&&this.context?({start:e,end:t}=this.valueRange,this.context.src.slice(e,t)):null}get tag(){for(let e=0;e<this.props.length;++e){var t,r,n=this.getPropValue(e,i.TAG,!1);if(null!=n)return"<"===n[1]?{verbatim:n.slice(2,-1)}:([t,n,r]=n.match(/^(.*!)([^!]*)$/),{handle:n,suffix:r})}return null}get valueRangeContainsNewline(){if(this.valueRange&&this.context){var{start:t,end:r}=this.valueRange,n=this.context["src"];for(let e=t;e<r;++e)if("\n"===n[e])return!0}return!1}parseComment(e){var t,r=this.context["src"];return r[e]===i.COMMENT?(r=l.endOfLine(r,e+1),t=new a(e,r),this.props.push(t),r):e}setOrigRanges(t,r){return this.range&&(r=this.range.setOrigRange(t,r)),this.valueRange&&this.valueRange.setOrigRange(t,r),this.props.forEach(e=>e.setOrigRange(t,r)),r}toString(){var{context:{src:e},range:t,value:r}=this;return null!=r?r:(r=e.slice(t.start,t.end),l.addStringTerminator(e,t.end,r))}}class t extends Error{constructor(e,t,r){if(!(r&&t instanceof l))throw new Error("Invalid arguments for new "+e);super(),this.name=e,this.message=r,this.source=t}makePretty(){var e,t,r;this.source&&(this.nodeType=this.source.type,e=this.source.context&&this.source.context.root,"number"==typeof this.offset?(this.range=new a(this.offset,this.offset+1),(r=e&&s(this.offset,e))&&(t={line:r.line,col:r.col+1},this.linePos={start:r,end:t}),delete this.offset):(this.range=this.source.range,this.linePos=this.source.rangeAsLinePos),this.linePos&&({line:r,col:t}=this.linePos.start,this.message+=` at line ${r}, column `+t,r=e&&o(this.linePos,e))&&(this.message+=`:

${r}
`),delete this.source)}}class u extends t{constructor(e,t){super("YAMLSemanticError",e,t)}}class p extends l{static endOfLine(e,t,r){let n=e[t],s=t;for(;n&&"\n"!==n&&(!r||"["!==n&&"]"!==n&&"{"!==n&&"}"!==n&&","!==n);){var o=e[s+1];if(":"===n&&(!o||"\n"===o||"\t"===o||" "===o||r&&","===o))break;if((" "===n||"\t"===n)&&"#"===o)break;s+=1,n=o}return s}get strValue(){if(!this.valueRange||!this.context)return null;let{start:e,end:r}=this.valueRange;var n=this.context["src"];let s=n[r-1];for(;e<r&&("\n"===s||"\t"===s||" "===s);)s=n[--r-1];let o="";for(let t=e;t<r;++t){const s=n[t];if("\n"===s){var{fold:i,offset:a}=l.foldNewline(n,t,-1);o+=i,t=a}else if(" "===s||"\t"===s){i=t;let e=n[t+1];for(;t<r&&(" "===e||"\t"===e);)t+=1,e=n[t+1];"\n"!==e&&(o+=t>i?n.slice(i,t+1):s)}else o+=s}var t=n[e];switch(t){case"\t":return{errors:[new u(this,"Plain value cannot start with a tab character")],str:o};case"@":case"`":var c="Plain value cannot start with reserved character "+t;return{errors:[new u(this,c)],str:o};default:return o}}parseBlockValue(e){var{indent:t,inFlow:r,src:n}=this.context;let s=e,o=e;for(let e=n[s];"\n"===e&&!l.atDocumentBoundary(n,s+1);e=n[s]){var i=l.endOfBlockIndent(n,t,s+1);if(null===i||"#"===n[i])break;s="\n"===n[i]?i:o=p.endOfLine(n,i,r)}return this.valueRange.isEmpty()&&(this.valueRange.start=e),this.valueRange.end=o}parse(e,t){var{inFlow:e,src:r}=this.context=e;let n=t;var s=r[n];return s&&"#"!==s&&"\n"!==s&&(n=p.endOfLine(r,t,e)),this.valueRange=new a(t,n),n=l.endOfWhiteSpace(r,n),n=this.parseComment(n),n=this.hasComment&&!this.valueRange.isEmpty()?n:this.parseBlockValue(n)}}function n(e){var t=[0];let r=e.indexOf("\n");for(;-1!==r;)r+=1,t.push(r),r=e.indexOf("\n",r);return t}function c(e){let t,r;return"string"==typeof e?(t=n(e),r=e):(e=Array.isArray(e)?e[0]:e)&&e.context&&(e.lineStarts||(e.lineStarts=n(e.context.src)),t=e.lineStarts,r=e.context.src),{lineStarts:t,src:r}}function s(t,e){if("number"!=typeof t||t<0)return null;var{lineStarts:r,src:e}=c(e);if(!r||!e||t>e.length)return null;for(let e=0;e<r.length;++e){var n=r[e];if(t<n)return{line:e,col:t-r[e-1]+1};if(t===n)return{line:e+1,col:1}}e=r.length;return{line:e,col:t-r[e-1]+1}}function o({start:e,end:t},r,n=80){let s=function(e,t){var{lineStarts:t,src:r}=c(t);if(!t||!(1<=e)||e>t.length)return null;var n=t[e-1];let s=t[e];for(;s&&s>n&&"\n"===r[s-1];)--s;return r.slice(n,s)}(e.line,r);if(!s)return null;let o=e["col"];s.length>n&&(s=o<=n-10?s.substr(0,n-1)+"…":(r=Math.round(n/2),s.length>o+r&&(s=s.substr(0,o+r-1)+"…"),o-=s.length-n,"…"+s.substr(1-n)));let i=1,a="";t&&(t.line===e.line&&o+(t.col-e.col)<=n+1?i=t.col-e.col:(i=Math.min(s.length+1,n)-o,a="…"));r=1<o?" ".repeat(o-1):"",t="^".repeat(i);return s+`
`+r+t+a}v.Char=i,v.Node=l,v.PlainValue=p,v.Range=a,v.Type=e,v.YAMLError=t,v.YAMLReferenceError=class extends t{constructor(e,t){super("YAMLReferenceError",e,t)}},v.YAMLSemanticError=u,v.YAMLSyntaxError=class extends t{constructor(e,t){super("YAMLSyntaxError",e,t)}},v.YAMLWarning=class extends t{constructor(e,t){super("YAMLWarning",e,t)}},v._defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},v.defaultTagPrefix="tag:yaml.org,2002:",v.defaultTags={MAP:"tag:yaml.org,2002:map",SEQ:"tag:yaml.org,2002:seq",STR:"tag:yaml.org,2002:str"}}return v}function Jt(){if(Yt)return Kt;Yt=1;var g=Wt();class y extends g.Node{constructor(){super(g.Type.BLANK_LINE)}get includesTrailingLines(){return!0}parse(e,t){return this.context=e,this.range=new g.Range(t,t+1),t+1}}class c extends g.Node{constructor(e,t){super(e,t),this.node=null}get includesTrailingLines(){return!!this.node&&this.node.includesTrailingLines}parse(e,t){var{parseNode:r,src:n}=this.context=e;let{atLineStart:s,lineStart:o}=e;s||this.type!==g.Type.SEQ_ITEM||(this.error=new g.YAMLSemanticError(this,"Sequence items must not have preceding content on the same line"));var i=s?t-o:e.indent;let a=g.Node.endOfWhiteSpace(n,t+1),c=n[a];var l="#"===c,u=[];let p=null;for(;"\n"===c||"#"===c;){if("#"===c){const f=g.Node.endOfLine(n,a+1);u.push(new g.Range(a,f)),a=f}else s=!0,o=a+1,"\n"===n[g.Node.endOfWhiteSpace(n,o)]&&0===u.length&&(p=new y,o=p.parse({src:n},o)),a=g.Node.endOfIndent(n,o);c=n[a]}g.Node.nextNodeIsIndented(c,a-(o+i),this.type!==g.Type.SEQ_ITEM)?this.node=r({atLineStart:s,inCollection:!1,indent:i,lineStart:o,parent:this},a):c&&o>t+1&&(a=o-1),a=this.node?(p&&(r=e.parent.items||e.parent.contents)&&r.push(p),u.length&&Array.prototype.push.apply(this.props,u),this.node.range.end):l?(this.props.push(i=u[0]),i.end):g.Node.endOfLine(n,t+1);const f=this.node?this.node.valueRange.end:a;return this.valueRange=new g.Range(t,f),a}setOrigRanges(e,t){return t=super.setOrigRanges(e,t),this.node?this.node.setOrigRanges(e,t):t}toString(){var{context:{src:e},node:t,range:r,value:n}=this;return null!=n?n:(n=t?e.slice(r.start,t.range.start)+String(t):e.slice(r.start,r.end),g.Node.addStringTerminator(e,r.end,n))}}class v extends g.Node{constructor(){super(g.Type.COMMENT)}parse(e,t){this.context=e;e=this.parseComment(t);return this.range=new g.Range(t,e),e}}function b(e){let t=e;for(;t instanceof c;)t=t.node;if(!(t instanceof w))return null;var r=t.items.length;let n=-1;for(let e=r-1;0<=e;--e){var s=t.items[e];if(s.type===g.Type.COMMENT){var{indent:o,lineStart:i}=s.context;if(0<o&&s.range.start>=i+o)break}else if(s.type!==g.Type.BLANK_LINE)break;n=e}if(-1===n)return null;for(var r=t.items.splice(n,r-n),a=r[0].range.start;t.range.end=a,t.valueRange&&t.valueRange.end>a&&(t.valueRange.end=a),t!==e;)t=t.context.parent;return r}class w extends g.Node{static nextContentHasIndent(e,t,r){var n=g.Node.endOfLine(e,t)+1,s=e[t=g.Node.endOfWhiteSpace(e,n)];return!!s&&(n+r<=t||("#"===s||"\n"===s)&&w.nextContentHasIndent(e,t,r))}constructor(t){super(t.type===g.Type.SEQ_ITEM?g.Type.SEQ:g.Type.MAP);for(let e=t.props.length-1;0<=e;--e)if(t.props[e].start<t.context.lineStart){this.props=t.props.slice(0,e+1),t.props=t.props.slice(e+1);var r=t.props[0]||t.valueRange;t.range.start=r.start;break}this.items=[t];var e=b(t);e&&Array.prototype.push.apply(this.items,e)}get includesTrailingLines(){return 0<this.items.length}parse(e,t){var{parseNode:r,src:n}=this.context=e;let s=g.Node.startOfLine(n,t);var o,i,a=this.items[0],c=((a.context.parent=this).valueRange=g.Range.copy(a.valueRange),a.range.start-a.context.lineStart);let l=t,u=n[l=g.Node.normalizeOffset(n,l)],p=g.Node.endOfWhiteSpace(n,s)===l,f=!1;for(;u;){for(;"\n"===u||"#"===u;){if(p&&"\n"===u&&!f){var d=new y;if(l=d.parse({src:n},l),(this.valueRange.end=l)>=n.length){u=null;break}this.items.push(d),--l}else if("#"===u){if(l<s+c&&!w.nextContentHasIndent(n,l,c))return l;d=new v;if(l=d.parse({indent:c,lineStart:s,src:n},l),this.items.push(d),(this.valueRange.end=l)>=n.length){u=null;break}}s=l+1,l=g.Node.endOfIndent(n,s),!g.Node.atBlank(n,l)||(i=n[o=g.Node.endOfWhiteSpace(n,l)])&&"\n"!==i&&"#"!==i||(l=o),u=n[l],p=!0}if(!u)break;if(l!==s+c&&(p||":"!==u)){if(l<s+c){s>t&&(l=s);break}this.error||(this.error=new g.YAMLSyntaxError(this,"All collection items must start at the same column"))}if(a.type===g.Type.SEQ_ITEM){if("-"!==u){s>t&&(l=s);break}}else"-"!==u||this.error||(h=n[l+1])&&"\n"!==h&&"\t"!==h&&" "!==h||(this.error=new g.YAMLSyntaxError(this,"A collection cannot be both a mapping and a sequence"));var h=r({atLineStart:p,inCollection:!0,indent:c,lineStart:s,parent:this},l);if(!h)return l;if(this.items.push(h),this.valueRange.end=h.valueRange.end,l=g.Node.normalizeOffset(n,h.range.end),u=n[l],p=!1,f=h.includesTrailingLines,u){let e=l-1,t=n[e];for(;" "===t||"\t"===t;)t=n[--e];"\n"===t&&(s=e+1,p=!0)}var m=b(h);m&&Array.prototype.push.apply(this.items,m)}return l}setOrigRanges(t,r){return r=super.setOrigRanges(t,r),this.items.forEach(e=>{r=e.setOrigRanges(t,r)}),r}toString(){var{context:{src:e},items:t,range:r,value:n}=this;if(null!=n)return n;let s=e.slice(r.start,t[0].range.start)+String(t[0]);for(let e=1;e<t.length;++e){var o=t[e],{atLineStart:i,indent:a}=o.context;if(i)for(let e=0;e<a;++e)s+=" ";s+=String(o)}return g.Node.addStringTerminator(e,r.end,s)}}class a extends g.Node{constructor(){super(g.Type.DIRECTIVE),this.name=null}get parameters(){var e=this.rawValue;return e?e.trim().split(/[ \t]+/):[]}parseName(e){var t=this.context["src"];let r=e,n=t[r];for(;n&&"\n"!==n&&"\t"!==n&&" "!==n;)n=t[r+=1];return this.name=t.slice(e,r),r}parseParameters(e){var t=this.context["src"];let r=e,n=t[r];for(;n&&"\n"!==n&&"#"!==n;)n=t[r+=1];return this.valueRange=new g.Range(e,r),r}parse(e,t){this.context=e;e=this.parseName(t+1),e=this.parseParameters(e);return e=this.parseComment(e),this.range=new g.Range(t,e),e}}class l extends g.Node{static startCommentOrEndBlankLine(e,t){var r=g.Node.endOfWhiteSpace(e,t),e=e[r];return"#"===e||"\n"===e?r:t}constructor(){super(g.Type.DOCUMENT),this.directives=null,this.contents=null,this.directivesEndMarker=null,this.documentEndMarker=null}parseDirectives(e){var t=this.context["src"];let r=!0,n=!(this.directives=[]),s=e;for(;!g.Node.atDocumentBoundary(t,s,g.Char.DIRECTIVES_END);)switch(t[s=l.startCommentOrEndBlankLine(t,s)]){case"\n":r?(o=new y,(s=o.parse({src:t},s))<t.length&&this.directives.push(o)):(s+=1,r=!0);break;case"#":var o=new v;s=o.parse({src:t},s),this.directives.push(o),r=!1;break;case"%":var i=new a;s=i.parse({parent:this,src:t},s),this.directives.push(i),n=!0,r=!1;break;default:return n?this.error=new g.YAMLSemanticError(this,"Missing directives-end indicator line"):0<this.directives.length&&(this.contents=this.directives,this.directives=[]),s}return t[s]?(this.directivesEndMarker=new g.Range(s,s+3),s+3):(n?this.error=new g.YAMLSemanticError(this,"Missing directives-end indicator line"):0<this.directives.length&&(this.contents=this.directives,this.directives=[]),s)}parseContents(e){var{parseNode:t,src:r}=this.context;this.contents||(this.contents=[]);let n=e;for(;"-"===r[n-1];)--n;let s=g.Node.endOfWhiteSpace(r,e),o=n===e;for(this.valueRange=new g.Range(s);!g.Node.atDocumentBoundary(r,s,g.Char.DOCUMENT_END);){switch(r[s]){case"\n":o?(i=new y,(s=i.parse({src:r},s))<r.length&&this.contents.push(i)):(s+=1,o=!0),n=s;break;case"#":var i=new v;s=i.parse({src:r},s),this.contents.push(i),o=!1;break;default:var a=g.Node.endOfIndent(r,s),c=t({atLineStart:o,indent:-1,inFlow:!1,inCollection:!1,lineStart:n,parent:this},a);if(!c)return this.valueRange.end=a;this.contents.push(c),s=c.range.end,o=!1;a=b(c);a&&Array.prototype.push.apply(this.contents,a)}s=l.startCommentOrEndBlankLine(r,s)}if(r[this.valueRange.end=s]&&(this.documentEndMarker=new g.Range(s,s+3),r[s+=3]))switch("#"===r[s=g.Node.endOfWhiteSpace(r,s)]&&(e=new v,s=e.parse({src:r},s),this.contents.push(e)),r[s]){case"\n":s+=1;break;case void 0:break;default:this.error=new g.YAMLSyntaxError(this,"Document end marker line cannot have a non-comment suffix")}return s}parse(e,t){e=((e.root=this).context=e).src,e=65279===e.charCodeAt(t)?t+1:t,e=this.parseDirectives(e);return this.parseContents(e)}setOrigRanges(t,r){return r=super.setOrigRanges(t,r),this.directives.forEach(e=>{r=e.setOrigRanges(t,r)}),this.directivesEndMarker&&(r=this.directivesEndMarker.setOrigRange(t,r)),this.contents.forEach(e=>{r=e.setOrigRanges(t,r)}),r=this.documentEndMarker?this.documentEndMarker.setOrigRange(t,r):r}toString(){var{contents:e,directives:t,value:r}=this;if(null!=r)return r;let n=t.join("");return 0<e.length&&((0<t.length||e[0].type===g.Type.COMMENT)&&(n+="---\n"),n+=e.join("")),"\n"!==n[n.length-1]&&(n+="\n"),n}}class u extends g.Node{parse(e,t){var e=(this.context=e)["src"],r=g.Node.endOfIdentifier(e,t+1);return this.valueRange=new g.Range(t+1,r),r=g.Node.endOfWhiteSpace(e,r),this.parseComment(r)}}const m={CLIP:"CLIP",KEEP:"KEEP",STRIP:"STRIP"};class p extends g.Node{constructor(e,t){super(e,t),this.blockIndent=null,this.chomping=m.CLIP,this.header=null}get includesTrailingLines(){return this.chomping===m.KEEP}get strValue(){if(!this.valueRange||!this.context)return null;let{start:e,end:r}=this.valueRange;var{indent:t,src:n}=this.context;if(this.valueRange.isEmpty())return"";let s=null,o=n[r-1];for(;"\n"===o||"\t"===o||" "===o;){if(--r<=e){if(this.chomping===m.KEEP)break;return""}"\n"===o&&(s=r),o=n[r-1]}let i=r+1;s&&(r=this.chomping===m.KEEP?(i=s,this.valueRange.end):s);var a,c,l=t+this.blockIndent,u=this.type===g.Type.BLOCK_FOLDED;let p=!0,f="",d="",h=!1;for(let t=e;t<r;++t){for(let e=0;e<l&&" "===n[t];++e)t+=1;const o=n[t];"\n"===o?"\n"===d?f+="\n":d="\n":(a=g.Node.endOfLine(n,t),c=n.slice(t,a),t=a,h=u&&(" "===o||"\t"===o)&&t<i?(" "===d?d="\n":h||p||"\n"!==d||(d="\n\n"),f+=d+c,d=a<r&&n[a]||"",!0):(f+=d+c,d=u&&t<i?" ":"\n",!1),p&&""!==c&&(p=!1))}return this.chomping===m.STRIP?f:f+"\n"}parseBlockHeader(e){var t=this.context["src"];let r=e+1,n="";for(;;){var s=t[r];switch(s){case"-":this.chomping=m.STRIP;break;case"+":this.chomping=m.KEEP;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":n+=s;break;default:return this.blockIndent=Number(n)||null,this.header=new g.Range(e,r),r}r+=1}}parseBlockValue(e){const{indent:t,src:r}=this.context;var n=!!this.blockIndent;let s=e,o=e,i=1;for(let e=r[s];"\n"===e&&(s+=1,!g.Node.atDocumentBoundary(r,s));e=r[s]){var a=g.Node.endOfBlockIndent(r,t,s);if(null===a)break;var c=r[a],l=a-(s+t);if(this.blockIndent){if(c&&"\n"!==c&&l<this.blockIndent){if("#"===r[a])break;if(!this.error){const r=n?"explicit indentation indicator":"first line";c="Block scalars must not be less indented than their "+r;this.error=new g.YAMLSemanticError(this,c)}}}else"\n"!==r[a]?(l<i&&(this.error=new g.YAMLSemanticError(this,"Block scalars with more-indented leading empty lines must use an explicit indentation indicator")),this.blockIndent=l):l>i&&(i=l);s="\n"===r[a]?a:o=g.Node.endOfLine(r,a)}return this.chomping!==m.KEEP&&(s=r[o]?o+1:o),this.valueRange=new g.Range(e+1,s),s}parse(e,t){e=(this.context=e).src,t=this.parseBlockHeader(t),t=g.Node.endOfWhiteSpace(e,t);return t=this.parseComment(t),this.parseBlockValue(t)}setOrigRanges(e,t){return t=super.setOrigRanges(e,t),this.header?this.header.setOrigRange(e,t):t}}class f extends g.Node{constructor(e,t){super(e,t),this.items=null}prevNodeIsJsonLike(e=this.items.length){var t=this.items[e-1];return!!t&&(t.jsonLike||t.type===g.Type.COMMENT&&this.prevNodeIsJsonLike(e-1))}parse(e,t){var{parseNode:r,src:n}=this.context=e;let{indent:s,lineStart:o}=e,i=n[t],a=(this.items=[{char:i,offset:t}],g.Node.endOfWhiteSpace(n,t+1));for(i=n[a];i&&"]"!==i&&"}"!==i;){switch(i){case"\n":o=a+1,"\n"===n[g.Node.endOfWhiteSpace(n,o)]&&(c=new y,o=c.parse({src:n},o),this.items.push(c)),(a=g.Node.endOfIndent(n,o))<=o+s&&(i=n[a],a<o+s||"]"!==i&&"}"!==i)&&(this.error=new g.YAMLSemanticError(this,"Insufficient indentation in flow collection"));break;case",":this.items.push({char:i,offset:a}),a+=1;break;case"#":var c=new v;a=c.parse({src:n},a),this.items.push(c);break;case"?":case":":var l=n[a+1];if("\n"===l||"\t"===l||" "===l||","===l||":"===i&&this.prevNodeIsJsonLike()){this.items.push({char:i,offset:a}),a+=1;break}default:l=r({atLineStart:!1,inCollection:!1,inFlow:!0,indent:-1,lineStart:o,parent:this},a);if(!l)return this.valueRange=new g.Range(t,a),a;this.items.push(l),a=g.Node.normalizeOffset(n,l.range.end)}a=g.Node.endOfWhiteSpace(n,a),i=n[a]}return this.valueRange=new g.Range(t,a+1),i&&(this.items.push({char:i,offset:a}),a=g.Node.endOfWhiteSpace(n,a+1),a=this.parseComment(a)),a}setOrigRanges(r,n){return n=super.setOrigRanges(r,n),this.items.forEach(t=>{if(t instanceof g.Node)n=t.setOrigRanges(r,n);else if(0===r.length)t.origOffset=t.offset;else{let e=n;for(;e<r.length&&!(r[e]>t.offset);)++e;t.origOffset=t.offset+e,n=e}}),n}toString(){const{context:{src:r},items:e,range:t,value:n}=this;if(null!=n)return n;var s=e.filter(e=>e instanceof g.Node);let o="",i=t.start;return s.forEach(e=>{var t=r.slice(i,e.range.start);i=e.range.end,"\n"===(o+=t+String(e))[o.length-1]&&"\n"!==r[i-1]&&"\n"===r[i]&&(i+=1)}),o+=r.slice(i,t.end),g.Node.addStringTerminator(r,t.end,o)}}class d extends g.Node{static endOfQuote(e,t){let r=e[t];for(;r&&'"'!==r;)t+="\\"===r?2:1,r=e[t];return t+1}get strValue(){if(!this.valueRange||!this.context)return null;var e=[],{start:r,end:n}=this.valueRange,{indent:s,src:o}=this.context;'"'!==o[n-1]&&e.push(new g.YAMLSyntaxError(this,'Missing closing "quote'));let i="";for(let t=r+1;t<n-1;++t){var a=o[t];if("\n"===a){g.Node.atDocumentBoundary(o,t+1)&&e.push(new g.YAMLSemanticError(this,"Document boundary indicators are not allowed within string values"));var{fold:c,offset:l,error:u}=g.Node.foldNewline(o,t,s);i+=c,t=l,u&&e.push(new g.YAMLSemanticError(this,"Multi-line double-quoted string needs to be sufficiently indented"))}else if("\\"===a)switch(o[t+=1]){case"0":i+="\0";break;case"a":i+="";break;case"b":i+="\b";break;case"e":i+="";break;case"f":i+="\f";break;case"n":i+="\n";break;case"r":i+="\r";break;case"t":i+="\t";break;case"v":i+="\v";break;case"N":i+="";break;case"_":i+=" ";break;case"L":i+="\u2028";break;case"P":i+="\u2029";break;case" ":i+=" ";break;case'"':i+='"';break;case"/":i+="/";break;case"\\":i+="\\";break;case"\t":i+="\t";break;case"x":i+=this.parseCharCode(t+1,2,e),t+=2;break;case"u":i+=this.parseCharCode(t+1,4,e),t+=4;break;case"U":i+=this.parseCharCode(t+1,8,e),t+=8;break;case"\n":for(;" "===o[t+1]||"\t"===o[t+1];)t+=1;break;default:e.push(new g.YAMLSyntaxError(this,"Invalid escape sequence "+o.substr(t-1,2))),i+="\\"+o[t]}else if(" "===a||"\t"===a){c=t;let e=o[t+1];for(;" "===e||"\t"===e;)t+=1,e=o[t+1];"\n"!==e&&(i+=t>c?o.slice(c,t+1):a)}else i+=a}return 0<e.length?{errors:e,str:i}:i}parseCharCode(e,t,r){var n=this.context["src"],s=n.substr(e,t),s=s.length===t&&/^[0-9a-fA-F]+$/.test(s)?parseInt(s,16):NaN;return isNaN(s)?(r.push(new g.YAMLSyntaxError(this,"Invalid escape sequence "+n.substr(e-2,t+2))),n.substr(e-2,t+2)):String.fromCodePoint(s)}parse(e,t){var e=(this.context=e)["src"],r=d.endOfQuote(e,t+1);return this.valueRange=new g.Range(t,r),r=g.Node.endOfWhiteSpace(e,r),this.parseComment(r)}}class h extends g.Node{static endOfQuote(e,t){let r=e[t];for(;r;)if("'"===r){if("'"!==e[t+1])break;r=e[t+=2]}else r=e[t+=1];return t+1}get strValue(){if(!this.valueRange||!this.context)return null;var e=[],{start:r,end:n}=this.valueRange,{indent:s,src:o}=this.context;"'"!==o[n-1]&&e.push(new g.YAMLSyntaxError(this,"Missing closing 'quote"));let i="";for(let t=r+1;t<n-1;++t){var a=o[t];if("\n"===a){g.Node.atDocumentBoundary(o,t+1)&&e.push(new g.YAMLSemanticError(this,"Document boundary indicators are not allowed within string values"));var{fold:c,offset:l,error:u}=g.Node.foldNewline(o,t,s);i+=c,t=l,u&&e.push(new g.YAMLSemanticError(this,"Multi-line single-quoted string needs to be sufficiently indented"))}else if("'"===a)i+=a,"'"!==o[t+=1]&&e.push(new g.YAMLSyntaxError(this,"Unescaped single quote? This should not happen."));else if(" "===a||"\t"===a){c=t;let e=o[t+1];for(;" "===e||"\t"===e;)t+=1,e=o[t+1];"\n"!==e&&(i+=t>c?o.slice(c,t+1):a)}else i+=a}return 0<e.length?{errors:e,str:i}:i}parse(e,t){var e=(this.context=e)["src"],r=h.endOfQuote(e,t+1);return this.valueRange=new g.Range(t,r),r=g.Node.endOfWhiteSpace(e,r),this.parseComment(r)}}class _{static parseType(e,t,r){switch(e[t]){case"*":return g.Type.ALIAS;case">":return g.Type.BLOCK_FOLDED;case"|":return g.Type.BLOCK_LITERAL;case"{":return g.Type.FLOW_MAP;case"[":return g.Type.FLOW_SEQ;case"?":return!r&&g.Node.atBlank(e,t+1,!0)?g.Type.MAP_KEY:g.Type.PLAIN;case":":return!r&&g.Node.atBlank(e,t+1,!0)?g.Type.MAP_VALUE:g.Type.PLAIN;case"-":return!r&&g.Node.atBlank(e,t+1,!0)?g.Type.SEQ_ITEM:g.Type.PLAIN;case'"':return g.Type.QUOTE_DOUBLE;case"'":return g.Type.QUOTE_SINGLE;default:return g.Type.PLAIN}}constructor(e={},{atLineStart:t,inCollection:r,inFlow:n,indent:s,lineStart:o,parent:i}={}){g._defineProperty(this,"parseNode",(e,t)=>{var r,n,s;return g.Node.atDocumentBoundary(this.src,t)?null:({props:s,type:r,valueStart:n}=(e=new _(this,e)).parseProps(t),s=(r=function(e,t){switch(e){case g.Type.ALIAS:return new u(e,t);case g.Type.BLOCK_FOLDED:case g.Type.BLOCK_LITERAL:return new p(e,t);case g.Type.FLOW_MAP:case g.Type.FLOW_SEQ:return new f(e,t);case g.Type.MAP_KEY:case g.Type.MAP_VALUE:case g.Type.SEQ_ITEM:return new c(e,t);case g.Type.COMMENT:case g.Type.PLAIN:return new g.PlainValue(e,t);case g.Type.QUOTE_DOUBLE:return new d(e,t);case g.Type.QUOTE_SINGLE:return new h(e,t);default:return null}}(r,s)).parse(e,n),r.range=new g.Range(t,s),s<=t&&(r.error=new Error("Node#parse consumed no characters"),r.error.parseEnd=s,(r.error.source=r).range.end=t+1),e.nodeStartsCollection(r)?(r.error||e.atLineStart||e.parent.type!==g.Type.DOCUMENT||(r.error=new g.YAMLSyntaxError(r,"Block collection must not have preceding content here (e.g. directives-end indicator)")),s=(n=new w(r)).parse(new _(e),s),n.range=new g.Range(t,s),n):r)}),this.atLineStart=null!=t?t:e.atLineStart||!1,this.inCollection=null!=r?r:e.inCollection||!1,this.inFlow=null!=n?n:e.inFlow||!1,this.indent=null!=s?s:e.indent,this.lineStart=null!=o?o:e.lineStart,this.parent=null!=i?i:e.parent||{},this.root=e.root,this.src=e.src}nodeStartsCollection(e){var{inCollection:t,inFlow:r,src:n}=this;return!t&&!r&&(e instanceof c||"\n"!==n[t=e.range.end]&&"\n"!==n[t-1]&&":"===n[t=g.Node.endOfWhiteSpace(n,t)])}parseProps(r){var{inFlow:e,parent:n,src:s}=this,t=[];let o=!1,i=s[r=this.atLineStart?g.Node.endOfIndent(s,r):g.Node.endOfWhiteSpace(s,r)];for(;i===g.Char.ANCHOR||i===g.Char.COMMENT||i===g.Char.TAG||"\n"===i;){if("\n"===i){let e=r,t;for(;t=e+1,"\n"===s[e=g.Node.endOfIndent(s,t)];);var a=e-(t+this.indent),c=n.type===g.Type.SEQ_ITEM&&n.context.atLineStart;if("#"!==s[e]&&!g.Node.nextNodeIsIndented(s[e],a,!c))break;this.atLineStart=!0,this.lineStart=t,o=!1,r=e}else if(i===g.Char.COMMENT){a=g.Node.endOfLine(s,r+1);t.push(new g.Range(r,a)),r=a}else{let e=g.Node.endOfIdentifier(s,r+1);i===g.Char.TAG&&","===s[e]&&/^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(s.slice(r+1,e+13))&&(e=g.Node.endOfIdentifier(s,e+5)),t.push(new g.Range(r,e)),o=!0,r=g.Node.endOfWhiteSpace(s,e)}i=s[r]}return o&&":"===i&&g.Node.atBlank(s,r+1,!0)&&--r,{props:t,type:_.parseType(s,r,e),valueStart:r}}}return Kt.parse=function(e){const r=[],n=(-1!==e.indexOf("\r")&&(e=e.replace(/\r\n?/g,(e,t)=>(1<e.length&&r.push(t),"\n"))),[]);let t=0;do{var s=new l,o=new _({src:e});t=s.parse(o,t),n.push(s)}while(t<e.length);return n.setOrigRanges=()=>{if(0===r.length)return!1;for(let e=1;e<r.length;++e)r[e]-=e;let t=0;for(let e=0;e<n.length;++e)t=n[e].setOrigRanges(r,t);return r.splice(0,r.length),!0},n.toString=()=>n.join("...\n"),n},Kt}var Gt,Ht={},U={};function Qt(){if(Gt)return U;Gt=1;var b=Wt();function w(e,t,r){return r?-1===r.indexOf("\n")?e+" #"+r:e+`
`+r.replace(/^/gm,`${t||""}#`):e}class _{}function o(e,t,r){if(Array.isArray(e))return e.map((e,t)=>o(e,String(t),r));if(e&&"function"==typeof e.toJSON){const n=r&&r.anchors&&r.anchors.get(e);n&&(r.onCreate=e=>{n.res=e,delete r.onCreate});t=e.toJSON(t,r);return n&&r.onCreate&&r.onCreate(t),t}return r&&r.keep||"bigint"!=typeof e?e:Number(e)}class $ extends _{constructor(e){super(),this.value=e}toJSON(e,t){return t&&t.keep?this.value:o(this.value,e,t)}toString(){return String(this.value)}}function s(e,t,r){let n=r;for(let e=t.length-1;0<=e;--e){var s,o=t[e];n=Number.isInteger(o)&&0<=o?((s=[])[o]=n,s):(s={},Object.defineProperty(s,o,{value:n,writable:!0,enumerable:!0,configurable:!0}),s)}return e.createNode(n,!1)}const i=e=>null==e||"object"==typeof e&&e[Symbol.iterator]().next().done;class E extends _{constructor(e){super(),b._defineProperty(this,"items",[]),this.schema=e}addIn(e,t){if(i(e))this.add(t);else{var[e,...r]=e,n=this.get(e,!0);if(n instanceof E)n.addIn(r,t);else{if(void 0!==n||!this.schema)throw new Error(`Expected YAML collection at ${e}. Remaining path: `+r);this.set(e,s(this.schema,r,t))}}}deleteIn([e,...t]){if(0===t.length)return this.delete(e);var r=this.get(e,!0);if(r instanceof E)return r.deleteIn(t);throw new Error(`Expected YAML collection at ${e}. Remaining path: `+t)}getIn([e,...t],r){e=this.get(e,!0);return 0===t.length?!r&&e instanceof $?e.value:e:e instanceof E?e.getIn(t,r):void 0}hasAllNullValues(){return this.items.every(e=>{return!(!e||"PAIR"!==e.type)&&(null==(e=e.value)||e instanceof $&&null==e.value&&!e.commentBefore&&!e.comment&&!e.tag)})}hasIn([e,...t]){return 0===t.length?this.has(e):(e=this.get(e,!0))instanceof E&&e.hasIn(t)}setIn([e,...t],r){if(0===t.length)this.set(e,r);else{var n=this.get(e,!0);if(n instanceof E)n.setIn(t,r);else{if(void 0!==n||!this.schema)throw new Error(`Expected YAML collection at ${e}. Remaining path: `+t);this.set(e,s(this.schema,t,r))}}}toJSON(){return null}toString(o,{blockItem:e,flowChars:t,isMap:r,itemIndent:i},n,s){const{indent:a,indentStep:c,stringify:l}=o,u=this.type===b.Type.FLOW_MAP||this.type===b.Type.FLOW_SEQ||o.inFlow;u&&(i+=c);r=r&&this.hasAllNullValues();o=Object.assign({},o,{allNullValues:r,indent:i,inFlow:u,type:null});let p=!1,f=!1;r=this.items.reduce((t,e,r)=>{let n,s=(e&&(!p&&e.spaceBefore&&t.push({type:"comment",str:""}),e.commentBefore&&e.commentBefore.match(/^.*$/gm).forEach(e=>{t.push({type:"comment",str:"#"+e})}),e.comment&&(n=e.comment),u)&&(!p&&e.spaceBefore||e.commentBefore||e.comment||e.key&&(e.key.commentBefore||e.key.comment)||e.value&&(e.value.commentBefore||e.value.comment))&&(f=!0),p=!1,l(e,o,()=>n=null,()=>p=!0));return u&&!f&&s.includes("\n")&&(f=!0),u&&r<this.items.length-1&&(s+=","),s=w(s,i,n),p&&(n||u)&&(p=!1),t.push({type:"item",str:s}),t},[]);let d;if(0===r.length)d=t.start+t.end;else if(u){var{start:t,end:h}=t,m=r.map(e=>e.str);if(f||m.reduce((e,t)=>e+t.length+2,2)>E.maxFlowStringSingleLineLength){d=t;for(const g of m)d+=g?`
`+c+a+g:"\n";d+=`
`+a+h}else d=`${t} ${m.join(" ")} `+h}else{t=r.map(e);d=t.shift();for(const y of t)d+=y?`
`+a+y:"\n"}return this.comment?(d+="\n"+this.comment.replace(/^/gm,a+"#"),n&&n()):p&&s&&s(),d}}function n(e){let t=e instanceof $?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),Number.isInteger(t)&&0<=t?t:null}b._defineProperty(E,"maxFlowStringSingleLineLength",60);class S extends E{add(e){this.items.push(e)}delete(e){e=n(e);return"number"==typeof e&&0<this.items.splice(e,1).length}get(e,t){var e=n(e);if("number"==typeof e)return e=this.items[e],!t&&e instanceof $?e.value:e}has(e){e=n(e);return"number"==typeof e&&e<this.items.length}set(e,t){var r=n(e);if("number"!=typeof r)throw new Error(`Expected a valid index, not ${e}.`);this.items[r]=t}toJSON(e,t){var r=[];t&&t.onCreate&&t.onCreate(r);let n=0;for(const s of this.items)r.push(o(s,String(n++),t));return r}toString(e,t,r){return e?super.toString(e,{blockItem:e=>"comment"===e.type?e.str:"- "+e.str,flowChars:{start:"[",end:"]"},isMap:!1,itemIndent:(e.indent||"")+"  "},t,r):JSON.stringify(this)}}class g extends _{constructor(e,t=null){super(),this.key=e,this.value=t,this.type=g.Type.PAIR}get commentBefore(){return this.key instanceof _?this.key.commentBefore:void 0}set commentBefore(e){if(null==this.key&&(this.key=new $(null)),!(this.key instanceof _))throw new Error("Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.");this.key.commentBefore=e}addToJSMap(e,t){var r,n,s=o(this.key,"",e);return t instanceof Map?(r=o(this.value,s,e),t.set(s,r)):t instanceof Set?t.add(s):(r=this.key,n=e,n=null===(s=s)?"":"object"!=typeof s?String(s):r instanceof _&&n&&n.doc?r.toString({anchors:Object.create(null),doc:n.doc,indent:"",indentStep:n.indentStep,inFlow:!0,inStringifyKey:!0,stringify:n.stringify}):JSON.stringify(s),s=o(this.value,n,e),n in t?Object.defineProperty(t,n,{value:s,writable:!0,enumerable:!0,configurable:!0}):t[n]=s),t}toJSON(e,t){var r=t&&t.mapAsMap?new Map:{};return this.addToJSMap(t,r)}toString(e,t,r){if(!e||!e.doc)return JSON.stringify(this);var{indent:n,indentSeq:s,simpleKeys:o}=e.doc.options;let{key:i,value:a}=this,c=i instanceof _&&i.comment;if(o){if(c)throw new Error("With simple keys, key nodes cannot have comments");if(i instanceof E)throw new Error("With simple keys, collection cannot be used as a key value")}let l=!o&&(!i||c||(i instanceof _?i instanceof E||i.type===b.Type.BLOCK_FOLDED||i.type===b.Type.BLOCK_LITERAL:"object"==typeof i));var{doc:u,indent:p,indentStep:f,stringify:d}=e;e=Object.assign({},e,{implicitKey:!l,indent:p+f});let h=!1,m=d(i,e,()=>c=null,()=>h=!0);if(m=w(m,e.indent,c),!l&&1024<m.length){if(o)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");l=!0}if(e.allNullValues&&!o)return this.comment?(m=w(m,e.indent,this.comment),t&&t()):h&&!c&&r&&r(),e.inFlow&&!l?m:"? "+m;m=l?`? ${m}
${p}:`:m+":",this.comment&&(m=w(m,e.indent,this.comment),t)&&t();let g="",y=null;a instanceof _?(a.spaceBefore&&(g="\n"),a.commentBefore&&(f=a.commentBefore.replace(/^/gm,e.indent+"#"),g+=`
`+f),y=a.comment):a&&"object"==typeof a&&(a=u.schema.createNode(a,!0)),e.implicitKey=!1,!l&&!this.comment&&a instanceof $&&(e.indentAtStart=m.length+1),h=!1,!s&&2<=n&&!e.inFlow&&!l&&a instanceof S&&a.type!==b.Type.FLOW_SEQ&&!a.tag&&!u.anchors.getName(a)&&(e.indent=e.indent.substr(2));o=d(a,e,()=>y=null,()=>h=!0);let v=" ";return g||this.comment?v=g+`
`+e.indent:!l&&a instanceof E?("["!==o[0]&&"{"!==o[0]||o.includes("\n"))&&(v=`
`+e.indent):"\n"===o[0]&&(v=""),h&&!y&&r&&r(),w(m+v+o,e.indent,y)}}b._defineProperty(g,"Type",{PAIR:"PAIR",MERGE_PAIR:"MERGE_PAIR"});const a=(t,r)=>{var e;if(t instanceof u)return(e=r.get(t.source)).count*e.aliasCount;if(t instanceof E){let e=0;for(const s of t.items){var n=a(s,r);n>e&&(e=n)}return e}return t instanceof g?(e=a(t.key,r),t=a(t.value,r),Math.max(e,t)):1};class u extends _{static stringify({range:e,source:t},{anchors:r,doc:n,implicitKey:s,inStringifyKey:o}){let i=Object.keys(r).find(e=>r[e]===t);if(i=!i&&o?n.anchors.getName(t)||n.anchors.newName():i)return"*"+i+(s?" ":"");o=n.anchors.getName(t)?"Alias node must be after source node":"Source node not found for alias node";throw new Error(o+` [${e}]`)}constructor(e){super(),this.source=e,this.type=b.Type.ALIAS}set tag(e){throw new Error("Alias nodes cannot have tags")}toJSON(e,t){if(!t)return o(this.source,e,t);var r,{anchors:e,maxAliasCount:t}=t,n=e.get(this.source);if(!n||void 0===n.res)throw r="This should not happen: Alias anchor was not resolved?",this.cstNode?new b.YAMLReferenceError(this.cstNode,r):new ReferenceError(r);if(0<=t&&(n.count+=1,0===n.aliasCount&&(n.aliasCount=a(this.source,e)),n.count*n.aliasCount>t))throw r="Excessive alias count indicates a resource exhaustion attack",this.cstNode?new b.YAMLReferenceError(this.cstNode,r):new ReferenceError(r);return n.res}toString(e){return u.stringify(this,e)}}function c(e,t){var r=t instanceof $?t.value:t;for(const n of e)if(n instanceof g){if(n.key===t||n.key===r)return n;if(n.key&&n.key.value===r)return n}}b._defineProperty(u,"default",!0);class p extends E{add(t,e){t?t instanceof g||(t=new g(t.key||t,t.value)):t=new g(t);var r=c(this.items,t.key);const n=this.schema&&this.schema.sortMapEntries;if(r){if(!e)throw new Error(`Key ${t.key} already set`);r.value=t.value}else!n||-1===(e=this.items.findIndex(e=>n(t,e)<0))?this.items.push(t):this.items.splice(e,0,t)}delete(e){e=c(this.items,e);return!!e&&0<this.items.splice(this.items.indexOf(e),1).length}get(e,t){e=c(this.items,e),e=e&&e.value;return!t&&e instanceof $?e.value:e}has(e){return!!c(this.items,e)}set(e,t){this.add(new g(e,t),!0)}toJSON(e,t,r){var n=r?new r:t&&t.mapAsMap?new Map:{};t&&t.onCreate&&t.onCreate(n);for(const s of this.items)s.addToJSMap(t,n);return n}toString(e,t,r){if(!e)return JSON.stringify(this);for(const n of this.items)if(!(n instanceof g))throw new Error(`Map items must all be pairs; found ${JSON.stringify(n)} instead`);return super.toString(e,{blockItem:e=>e.str,flowChars:{start:"{",end:"}"},isMap:!0,itemIndent:e.indent||""},t,r)}}class f extends g{constructor(t){if(t instanceof g){let e=t.value;e instanceof S||((e=new S).items.push(t.value),e.range=t.value.range),super(t.key,e),this.range=t.range}else super(new $("<<"),new S);this.type=g.Type.MERGE_PAIR}addToJSMap(e,t){for(var{source:r}of this.value.items){if(!(r instanceof p))throw new Error("Merge sources must be maps");var n,s;for([n,s]of r.toJSON(null,e,Map))t instanceof Map?t.has(n)||t.set(n,s):t instanceof Set?t.add(n):Object.prototype.hasOwnProperty.call(t,n)||Object.defineProperty(t,n,{value:s,writable:!0,enumerable:!0,configurable:!0})}return t}toString(e,t){var r=this.value;if(1<r.items.length)return super.toString(e,t);this.value=r.items[0];e=super.toString(e,t);return this.value=r,e}}var e={defaultType:b.Type.BLOCK_LITERAL,lineWidth:76};const y={defaultType:b.Type.PLAIN,doubleQuoted:{jsonEncoding:!1,minMultiLineLength:40},fold:{lineWidth:80,minContentWidth:20}};function v(e,t,r){for(var{format:n,test:s,resolve:o}of t)if(s){s=e.match(s);if(s){let e=o.apply(null,s);return e instanceof $||(e=new $(e)),n&&(e.format=n),e}}return r&&(e=r(e)),new $(e)}const O="flow",P="block",k="quoted",A=(e,t)=>{let r=e[t+1];for(;" "===r||"\t"===r;){for(;(r=e[t+=1])&&"\n"!==r;);r=e[t+1]}return t};function N(t,r,n,{indentAtStart:e,lineWidth:s=80,minContentWidth:o=20,onFold:i,onOverflow:a}){if(!s||s<0)return t;var c=Math.max(1+o,1+s-r.length);if(t.length<=c)return t;var l=[],u={};let p=s-r.length,f=("number"==typeof e&&(e>s-Math.max(2,o)?l.push(0):p=s-e),void 0),d=void 0,h=!1,m=-1,g=-1,y=-1;n===P&&-1!==(m=A(t,m))&&(p=m+c);for(let e;e=t[m+=1];){if(n===k&&"\\"===e){switch(t[(g=m)+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}y=m}if("\n"===e)n===P&&(m=A(t,m)),p=m+c,f=void 0;else if(" "===e&&d&&" "!==d&&"\n"!==d&&"\t"!==d&&(v=t[m+1])&&" "!==v&&"\n"!==v&&"\t"!==v&&(f=m),m>=p)if(f)l.push(f),p=f+c,f=void 0;else if(n===k){for(;" "===d||"\t"===d;)d=e,e=t[m+=1],h=!0;var v=m>y+1?m-2:g-1;if(u[v])return t;l.push(v),u[v]=!0,p=v+c,f=void 0}else h=!0;d=e}if(h&&a&&a(),0===l.length)return t;i&&i();let b=t.slice(0,l[0]);for(let e=0;e<l.length;++e){var w=l[e];const p=l[e+1]||t.length;0===w?b=`
`+r+t.slice(0,p):(n===k&&u[w]&&(b+=t[w]+"\\"),b+=`
`+r+t.slice(w+1,p))}return b}const x=({indentAtStart:e})=>e?Object.assign({indentAtStart:e},y.fold):y.fold,T=e=>/^(%|---|\.\.\.)/m.test(e);function j(e,t){var r=t["implicitKey"],{jsonEncoding:n,minMultiLineLength:s}=y.doubleQuoted,o=JSON.stringify(e);if(n)return o;var i=t.indent||(T(e)?"  ":"");let a="",c=0;for(let e=0,t=o[e];t;t=o[++e])if(" "===t&&"\\"===o[e+1]&&"n"===o[e+2]&&(a+=o.slice(c,e)+"\\ ",e+=1,c=e,t="\\"),"\\"===t)switch(o[e+1]){case"u":a+=o.slice(c,e);var l=o.substr(e+2,4);switch(l){case"0000":a+="\\0";break;case"0007":a+="\\a";break;case"000b":a+="\\v";break;case"001b":a+="\\e";break;case"0085":a+="\\N";break;case"00a0":a+="\\_";break;case"2028":a+="\\L";break;case"2029":a+="\\P";break;default:"00"===l.substr(0,2)?a+="\\x"+l.substr(2):a+=o.substr(e,6)}e+=5,c=e+1;break;case"n":if(r||'"'===o[e+2]||o.length<s)e+=1;else{for(a+=o.slice(c,e)+"\n\n";"\\"===o[e+2]&&"n"===o[e+3]&&'"'!==o[e+4];)a+="\n",e+=2;a+=i," "===o[e+2]&&(a+="\\"),e+=1,c=e+1}break;default:e+=1}return a=c?a+o.slice(c):o,r?a:N(a,i,k,x(t))}function C(e,t){if(t.implicitKey){if(/\n/.test(e))return j(e,t)}else if(/[ \t]\n|\n[ \t]/.test(e))return j(e,t);var r=t.indent||(T(e)?"  ":""),e="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&
`+r)+"'";return t.implicitKey?e:N(e,r,O,x(t))}function M({comment:e,type:t,value:r},n,s,o){if(/\n[\t ]+$/.test(r)||/^\s*$/.test(r))return j(r,n);n=n.indent||(n.forceBlockIndent||T(r)?"  ":"");const i=n?"2":"1";t=t!==b.Type.BLOCK_FOLDED&&(t===b.Type.BLOCK_LITERAL||!function(r,e,t){if(e&&!(e<0)){var n=e-t,s=r.length;if(!(s<=n)){for(let e=0,t=0;e<s;++e)if("\n"===r[e]){if(e-t>n)return 1;if(s-(t=e+1)<=n)return}return 1}}}(r,y.fold.lineWidth,n.length));let a=t?"|":">";if(!r)return a+"\n";let c="",l="";if(r=r.replace(/[\n\t ]*$/,e=>{var t=e.indexOf("\n");return-1===t?a+="-":r!==e&&t===e.length-1||(a+="+",o&&o()),l=e.replace(/\n$/,""),""}).replace(/^[\n ]*/,e=>{-1!==e.indexOf(" ")&&(a+=i);var t=e.match(/ +$/);return t?(c=e.slice(0,-t[0].length),t[0]):(c=e,"")}),l=l&&l.replace(/\n+(?!\n|$)/g,"$&"+n),c=c&&c.replace(/\n+/g,"$&"+n),e&&(a+=" #"+e.replace(/ ?[\r\n]+/g," "),s)&&s(),!r)return""+a+i+`
`+n+l;if(t)return r=r.replace(/\n+/g,"$&"+n),a+`
`+n+c+r+l;r=r.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,"$&"+n);e=N(""+c+r+l,n,P,y.fold);return a+`
`+n+e}function I(t,r){let n,s;switch(r.type){case b.Type.FLOW_MAP:n="}",s="flow map";break;case b.Type.FLOW_SEQ:n="]",s="flow sequence";break;default:return void t.push(new b.YAMLSemanticError(r,"Not a flow collection!?"))}let o;for(let e=r.items.length-1;0<=e;--e){var i=r.items[e];if(!i||i.type!==b.Type.COMMENT){o=i;break}}if(o&&o.char!==n){var a=`Expected ${s} to end with `+n;let e;"number"==typeof o.offset?(e=new b.YAMLSemanticError(r,a)).offset=o.offset+1:(e=new b.YAMLSemanticError(o,a),o.range&&o.range.end&&(e.offset=o.range.end-o.range.start)),t.push(e)}}function R(e,t){var r=t.context.src[t.range.start-1];"\n"!==r&&"\t"!==r&&" "!==r&&e.push(new b.YAMLSemanticError(t,"Comments must be separated from other tokens by white space characters"))}function L(e,t){t=String(t),t=t.substr(0,8)+"..."+t.substr(-8);return new b.YAMLSemanticError(e,`The "${t}" key is too long`)}function d(t,e){for(var{afterKey:r,before:n,comment:s}of e){let e=t.items[n];e?(r&&e.value&&(e=e.value),void 0===s?!r&&e.commentBefore||(e.spaceBefore=!0):e.commentBefore?e.commentBefore+="\n"+s:e.commentBefore=s):void 0!==s&&(t.comment?t.comment+="\n"+s:t.comment=s)}}function l(t,r){var e=r.strValue;return e?"string"==typeof e?e:(e.errors.forEach(e=>{e.source||(e.source=r),t.errors.push(e)}),e.str):""}function m(t,r){var{tag:e,type:n}=r;let s=!1;if(e){var{handle:e,suffix:o,verbatim:i}=e;if(i){if("!"!==i&&"!!"!==i)return i;t.errors.push(new b.YAMLSemanticError(r,`Verbatim tags aren't resolved, so ${i} is invalid.`))}else if("!"!==e||o)try{{var a=t;var c=r;const{handle:u,suffix:p}=c.tag;let e=a.tagPrefixes.find(e=>e.handle===u);if(!e){var l=a.getDefaults().tagPrefixes;if(!(e=l?l.find(e=>e.handle===u):e))throw new b.YAMLSemanticError(c,`The ${u} tag handle is non-default and was not declared.`)}if(!p)throw new b.YAMLSemanticError(c,`The ${u} tag has no suffix.`);if("!"===u&&"1.0"===(a.version||a.options.version)){if("^"===p[0])return a.warnings.push(new b.YAMLWarning(c,"YAML 1.0 ^ tag expansion is not supported")),p;if(/[:/]/.test(p))return(l=p.match(/^([a-z0-9-]+)\/(.*)/i))?`tag:${l[1]}.yaml.org,2002:`+l[2]:"tag:"+p}return e.prefix+decodeURIComponent(p);return}}catch(e){t.errors.push(e)}else s=!0}switch(n){case b.Type.BLOCK_FOLDED:case b.Type.BLOCK_LITERAL:case b.Type.QUOTE_DOUBLE:case b.Type.QUOTE_SINGLE:return b.defaultTags.STR;case b.Type.FLOW_MAP:case b.Type.MAP:return b.defaultTags.MAP;case b.Type.FLOW_SEQ:case b.Type.SEQ:return b.defaultTags.SEQ;case b.Type.PLAIN:return s?b.defaultTags.STR:null;default:return null}}function h(e,t,r){var n,s=e.schema["tags"],o=[];for(const a of s)if(a.tag===r){if(!a.test)return(n=a.resolve(e,t))instanceof E?n:new $(n);o.push(a)}var i=l(e,t);return"string"==typeof i&&0<o.length?v(i,o,s.scalarFallback):null}function F(t,r,e){try{var n=h(t,r,e);if(n)return e&&r.tag&&(n.tag=e),n}catch(e){return e.source||(e.source=r),t.errors.push(e),null}try{var s,o,i=function({type:e}){switch(e){case b.Type.FLOW_MAP:case b.Type.MAP:return b.defaultTags.MAP;case b.Type.FLOW_SEQ:case b.Type.SEQ:return b.defaultTags.SEQ;default:return b.defaultTags.STR}}(r);if(i)return s=`The tag ${e} is unavailable, falling back to `+i,t.warnings.push(new b.YAMLWarning(r,s)),(o=h(t,r,i)).tag=e,o;throw new Error(`The tag ${e} is unavailable`)}catch(e){n=new b.YAMLReferenceError(r,e.message);return n.stack=e.stack,t.errors.push(n),null}}const V=e=>{return!!e&&(e=e["type"],e===b.Type.MAP_KEY||e===b.Type.MAP_VALUE||e===b.Type.SEQ_ITEM)};function D(e,t){if(!t)return null;t.error&&e.errors.push(t.error);var r,n,{comments:s,hasAnchor:o,hasTag:i}=function(e,t){var r,n,s={before:[],after:[]};let o=!1,i=!1;for({start:r,end:n}of V(t.context.parent)?t.context.parent.props.concat(t.props):t.props)switch(t.context.src[r]){case b.Char.COMMENT:t.commentHasRequiredWhitespace(r)||e.push(new b.YAMLSemanticError(t,"Comments must be separated from other tokens by white space characters"));var{header:a,valueRange:c}=t;(c&&(r>c.start||a&&r>a.start)?s.after:s.before).push(t.context.src.slice(r+1,n));break;case b.Char.ANCHOR:o&&e.push(new b.YAMLSemanticError(t,"A node can have at most one anchor")),o=!0;break;case b.Char.TAG:i&&e.push(new b.YAMLSemanticError(t,"A node can have at most one tag")),i=!0}return{comments:s,hasAnchor:o,hasTag:i}}(e.errors,t),a=(o&&(r=e["anchors"],n=t.anchor,(a=r.getNode(n))&&(r.map[r.newName(n)]=a),r.map[n]=t),t.type===b.Type.ALIAS&&(o||i)&&e.errors.push(new b.YAMLSemanticError(t,"An alias node must not specify any properties")),function(e,t){var r,n,{anchors:s,errors:o,schema:i}=e;if(t.type===b.Type.ALIAS)return r=t.rawValue,(n=s.getNode(r))?(n=new u(n),s._cstAliases.push(n),n):(o.push(new b.YAMLReferenceError(t,"Aliased anchor not found: "+r)),null);if(s=m(e,t))return F(e,t,s);if(t.type!==b.Type.PLAIN)return n=`Failed to resolve ${t.type} node here`,o.push(new b.YAMLSyntaxError(t,n)),null;try{return v(l(e,t),i.tags,i.tags.scalarFallback)}catch(e){return e.source||(e.source=t),o.push(e),null}}(e,t));return a&&(a.range=[t.range.start,t.range.end],e.options.keepCstNodes&&(a.cstNode=t),e.options.keepNodeTypes&&(a.type=t.type),(r=s.before.join("\n"))&&(a.commentBefore=a.commentBefore?a.commentBefore+`
`+r:r),n=s.after.join("\n"))&&(a.comment=a.comment?a.comment+`
`+n:n),t.resolved=a}const B=({context:{lineStart:t,node:e,src:r},props:n})=>{if(0===n.length)return!1;var s=n[0]["start"];if(e&&s>e.valueRange.start)return!1;if(r[s]!==b.Char.COMMENT)return!1;for(let e=t;e<s;++e)if("\n"===r[e])return!1;return!0};return U.Alias=u,U.Collection=E,U.Merge=f,U.Node=_,U.Pair=g,U.Scalar=$,U.YAMLMap=p,U.YAMLSeq=S,U.addComment=w,U.binaryOptions=e,U.boolOptions={trueStr:"true",falseStr:"false"},U.findPair=c,U.intOptions={asBigInt:!1},U.isEmptyPath=i,U.nullOptions={nullStr:"null"},U.resolveMap=function(n,s){if(s.type!==b.Type.MAP&&s.type!==b.Type.FLOW_MAP)return e=`A ${s.type} node cannot be resolved as a mapping`,n.errors.push(new b.YAMLSyntaxError(s,e)),null;var{comments:e,items:o}=(s.type===b.Type.FLOW_MAP?function(t,r){var n=[],s=[];let o=void 0,i=!1,a="{";for(let e=0;e<r.items.length;++e){var c=r.items[e];if("string"==typeof c.char){var{char:l,offset:u}=c;if("?"!==l||void 0!==o||i){if(":"===l){if(void 0===o&&(o=null),":"===a){a=",";continue}}else if(i&&(void 0===o&&","!==l&&(o=null),i=!1),void 0!==o&&(s.push(new g(o)),o=void 0,","===l)){a=":";continue}if("}"===l){if(e===r.items.length-1)continue}else if(l===a){a=":";continue}l=new b.YAMLSyntaxError(r,"Flow map contains an unexpected "+l);l.offset=u,t.errors.push(l)}else i=!0,a=":"}else c.type===b.Type.BLANK_LINE?n.push({afterKey:!!o,before:s.length}):c.type===b.Type.COMMENT?(R(t.errors,c),n.push({afterKey:!!o,before:s.length,comment:c.comment})):void 0===o?(","===a&&t.errors.push(new b.YAMLSemanticError(c,"Separator , missing in flow map")),o=D(t,c)):(","!==a&&t.errors.push(new b.YAMLSemanticError(c,"Indicator : missing in flow map entry")),s.push(new g(o,D(t,c))),o=void 0,i=!1)}I(t.errors,r),void 0!==o&&s.push(new g(o));return{comments:n,items:s}}:function(r,n){var e=[],s=[];let o=void 0,i=null;for(let t=0;t<n.items.length;++t){var a=n.items[t];switch(a.type){case b.Type.BLANK_LINE:e.push({afterKey:!!o,before:s.length});break;case b.Type.COMMENT:e.push({afterKey:!!o,before:s.length,comment:a.comment});break;case b.Type.MAP_KEY:void 0!==o&&s.push(new g(o)),a.error&&r.errors.push(a.error),o=D(r,a.node),i=null;break;case b.Type.MAP_VALUE:{void 0===o&&(o=null),a.error&&r.errors.push(a.error),a.context.atLineStart||!a.node||a.node.type!==b.Type.MAP||a.node.context.atLineStart||r.errors.push(new b.YAMLSemanticError(a.node,"Nested mappings are not allowed in compact mappings"));let e=a.node;!e&&0<a.props.length&&((e=new b.PlainValue(b.Type.PLAIN,[])).context={parent:a,src:a.context.src},c=a.range.start+1,e.range={start:c,end:c},e.valueRange={start:c,end:c},"number"==typeof a.range.origStart)&&(c=a.range.origStart+1,e.range.origStart=e.range.origEnd=c,e.valueRange.origStart=e.valueRange.origEnd=c);var c=new g(o,D(r,e));!function(t,r){if(B(t)){var n=t.getPropValue(0,b.Char.COMMENT,!0);let e=!1;var s=r.value.commentBefore;s&&s.startsWith(n)?(r.value.commentBefore=s.substr(n.length+1),e=!0):(s=r.value.comment,!t.node&&s&&s.startsWith(n)&&(r.value.comment=s.substr(n.length+1),e=!0)),e&&(r.comment=n)}}(a,c),s.push(c),o&&"number"==typeof i&&a.range.start>i+1024&&r.errors.push(L(n,o)),o=void 0,i=null}break;default:void 0!==o&&s.push(new g(o)),o=D(r,a),i=a.range.start,a.error&&r.errors.push(a.error);e:for(let e=t+1;;++e){var l=n.items[e];switch(l&&l.type){case b.Type.BLANK_LINE:case b.Type.COMMENT:continue;case b.Type.MAP_VALUE:break e;default:r.errors.push(new b.YAMLSemanticError(a,"Implicit map keys need to be followed by map values"));break e}}a.valueRangeContainsNewline&&r.errors.push(new b.YAMLSemanticError(a,"Implicit map keys need to be on a single line"))}}void 0!==o&&s.push(new g(o));return{comments:e,items:s}})(n,s),t=new p;t.items=o,d(t,e);let i=!1;for(let r=0;r<o.length;++r){var a=o[r]["key"];if(a instanceof E&&(i=!0),n.schema.merge&&a&&"<<"===a.value){o[r]=new f(o[r]);var c=o[r].value.items;let t=null;c.some(e=>{return e instanceof u?(e=e.source["type"],e!==b.Type.MAP&&e!==b.Type.FLOW_MAP&&(t="Merge nodes aliases can only point to maps")):t="Merge nodes can only have Alias nodes as values"}),t&&n.errors.push(new b.YAMLSemanticError(s,t))}else for(let e=r+1;e<o.length;++e){var l=o[e]["key"];if(a===l||a&&l&&Object.prototype.hasOwnProperty.call(a,"value")&&a.value===l.value){n.errors.push(new b.YAMLSemanticError(s,`Map keys must be unique; "${a}" is repeated`));break}}}return i&&!n.options.mapAsMap&&n.warnings.push(new b.YAMLWarning(s,"Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.")),s.resolved=t},U.resolveNode=D,U.resolveSeq=function(e,t){var r,n,s;return t.type!==b.Type.SEQ&&t.type!==b.Type.FLOW_SEQ?(r=`A ${t.type} node cannot be resolved as a sequence`,e.errors.push(new b.YAMLSyntaxError(t,r)),null):({comments:r,items:n}=(t.type===b.Type.FLOW_SEQ?function(t,r){var n=[],s=[];let o=!1,i=void 0,a=null,c="[",l=null;for(let e=0;e<r.items.length;++e){var u=r.items[e];if("string"==typeof u.char){var p,{char:f,offset:d}=u;if(":"===f||!o&&void 0===i||(o&&void 0===i&&(i=c?s.pop():null),s.push(new g(i)),o=!1,i=void 0,a=null),f===c)c=null;else if(c||"?"!==f)if("["!==c&&":"===f&&void 0===i){if(","===c){if((i=s.pop())instanceof g&&((p=new b.YAMLSemanticError(r,"Chaining flow sequence pairs is invalid")).offset=d,t.errors.push(p)),!o&&"number"==typeof a){var h=u.range?u.range.start:u.offset,m=(h>a+1024&&t.errors.push(L(r,i)),l.context)["src"];for(let e=a;e<h;++e)if("\n"===m[e]){t.errors.push(new b.YAMLSemanticError(l,"Implicit keys of flow sequence pairs need to be on a single line"));break}}}else i=null;a=null,o=!1,c=null}else("["===c||"]"!==f||e<r.items.length-1)&&((p=new b.YAMLSyntaxError(r,"Flow sequence contains an unexpected "+f)).offset=d,t.errors.push(p));else o=!0}else u.type===b.Type.BLANK_LINE?n.push({before:s.length}):u.type===b.Type.COMMENT?(R(t.errors,u),n.push({comment:u.comment,before:s.length})):(c&&(f=`Expected a ${c} in flow sequence`,t.errors.push(new b.YAMLSemanticError(u,f))),d=D(t,u),void 0===i?(s.push(d),l=u):(s.push(new g(i,d)),i=void 0),a=u.range.start,c=",")}I(t.errors,r),void 0!==i&&s.push(new g(i));return{comments:n,items:s}}:function(t,r){var n=[],s=[];for(let e=0;e<r.items.length;++e){var o=r.items[e];switch(o.type){case b.Type.BLANK_LINE:n.push({before:s.length});break;case b.Type.COMMENT:n.push({comment:o.comment,before:s.length});break;case b.Type.SEQ_ITEM:o.error&&t.errors.push(o.error),s.push(D(t,o.node)),o.hasProps&&t.errors.push(new b.YAMLSemanticError(o,"Sequence items cannot have tags or anchors before the - indicator"));break;default:o.error&&t.errors.push(o.error),t.errors.push(new b.YAMLSyntaxError(o,`Unexpected ${o.type} node in sequence`))}}return{comments:n,items:s}})(e,t),(s=new S).items=n,d(s,r),!e.options.mapAsMap&&n.some(e=>e instanceof g&&e.key instanceof E)&&e.warnings.push(new b.YAMLWarning(t,"Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.")),t.resolved=s)},U.resolveString=l,U.strOptions=y,U.stringifyNumber=function({format:e,minFractionDigits:r,tag:t,value:n}){if("bigint"==typeof n)return String(n);if(!isFinite(n))return isNaN(n)?".nan":n<0?"-.inf":".inf";let s=JSON.stringify(n);if(!e&&r&&(!t||"tag:yaml.org,2002:float"===t)&&/^\d/.test(s)){let e=s.indexOf("."),t=(e<0&&(e=s.length,s+="."),r-(s.length-e-1));for(;0<t--;)s+="0"}return s},U.stringifyString=function(f,d,h,m){var e=y["defaultType"],{implicitKey:t,inFlow:r}=d;let{type:n,value:g}=f;"string"!=typeof g&&(g=String(g),f=Object.assign({},f,{value:g}));var s=e=>{switch(e){case b.Type.BLOCK_FOLDED:case b.Type.BLOCK_LITERAL:return M(f,d,h,m);case b.Type.QUOTE_DOUBLE:return j(g,d);case b.Type.QUOTE_SINGLE:return C(g,d);case b.Type.PLAIN:var t=f,r=d,n=h,s=m,{comment:o,type:i,value:a}=t,{actualString:c,implicitKey:l,indent:u,inFlow:p}=r;if(l&&/[\n[\]{},]/.test(a)||p&&/[[\]{},]/.test(a))return j(a,r);if(!a||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(a))return l||p||-1===a.indexOf("\n")?(-1!==a.indexOf('"')&&-1===a.indexOf("'")?C:j)(a,r):M(t,r,n,s);if(!l&&!p&&i!==b.Type.PLAIN&&-1!==a.indexOf("\n"))return M(t,r,n,s);if(""===u&&T(a))return r.forceBlockIndent=!0,M(t,r,n,s);if(i=a.replace(/\n+/g,`$&
`+u),c){t=r.doc.schema["tags"];if("string"!=typeof v(i,t,t.scalarFallback).value)return j(a,r)}return s=l?i:N(i,u,O,x(r)),!o||p||-1===s.indexOf("\n")&&-1===o.indexOf("\n")?s:(n&&n(),c=s,t=u,(a=o)?`#${a.replace(/[\s\S]^/gm,`$&${t}#`)}
`+t+c:c);default:return null}};let o=s(n=(n===b.Type.QUOTE_DOUBLE||!/[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(g))&&(!t&&!r||n!==b.Type.BLOCK_FOLDED&&n!==b.Type.BLOCK_LITERAL)?n:b.Type.QUOTE_DOUBLE);if(null===o&&null===(o=s(e)))throw new Error("Unsupported default string type "+e);return o},U.toJSON=o,U}var Zt,Xt,er,tr,rr,nr,sr={},b={};function or(){if(!Zt){Zt=1;var u=Wt(),p=Qt(),e={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve:(e,t)=>{e=p.resolveString(e,t);return y.from(e,"base64")},options:p.binaryOptions,stringify:({comment:e,type:t,value:r},n,s,o)=>{let i;i=(r instanceof y?r:y.from(r.buffer)).toString("base64");if((t=t||p.binaryOptions.defaultType)===u.Type.QUOTE_DOUBLE)r=i;else{var a=p.binaryOptions["lineWidth"],c=Math.ceil(i.length/a),l=new Array(c);for(let e=0,t=0;e<c;++e,t+=a)l[e]=i.substr(t,a);r=l.join(t===u.Type.BLOCK_LITERAL?"\n":" ")}return p.stringifyString({comment:e,type:t,value:r},n,s,o)}},t={default:!1,tag:"tag:yaml.org,2002:pairs",resolve:a,createNode:c};class d extends p.YAMLSeq{constructor(){super(),u._defineProperty(this,"add",p.YAMLMap.prototype.add.bind(this)),u._defineProperty(this,"delete",p.YAMLMap.prototype.delete.bind(this)),u._defineProperty(this,"get",p.YAMLMap.prototype.get.bind(this)),u._defineProperty(this,"has",p.YAMLMap.prototype.has.bind(this)),u._defineProperty(this,"set",p.YAMLMap.prototype.set.bind(this)),this.tag=d.tag}toJSON(e,r){var n=new Map;r&&r.onCreate&&r.onCreate(n);for(const s of this.items){let e,t;if(s instanceof p.Pair?(e=p.toJSON(s.key,"",r),t=p.toJSON(s.value,e,r)):e=p.toJSON(s,"",r),n.has(e))throw new Error("Ordered maps must not include duplicate keys");n.set(e,t)}return n}}u._defineProperty(d,"tag","tag:yaml.org,2002:omap");var r={identify:e=>e instanceof Map,nodeClass:d,default:!1,tag:"tag:yaml.org,2002:omap",resolve:function(e,t){var r,e=a(e,t),n=[];for({key:r}of e.items)if(r instanceof p.Scalar){if(n.includes(r.value))throw new u.YAMLSemanticError(t,"Ordered maps must not include duplicate keys");n.push(r.value)}return Object.assign(new d,e)},createNode:function(e,t,r){return e=c(e,t,r),(t=new d).items=e.items,t}};class h extends p.YAMLMap{constructor(){super(),this.tag=h.tag}add(e){e=e instanceof p.Pair?e:new p.Pair(e);p.findPair(this.items,e.key)||this.items.push(e)}get(e,t){e=p.findPair(this.items,e);return!t&&e instanceof p.Pair?e.key instanceof p.Scalar?e.key.value:e.key:e}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);var r=p.findPair(this.items,e);r&&!t?this.items.splice(this.items.indexOf(r),1):!r&&t&&this.items.push(new p.Pair(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,r){if(!e)return JSON.stringify(this);if(this.hasAllNullValues())return super.toString(e,t,r);throw new Error("Set items must all have null values")}}u._defineProperty(h,"tag","tag:yaml.org,2002:set");var n={identify:e=>e instanceof Set,nodeClass:h,default:!1,tag:"tag:yaml.org,2002:set",resolve:function(e,t){if((e=p.resolveMap(e,t)).hasAllNullValues())return Object.assign(new h,e);throw new u.YAMLSemanticError(t,"Set items must all have null values")},createNode:function(e,t,r){var n=new h;for(const s of t)n.items.push(e.createPair(s,null,r));return n}};const m=(e,t)=>{t=t.split(":").reduce((e,t)=>60*e+Number(t),0);return"-"===e?-t:t};var s=({value:e})=>{if(isNaN(e)||!isFinite(e))return p.stringifyNumber(e);let t="";e<0&&(t="-",e=Math.abs(e));var r=[e%60];return e<60?r.unshift(0):(e=Math.round((e-r[0])/60),r.unshift(e%60),60<=e&&(e=Math.round((e-r[0])/60),r.unshift(e))),t+r.map(e=>e<10?"0"+String(e):String(e)).join(":").replace(/000000\d*$/,"")},o={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,resolve:(e,t,r)=>m(t,r.replace(/_/g,"")),stringify:s},s={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,resolve:(e,t,r)=>m(t,r.replace(/_/g,"")),stringify:s},i={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),resolve:(e,t,r,n,s,o,i,a,c)=>{a=a&&(a+"00").substr(1,3);let l=Date.UTC(t,r-1,n,s||0,o||0,i||0,a||0);if(c&&"Z"!==c){let e=m(c[0],c.slice(1));Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e.toISOString().replace(/((T00:00)?:00)?\.000Z$/,"")};const g={};function a(e,r){var n=p.resolveSeq(e,r);for(let t=0;t<n.items.length;++t){let e=n.items[t];if(!(e instanceof p.Pair)){if(e instanceof p.YAMLMap){if(1<e.items.length)throw new u.YAMLSemanticError(r,"Each pair must have its own sequence indicator");var s=e.items[0]||new p.Pair;e.commentBefore&&(s.commentBefore=s.commentBefore?e.commentBefore+`
`+s.commentBefore:e.commentBefore),e.comment&&(s.comment=s.comment?e.comment+`
`+s.comment:e.comment),e=s}n.items[t]=e instanceof p.Pair?e:new p.Pair(e)}}return n}function c(r,e,n){var s=new p.YAMLSeq(r);s.tag="tag:yaml.org,2002:pairs";for(const i of e){let e,t;if(Array.isArray(i)){if(2!==i.length)throw new TypeError("Expected [key, value] tuple: "+i);e=i[0],t=i[1]}else if(i&&i instanceof Object){var o=Object.keys(i);if(1!==o.length)throw new TypeError("Expected { key: value } tuple: "+i);e=o[0],t=i[e]}else e=i;o=r.createPair(e,t,n);s.items.push(o)}return s}function l(e){var t=void 0!==K&&K.env||{};return e?"undefined"!=typeof YAML_SILENCE_DEPRECATION_WARNINGS?!YAML_SILENCE_DEPRECATION_WARNINGS:!t.YAML_SILENCE_DEPRECATION_WARNINGS:"undefined"!=typeof YAML_SILENCE_WARNINGS?!YAML_SILENCE_WARNINGS:!t.YAML_SILENCE_WARNINGS}function f(e,t){var r;l(!1)&&((r=void 0!==K&&K.emitWarning)?r(e,t):console.warn(t?t+": "+e:e))}b.binary=e,b.floatTime=s,b.intTime=o,b.omap=r,b.pairs=t,b.set=n,b.timestamp=i,b.warn=f,b.warnFileDeprecation=function(e){l(!0)&&f(`The endpoint 'yaml/${e.replace(/.*yaml[/\\]/i,"").replace(/\.js$/,"").replace(/\\/g,"/")}' will be removed in a future release.`,"DeprecationWarning")},b.warnOptionDeprecation=function(e,t){!g[e]&&l(!0)&&(g[e]=!0,e=`The option '${e}' will be removed in a future release`,f(e+=t?`, use '${t}' instead.`:".","DeprecationWarning"))}}return b}function ir(){if(!Xt){Xt=1;var e=Wt(),l=Qt(),o=or();const b={createNode:function(e,t,r){var n=new l.YAMLMap(e);if(t instanceof Map)for(var[s,o]of t)n.items.push(e.createPair(s,o,r));else if(t&&"object"==typeof t)for(const i of Object.keys(t))n.items.push(e.createPair(i,t[i],r));return"function"==typeof e.sortMapEntries&&n.items.sort(e.sortMapEntries),n},default:!0,nodeClass:l.YAMLMap,tag:"tag:yaml.org,2002:map",resolve:l.resolveMap},w={createNode:function(e,t,r){var n=new l.YAMLSeq(e);if(t&&t[Symbol.iterator])for(const o of t){var s=e.createNode(o,r.wrapScalars,null,r);n.items.push(s)}return n},default:!0,nodeClass:l.YAMLSeq,tag:"tag:yaml.org,2002:seq",resolve:l.resolveSeq};var t={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:l.resolveString,stringify(e,t,r,n){return t=Object.assign({actualString:!0},t),l.stringifyString(e,t,r,n)},options:l.strOptions},t=[b,w,t];const _=e=>"bigint"==typeof e||Number.isInteger(e),$=(e,t,r)=>l.intOptions.asBigInt?BigInt(e):parseInt(t,r);var r={identify:e=>null==e,createNode:(e,t,r)=>r.wrapScalars?new l.Scalar(null):null,default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>null,options:l.nullOptions,stringify:()=>l.nullOptions.nullStr},n={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>"t"===e[0]||"T"===e[0],options:l.boolOptions,stringify:({value:e})=>e?l.boolOptions.trueStr:l.boolOptions.falseStr},s={identify:e=>_(e)&&0<=e,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o([0-7]+)$/,resolve:(e,t)=>$(e,t,8),options:l.intOptions,stringify:e=>m(e,8,"0o")},i={identify:_,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:e=>$(e,e,10),options:l.intOptions,stringify:l.stringifyNumber},a={identify:e=>_(e)&&0<=e,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x([0-9a-fA-F]+)$/,resolve:(e,t)=>$(e,t,16),options:l.intOptions,stringify:e=>m(e,16,"0x")},c={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.inf|(\.nan))$/i,resolve:(e,t)=>t?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:l.stringifyNumber},u={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify:({value:e})=>Number(e).toExponential()},p={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,resolve(e,t,r){t=t||r,r=new l.Scalar(parseFloat(e));return t&&"0"===t[t.length-1]&&(r.minFractionDigits=t.length),r},stringify:l.stringifyNumber},f=t.concat([r,n,s,i,a,c,u,p]);const E=e=>"bigint"==typeof e||Number.isInteger(e);var d=({value:e})=>JSON.stringify(e),d=[b,w,{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:l.resolveString,stringify:d},{identify:e=>null==e,createNode:(e,t,r)=>r.wrapScalars?new l.Scalar(null):null,default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:d},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true|false$/,resolve:e=>"true"===e,stringify:d},{identify:E,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:e=>l.intOptions.asBigInt?BigInt(e):parseInt(e,10),stringify:({value:e})=>E(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:d}],h=(d.scalarFallback=e=>{throw new SyntaxError("Unresolved plain scalar "+JSON.stringify(e))},({value:e})=>e?l.boolOptions.trueStr:l.boolOptions.falseStr);const S=e=>"bigint"==typeof e||Number.isInteger(e);h=t.concat([{identify:e=>null==e,createNode:(e,t,r)=>r.wrapScalars?new l.Scalar(null):null,default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>null,options:l.nullOptions,stringify:()=>l.nullOptions.nullStr},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>!0,options:l.boolOptions,stringify:h},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,resolve:()=>!1,options:l.boolOptions,stringify:h},{identify:S,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^([-+]?)0b([0-1_]+)$/,resolve:(e,t,r)=>g(t,r,2),stringify:e=>y(e,2,"0b")},{identify:S,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^([-+]?)0([0-7_]+)$/,resolve:(e,t,r)=>g(t,r,8),stringify:e=>y(e,8,"0")},{identify:S,default:!0,tag:"tag:yaml.org,2002:int",test:/^([-+]?)([0-9][0-9_]*)$/,resolve:(e,t,r)=>g(t,r,10),stringify:l.stringifyNumber},{identify:S,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^([-+]?)0x([0-9a-fA-F_]+)$/,resolve:(e,t,r)=>g(t,r,16),stringify:e=>y(e,16,"0x")},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.inf|(\.nan))$/i,resolve:(e,t)=>t?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:l.stringifyNumber},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify:({value:e})=>Number(e).toExponential()},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,resolve(e,t){e=new l.Scalar(parseFloat(e.replace(/_/g,"")));return t&&"0"===(t=t.replace(/_/g,""))[t.length-1]&&(e.minFractionDigits=t.length),e},stringify:l.stringifyNumber}],o.binary,o.omap,o.pairs,o.set,o.intTime,o.floatTime,o.timestamp);const O={core:f,failsafe:t,json:d,yaml11:h},P={binary:o.binary,bool:n,float:p,floatExp:u,floatNaN:c,floatTime:o.floatTime,int:i,intHex:a,intOct:s,intTime:o.intTime,map:b,null:r,omap:o.omap,pairs:o.pairs,seq:w,set:o.set,timestamp:o.timestamp},k=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class A{constructor({customTags:e,merge:t,schema:r,sortMapEntries:n,tags:s}){this.merge=!!t,this.name=r,this.sortMapEntries=!0===n?k:n||null,!e&&s&&o.warnOptionDeprecation("tags","customTags"),this.tags=function(e,t,r,n){let s=e[n.replace(/\W/g,"")];if(!s)throw e=Object.keys(e).map(e=>JSON.stringify(e)).join(", "),new Error(`Unknown schema "${n}"; use one of `+e);if(Array.isArray(r))for(const c of r)s=s.concat(c);else"function"==typeof r&&(s=r(s.slice()));for(let e=0;e<s.length;++e){var o=s[e];if("string"==typeof o){var i,a=t[o];if(!a)throw i=Object.keys(t).map(e=>JSON.stringify(e)).join(", "),new Error(`Unknown custom tag "${o}"; use one of `+i);s[e]=a}}return s}(O,P,e||s,r)}createNode(e,t,r,n){t={defaultPrefix:A.defaultPrefix,schema:this,wrapScalars:t};return v(e,r,n?Object.assign(n,t):t)}createPair(e,t,r){e=this.createNode(e,(r=r||{wrapScalars:!0}).wrapScalars,null,r),t=this.createNode(t,r.wrapScalars,null,r);return new l.Pair(e,t)}}function m(e,t,r){var n=e["value"];return _(n)&&0<=n?r+n.toString(t):l.stringifyNumber(e)}function g(e,t,r){let n=t.replace(/_/g,"");if(l.intOptions.asBigInt){switch(r){case 2:n="0b"+n;break;case 8:n="0o"+n;break;case 16:n="0x"+n}const s=BigInt(n);return"-"===e?BigInt(-1)*s:s}const s=parseInt(n,r);return"-"===e?-1*s:s}function y(e,t,r){var n=e["value"];return S(n)?(t=n.toString(t),n<0?"-"+r+t.substr(1):r+t):l.stringifyNumber(e)}function v(e,t,r){if(e instanceof l.Node)return e;var{defaultPrefix:n,onTagObj:s,prevObjects:o,schema:i,wrapScalars:a}=r;let c=function(t,r,e){if(r){var n=e.filter(e=>e.tag===r),n=n.find(e=>!e.format)||n[0];if(n)return n;throw new Error(`Tag ${r} not found`)}return e.find(e=>(e.identify&&e.identify(t)||e.class&&t instanceof e.class)&&!e.format)}(e,t=t&&t.startsWith("!!")?n+t.slice(2):t,i.tags);if(!c){if(!(e="function"==typeof e.toJSON?e.toJSON():e)||"object"!=typeof e)return a?new l.Scalar(e):e;c=!(e instanceof Map)&&e[Symbol.iterator]?w:b}s&&(s(c),delete r.onTagObj);n={value:void 0,node:void 0};if(e&&"object"==typeof e&&o){i=o.get(e);if(i)return s=new l.Alias(i),r.aliasNodes.push(s),s;n.value=e,o.set(e,n)}return n.node=c.createNode?c.createNode(r.schema,e,r):a?new l.Scalar(e):e,t&&n.node instanceof l.Node&&(n.node.tag=t),n.node}e._defineProperty(A,"defaultPrefix",e.defaultTagPrefix),e._defineProperty(A,"defaultTags",e.defaultTags),sr.Schema=A}return sr}function ar(){if(!er){er=1;var f=Wt(),h=Qt(),r=ir(),e={get binary(){return h.binaryOptions},set binary(e){Object.assign(h.binaryOptions,e)},get bool(){return h.boolOptions},set bool(e){Object.assign(h.boolOptions,e)},get int(){return h.intOptions},set int(e){Object.assign(h.intOptions,e)},get null(){return h.nullOptions},set null(e){Object.assign(h.nullOptions,e)},get str(){return h.strOptions},set str(e){Object.assign(h.strOptions,e)}};const c={"1.0":{schema:"yaml-1.1",merge:!0,tagPrefixes:[{handle:"!",prefix:f.defaultTagPrefix},{handle:"!!",prefix:"tag:private.yaml.org,2002:"}]},1.1:{schema:"yaml-1.1",merge:!0,tagPrefixes:[{handle:"!",prefix:"!"},{handle:"!!",prefix:f.defaultTagPrefix}]},1.2:{schema:"core",merge:!1,tagPrefixes:[{handle:"!",prefix:"!"},{handle:"!!",prefix:f.defaultTagPrefix}]}};class s{static validAnchorNode(e){return e instanceof h.Scalar||e instanceof h.YAMLSeq||e instanceof h.YAMLMap}constructor(e){f._defineProperty(this,"map",Object.create(null)),this.prefix=e}createAlias(e,t){return this.setAnchor(e,t),new h.Alias(e)}createMergePair(...e){var t=new h.Merge;return t.value.items=e.map(e=>{if(e instanceof h.Alias){if(e.source instanceof h.YAMLMap)return e}else if(e instanceof h.YAMLMap)return this.createAlias(e);throw new Error("Merge sources must be Map nodes or their Aliases")}),t}getName(t){const r=this["map"];return Object.keys(r).find(e=>r[e]===t)}getNames(){return Object.keys(this.map)}getNode(e){return this.map[e]}newName(t){t=t||this.prefix;var r=Object.keys(this.map);for(let e=1;;++e){1;{var n=""+t+e;if(!r.includes(n))return n}}}resolveNodes(){const{map:t,_cstAliases:e}=this;Object.keys(t).forEach(e=>{t[e]=t[e].resolved}),e.forEach(e=>{e.source=e.source.resolved}),delete this._cstAliases}setAnchor(t,e){if(null!=t&&!s.validAnchorNode(t))throw new Error("Anchors may only be set for Scalar, Seq and Map nodes");if(e&&/[\x00-\x19\s,[\]{}]/.test(e))throw new Error("Anchor names must not contain whitespace or control characters");const r=this["map"];var n=t&&Object.keys(r).find(e=>r[e]===t);if(n){if(!e)return n;n!==e&&(delete r[n],r[e]=t)}else{if(!e){if(!t)return null;e=this.newName()}r[e]=t}return e}}const o=(e,t)=>{var r;return e&&"object"==typeof e&&(r=e["tag"],e instanceof h.Collection?(r&&(t[r]=!0),e.items.forEach(e=>o(e,t))):e instanceof h.Pair?(o(e.key,t),o(e.value,t)):e instanceof h.Scalar&&r&&(t[r]=!0)),t};class t{constructor(e){this.anchors=new s(e.anchorPrefix),this.commentBefore=null,this.comment=null,this.contents=null,this.directivesEndMarker=null,this.errors=[],this.options=e,this.schema=null,this.tagPrefixes=[],this.version=null,this.warnings=[]}add(e){return n(this.contents),this.contents.add(e)}addIn(e,t){n(this.contents),this.contents.addIn(e,t)}delete(e){return n(this.contents),this.contents.delete(e)}deleteIn(e){return h.isEmptyPath(e)?null!=this.contents&&!(this.contents=null):(n(this.contents),this.contents.deleteIn(e))}getDefaults(){return t.defaults[this.version]||t.defaults[this.options.version]||{}}get(e,t){return this.contents instanceof h.Collection?this.contents.get(e,t):void 0}getIn(e,t){return h.isEmptyPath(e)?!t&&this.contents instanceof h.Scalar?this.contents.value:this.contents:this.contents instanceof h.Collection?this.contents.getIn(e,t):void 0}has(e){return this.contents instanceof h.Collection&&this.contents.has(e)}hasIn(e){return h.isEmptyPath(e)?void 0!==this.contents:this.contents instanceof h.Collection&&this.contents.hasIn(e)}set(e,t){n(this.contents),this.contents.set(e,t)}setIn(e,t){h.isEmptyPath(e)?this.contents=t:(n(this.contents),this.contents.setIn(e,t))}setSchema(e,t){!e&&!t&&this.schema||("1.0"===(e="number"==typeof e?e.toFixed(1):e)||"1.1"===e||"1.2"===e?(this.version?this.version=e:this.options.version=e,delete this.options.schema):e&&"string"==typeof e&&(this.options.schema=e),Array.isArray(t)&&(this.options.customTags=t),e=Object.assign({},this.getDefaults(),this.options),this.schema=new r.Schema(e))}parse(r,n){this.options.keepCstNodes&&(this.cstNode=r),this.options.keepNodeTypes&&(this.type="DOCUMENT");const{directives:e=[],contents:s=[],directivesEndMarker:t,error:o,valueRange:i}=r;o&&(o.source||(o.source=this),this.errors.push(o)),d(this,e,n),t&&(this.directivesEndMarker=!0),this.range=i?[i.start,i.end]:null,this.setSchema(),this.anchors._cstAliases=[];{var a=this,c={before:[],after:[]};let e=void 0,t=!1;for(const u of r=s)if(u.valueRange){if(void 0!==e){a.errors.push(new f.YAMLSyntaxError(u,"Document contains trailing content not separated by a ... or --- line"));break}var l=h.resolveNode(a,u);t&&(l.spaceBefore=!0,t=!1),e=l}else null!==u.comment?(void 0===e?c.before:c.after).push(u.comment):u.type===f.Type.BLANK_LINE&&(t=!0,void 0===e)&&0<c.before.length&&!a.commentBefore&&(a.commentBefore=c.before.join("\n"),c.before=[]);a.contents=e||null,e?((r=c.before.join("\n"))&&((n=e instanceof h.Collection&&e.items[0]?e.items[0]:e).commentBefore=n.commentBefore?r+`
`+n.commentBefore:r),a.comment=c.after.join("\n")||null):a.comment=c.before.concat(c.after).join("\n")||null}if(this.anchors.resolveNodes(),this.options.prettyErrors){for(const o of this.errors)o instanceof f.YAMLError&&o.makePretty();for(const p of this.warnings)p instanceof f.YAMLError&&p.makePretty()}return this}listNonDefaultTags(){return e=this.contents,Object.keys(o(e,{})).filter(e=>0!==e.indexOf(r.Schema.defaultPrefix));var e}setTagPrefix(t,e){if("!"!==t[0]||"!"!==t[t.length-1])throw new Error("Handle must start and end with !");var r;e?(r=this.tagPrefixes.find(e=>e.handle===t))?r.prefix=e:this.tagPrefixes.push({handle:t,prefix:e}):this.tagPrefixes=this.tagPrefixes.filter(e=>e.handle!==t)}toJSON(e,t){var{keepBlobsInJSON:r,mapAsMap:n,maxAliasCount:s}=this.options,r=r&&("string"!=typeof e||!(this.contents instanceof h.Scalar)),r={doc:this,indentStep:"  ",keep:r,mapAsMap:r&&!!n,maxAliasCount:s,stringify:a},n=Object.keys(this.anchors.map);0<n.length&&(r.anchors=new Map(n.map(e=>[this.anchors.map[e],{alias:[],aliasCount:0,count:1}])));const o=h.toJSON(this.contents,e,r);if("function"==typeof t&&r.anchors)for(const{count:i,res:o}of r.anchors.values())t(o,i);return o}toString(){if(0<this.errors.length)throw new Error("Document with errors cannot be stringified");var e=this.options.indent;if(!Number.isInteger(e)||e<=0)throw t=JSON.stringify(e),new Error('"indent" option must be a positive integer, not '+t);this.setSchema();const r=[];let n=!1;if(this.version){let e="%YAML 1.2";"yaml-1.1"===this.schema.name&&("1.0"===this.version?e="%YAML:1.0":"1.1"===this.version&&(e="%YAML 1.1")),r.push(e),n=!0}const s=this.listNonDefaultTags();this.tagPrefixes.forEach(({handle:e,prefix:t})=>{s.some(e=>0===e.indexOf(t))&&(r.push(`%TAG ${e} `+t),n=!0)}),(n||this.directivesEndMarker)&&r.push("---"),this.commentBefore&&(!n&&this.directivesEndMarker||r.unshift(""),r.unshift(this.commentBefore.replace(/^/gm,"#")));var t={anchors:Object.create(null),doc:this,indent:"",indentStep:" ".repeat(e),stringify:a};let o=!1,i=null;return this.contents?(this.contents instanceof h.Node&&(this.contents.spaceBefore&&(n||this.directivesEndMarker)&&r.push(""),this.contents.commentBefore&&r.push(this.contents.commentBefore.replace(/^/gm,"#")),t.forceBlockIndent=!!this.comment,i=this.contents.comment),e=i?null:()=>o=!0,e=a(this.contents,t,()=>i=null,e),r.push(h.addComment(e,"",i))):void 0!==this.contents&&r.push(a(this.contents,t)),this.comment&&(o&&!i||""===r[r.length-1]||r.push(""),r.push(this.comment.replace(/^/gm,"#"))),r.join("\n")+"\n"}}function m(e,t){var r;if("1.0"===(e.version||e.options.version))return(r=t.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/))?"!"+r[1]:(r=t.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/))?`!${r[1]}/`+r[2]:"!"+t.replace(/^tag:/,"");let n=e.tagPrefixes.find(e=>0===t.indexOf(e.prefix));return n||(r=e.getDefaults().tagPrefixes,n=r&&r.find(e=>0===t.indexOf(e.prefix))),n?(e=t.substr(n.prefix.length).replace(/[!,[\]{}]/g,e=>({"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"})[e]),n.handle+e):"!"===t[0]?t:`!<${t}>`}function a(e,t,r,n){var{anchors:s,schema:o}=t.doc;let i;if(!(e instanceof h.Node)){var a,c={aliasNodes:[],onTagObj:e=>i=e,prevObjects:new Map};e=o.createNode(e,!0,null,c);for(const d of c.aliasNodes)d.source=d.source.node,s.getName(d.source)||(a=s.newName(),s.map[a]=d.source)}if(e instanceof h.Pair)return e.toString(t,r,n);i=i||function(e,t){if(t instanceof h.Alias)return h.Alias;if(t.tag){var r=e.filter(e=>e.tag===t.tag);if(0<r.length)return r.find(e=>e.format===t.format)||r[0]}let n,s;if(n=t instanceof h.Scalar?(s=t.value,(r=e.filter(e=>e.identify&&e.identify(s)||e.class&&s instanceof e.class)).find(e=>e.format===t.format)||r.find(e=>!e.format)):(s=t,e.find(e=>e.nodeClass&&s instanceof e.nodeClass)))return n;throw r=s&&s.constructor?s.constructor.name:typeof s,new Error(`Tag not resolved for ${r} value`)}(o.tags,e);[c,o,{anchors:p,doc:l}]=[e,i,t],u=[],(f=l.anchors.getName(c))&&(p[f]=c,u.push("&"+f)),c.tag?u.push(m(l,c.tag)):o.default||u.push(m(l,o.tag));var l,u,p=u.join(" "),f=(0<p.length&&(t.indentAtStart=(t.indentAtStart||0)+p.length+1),"function"==typeof i.stringify?i.stringify(e,t,r,n):e instanceof h.Scalar?h.stringifyString(e,t,r,n):e.toString(t,r,n));return p?e instanceof h.Scalar||"{"===f[0]||"["===f[0]?p+" "+f:p+`
`+t.indent+f:f}function d(t,e,r){var n=[];let s=!1;for(const a of e){var{comment:o,name:i}=a;switch(i){case"TAG":try{t.tagPrefixes.push(function({tagPrefixes:e},t){const[r,n]=t.parameters;if(!r||!n)throw new f.YAMLSemanticError(t,"Insufficient parameters given for %TAG directive");if(e.some(e=>e.handle===r))throw new f.YAMLSemanticError(t,"The %TAG directive must only be given at most once per handle in the same document.");return{handle:r,prefix:n}}(t,a))}catch(e){t.errors.push(e)}s=!0;break;case"YAML":case"YAML:1.0":t.version&&t.errors.push(new f.YAMLSemanticError(a,"The %YAML directive must only be given at most once per document."));try{t.version=function(e,t){let[r]=t.parameters;var n;if(r="YAML:1.0"===t.name?"1.0":r)return c[r]||(n=`Document will be parsed as YAML ${e.version||e.options.version} rather than YAML `+r,e.warnings.push(new f.YAMLWarning(t,n))),r;throw new f.YAMLSemanticError(t,"Insufficient parameters given for %YAML directive")}(t,a)}catch(e){t.errors.push(e)}s=!0;break;default:i&&t.warnings.push(new f.YAMLWarning(a,"YAML only supports %TAG and %YAML directives, and not %"+i))}o&&n.push(o)}r&&!s&&"1.1"===(t.version||r.version||t.options.version)&&(t.tagPrefixes=r.tagPrefixes.map(({handle:e,prefix:t})=>({handle:e,prefix:t})),t.version=r.version),t.commentBefore=n.join("\n")||null}function n(e){if(!(e instanceof h.Collection))throw new Error("Expected a YAML collection as document contents")}f._defineProperty(t,"defaults",c),Ht.Document=t,Ht.defaultOptions={anchorPrefix:"a",customTags:null,indent:2,indentSeq:!0,keepCstNodes:!1,keepNodeTypes:!0,keepBlobsInJSON:!0,mapAsMap:!1,maxAliasCount:100,prettyErrors:!1,simpleKeys:!1,version:"1.2"},Ht.scalarOptions=e}return Ht}function cr(){if(!tr){tr=1;var i=Jt(),s=ar(),o=ir(),r=Wt(),n=or();Qt();class c extends s.Document{constructor(e){super(Object.assign({},s.defaultOptions,e))}}var e={createNode:function(e,t=!0,r){void 0===r&&"string"==typeof t&&(r=t,t=!0);var n=Object.assign({},s.Document.defaults[s.defaultOptions.version],s.defaultOptions);return new o.Schema(n).createNode(e,t,r)},defaultOptions:s.defaultOptions,Document:c,parse:function(e,t){if((e=a(e,t)).warnings.forEach(e=>n.warn(e)),0<e.errors.length)throw e.errors[0];return e.toJSON()},parseAllDocuments:function(e,t){var r=[];let n;for(const o of i.parse(e)){var s=new c(t);s.parse(o,n),r.push(s),n=s}return r},parseCST:i.parse,parseDocument:a,scalarOptions:s.scalarOptions,stringify:function(e,t){return(t=new c(t)).contents=e,String(t)}};function a(e,t){e=i.parse(e),t=new c(t).parse(e[0]);return 1<e.length&&t.errors.unshift(new r.YAMLSemanticError(e[1],"Source contains multiple documents; please use YAML.parseAllDocuments()")),t}qt.YAML=e}return qt}function lr(){return nr||(nr=1,rr=cr().YAML),rr}var ur,pr={exports:{}},fr={},_={},dr={},hr={},mr={},gr={};function yr(){if(!ur){ur=1;{var t=gr;Object.defineProperty(t,"__esModule",{value:!0}),t.regexpCode=t.getEsmExportName=t.getProperty=t.safeStringify=t.stringify=t.strConcat=t.addCodeArg=t.str=t._=t.nil=t._Code=t.Name=t.IDENTIFIER=t._CodeOrName=void 0;class e{}t._CodeOrName=e,t.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class c extends e{constructor(e){if(super(),!t.IDENTIFIER.test(e))throw new Error("CodeGen: name must be a valid identifier");this.str=e}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}t.Name=c;class l extends e{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){var e;return!(1<this._items.length||""!==(e=this._items[0])&&'""'!==e)}get str(){var e;return null!=(e=this._str)?e:this._str=this._items.reduce((e,t)=>""+e+t,"")}get names(){var e;return null!=(e=this._names)?e:this._names=this._items.reduce((e,t)=>(t instanceof c&&(e[t.str]=(e[t.str]||0)+1),e),{})}}function r(e,...t){var r=[e[0]];let n=0;for(;n<t.length;)i(r,t[n]),r.push(e[++n]);return new l(r)}t._Code=l,t.nil=new l(""),t._=r;const u=new l("+");function n(e,...t){var r=[a(e[0])];let n=0;for(;n<t.length;)r.push(u),i(r,t[n]),r.push(u,a(e[++n]));{var s=r;let e=1;for(;e<s.length-1;){if(s[e]===u){var o=function(e,t){return'""'===t?e:'""'===e?t:"string"!=typeof e?"string"!=typeof t||'"'!==t[0]||e instanceof c?void 0:'"'+e+t.slice(1):t instanceof c||'"'!==e[e.length-1]?void 0:"string"!=typeof t?""+e.slice(0,-1)+t+'"':'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}(s[e-1],s[e+1]);if(void 0!==o){s.splice(e-1,3,o);continue}s[e++]="+"}e++}}return new l(r)}function i(e,t){t instanceof l?e.push(...t._items):t instanceof c?e.push(t):e.push("number"==typeof(e=t)||"boolean"==typeof e||null===e?e:a(Array.isArray(e)?e.join(","):e))}function a(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}t.str=n,t.addCodeArg=i,t.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:n`${e}${t}`},t.stringify=function(e){return new l(a(e))},t.safeStringify=a,t.getProperty=function(e){return"string"==typeof e&&t.IDENTIFIER.test(e)?new l("."+e):r`[${e}]`},t.getEsmExportName=function(e){if("string"==typeof e&&t.IDENTIFIER.test(e))return new l(""+e);throw new Error(`CodeGen: invalid export name: ${e}, use explicit $id name mapping`)},t.regexpCode=function(e){return new l(e.toString())}}}return gr}var vr,br,wr={};function _r(){if(!vr){vr=1;{var c=wr;Object.defineProperty(c,"__esModule",{value:!0}),c.ValueScope=c.ValueScopeName=c.Scope=c.varKinds=c.UsedValueState=void 0;const u=yr();class p extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var l,e;(e=l=c.UsedValueState||(c.UsedValueState={}))[e.Started=0]="Started",e[e.Completed=1]="Completed",c.varKinds={const:new u.Name("const"),let:new u.Name("let"),var:new u.Name("var")};class t{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof u.Name?e:this.name(e)}name(e){return new u.Name(this._newName(e))}_newName(e){return""+e+(this._names[e]||this._nameGroup(e)).index++}_nameGroup(e){var t;if(null!=(t=null==(t=this._parent)?void 0:t._prefixes)&&t.has(e)||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}c.Scope=t;class r extends u.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:t,itemIndex:r}){this.value=e,this.scopePath=(0,u._)`.${new u.Name(t)}[${r}]`}}c.ValueScopeName=r;const n=(0,u._)`\n`;c.ValueScope=class extends t{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?n:u.nil}}get(){return this._scope}name(e){return new r(e,this._newName(e))}value(e,t){if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");var e=this.toName(e),r=e["prefix"],n=null!=(n=t.key)?n:t.ref;let s=this._values[r];if(s){var o=s.get(n);if(o)return o}else s=this._values[r]=new Map;s.set(n,e);o=this._scope[r]||(this._scope[r]=[]),n=o.length;return o[n]=t.ref,e.setValue(t,{property:r,itemIndex:n}),e}getValue(e,t){e=this._values[e];if(e)return e.get(t)}scopeRefs(t,e=this._values){return this._reduceValues(e,e=>{if(void 0===e.scopePath)throw new Error(`CodeGen: name "${e}" has no value`);return(0,u._)`${t}${e.scopePath}`})}scopeCode(e=this._values,t,r){return this._reduceValues(e,e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code},t,r)}_reduceValues(e,n,t={},s){let o=u.nil;for(const i in e){var r=e[i];if(r){const a=t[i]=t[i]||new Map;r.forEach(e=>{if(!a.has(e)){a.set(e,l.Started);var t=n(e);if(t){var r=this.opts.es5?c.varKinds.var:c.varKinds.const;o=(0,u._)`${o}${r} ${e} = ${t};${this.opts._n}`}else{if(!(t=null==s?void 0:s(e)))throw new p(e);o=(0,u._)`${o}${t}${this.opts._n}`}a.set(e,l.Completed)}})}}return o}}}}return wr}function M(){if(!br){br=1;{var r=mr;Object.defineProperty(r,"__esModule",{value:!0}),r.or=r.and=r.not=r.CodeGen=r.operators=r.varKinds=r.ValueScopeName=r.ValueScope=r.Scope=r.Name=r.regexpCode=r.stringify=r.getProperty=r.nil=r.strConcat=r.str=r._=void 0;const l=yr(),u=_r();var e=yr(),t=(Object.defineProperty(r,"_",{enumerable:!0,get:function(){return e._}}),Object.defineProperty(r,"str",{enumerable:!0,get:function(){return e.str}}),Object.defineProperty(r,"strConcat",{enumerable:!0,get:function(){return e.strConcat}}),Object.defineProperty(r,"nil",{enumerable:!0,get:function(){return e.nil}}),Object.defineProperty(r,"getProperty",{enumerable:!0,get:function(){return e.getProperty}}),Object.defineProperty(r,"stringify",{enumerable:!0,get:function(){return e.stringify}}),Object.defineProperty(r,"regexpCode",{enumerable:!0,get:function(){return e.regexpCode}}),Object.defineProperty(r,"Name",{enumerable:!0,get:function(){return e.Name}}),_r());Object.defineProperty(r,"Scope",{enumerable:!0,get:function(){return t.Scope}}),Object.defineProperty(r,"ValueScope",{enumerable:!0,get:function(){return t.ValueScope}}),Object.defineProperty(r,"ValueScopeName",{enumerable:!0,get:function(){return t.ValueScopeName}}),Object.defineProperty(r,"varKinds",{enumerable:!0,get:function(){return t.varKinds}}),r.operators={GT:new l._Code(">"),GTE:new l._Code(">="),LT:new l._Code("<"),LTE:new l._Code("<="),EQ:new l._Code("==="),NEQ:new l._Code("!=="),NOT:new l._Code("!"),OR:new l._Code("||"),AND:new l._Code("&&"),ADD:new l._Code("+")};class p{optimizeNodes(){return this}optimizeNames(e,t){return this}}class f extends p{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){var e=e?u.varKinds.var:this.varKind,r=void 0===this.rhs?"":" = "+this.rhs;return`${e} ${this.name}${r};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=o(this.rhs,e,t)),this}get names(){return this.rhs instanceof l._CodeOrName?this.rhs.names:{}}}class d extends p{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,t){if(!(this.lhs instanceof l.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=o(this.rhs,e,t),this}get names(){return s(this.lhs instanceof l.Name?{}:{...this.lhs.names},this.rhs)}}class h extends d{constructor(e,t,r,n){super(e,r,n),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class m extends p{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return this.label+":"+e}}class g extends p{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?" "+this.label:""};`+e}}class y extends p{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class v extends p{constructor(e){super(),this.code=e}render({_n:e}){return this.code+";"+e}optimizeNodes(){return""+this.code?this:void 0}optimizeNames(e,t){return this.code=o(this.code,e,t),this}get names(){return this.code instanceof l._CodeOrName?this.code.names:{}}}class b extends p{constructor(e=[]){super(),this.nodes=e}render(r){return this.nodes.reduce((e,t)=>e+t.render(r),"")}optimizeNodes(){var e=this["nodes"];let t=e.length;for(;t--;){var r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return 0<e.length?this:void 0}optimizeNames(e,t){var r=this["nodes"];let n=r.length;for(;n--;){var s=r[n];if(!s.optimizeNames(e,t)){i=o=void 0;var o=e,i=s.names;for(const a in i)o[a]=(o[a]||0)-(i[a]||0);r.splice(n,1)}}return 0<r.length?this:void 0}get names(){return this.nodes.reduce((e,t)=>n(e,t.names),{})}}class w extends b{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class _ extends b{}class $ extends w{}$.kind="else";class E extends w{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();var e,t=this.condition;if(!0===t)return this.nodes;let r=this.else;return r&&(e=r.optimizeNodes(),r=this.else=Array.isArray(e)?new $(e):e),r?!1===t?r instanceof E?r:r.nodes:this.nodes.length?this:new E(i(t),r instanceof E?[r]:r.nodes):!1!==t&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null==(r=this.else)?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=o(this.condition,e,t),this}get names(){var e=super.names;return s(e,this.condition),this.else&&n(e,this.else.names),e}}E.kind="if";class S extends w{}S.kind="for";class O extends S{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=o(this.iteration,e,t),this}get names(){return n(super.names,this.iteration.names)}}class P extends S{constructor(e,t,r,n){super(),this.varKind=e,this.name=t,this.from=r,this.to=n}render(e){var{name:t,from:r,to:n}=this;return`for(${e.es5?u.varKinds.var:this.varKind} ${t}=${r}; ${t}<${n}; ${t}++)`+super.render(e)}get names(){var e=s(super.names,this.from);return s(e,this.to)}}class k extends S{constructor(e,t,r,n){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=n}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=o(this.iterable,e,t),this}get names(){return n(super.names,this.iterable.names)}}class A extends w{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return(this.async?"async ":"")+`function ${this.name}(${this.args})`+super.render(e)}}A.kind="func";class N extends b{render(e){return"return "+super.render(e)}}N.kind="return";class x extends w{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e;return super.optimizeNodes(),null!=(e=this.catch)&&e.optimizeNodes(),null!=(e=this.finally)&&e.optimizeNodes(),this}optimizeNames(e,t){var r;return super.optimizeNames(e,t),null!=(r=this.catch)&&r.optimizeNames(e,t),null!=(r=this.finally)&&r.optimizeNames(e,t),this}get names(){var e=super.names;return this.catch&&n(e,this.catch.names),this.finally&&n(e,this.finally.names),e}}class T extends w{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}T.kind="catch";class j extends w{render(e){return"finally"+super.render(e)}}j.kind="finally";function n(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function s(e,t){return t instanceof l._CodeOrName?n(e,t.names):e}function o(e,r,n){var t;return e instanceof l.Name?s(e):(t=e)instanceof l._Code&&t._items.some(e=>e instanceof l.Name&&1===r[e.str]&&void 0!==n[e.str])?new l._Code(e._items.reduce((e,t)=>((t=t instanceof l.Name?s(t):t)instanceof l._Code?e.push(...t._items):e.push(t),e),[])):e;function s(e){var t=n[e.str];return void 0===t||1!==r[e.str]?e:(delete r[e.str],t)}}function i(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:(0,l._)`!${c(e)}`}r.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new u.Scope({parent:e}),this._nodes=[new _]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){e=this._extScope.value(e,t);return(this._values[e.prefix]||(this._values[e.prefix]=new Set)).add(e),e}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,n){t=this._scope.toName(t);return void 0!==r&&n&&(this._constants[t.str]=r),this._leafNode(new f(e,t,r)),t}const(e,t,r){return this._def(u.varKinds.const,e,t,r)}let(e,t,r){return this._def(u.varKinds.let,e,t,r)}var(e,t,r){return this._def(u.varKinds.var,e,t,r)}assign(e,t,r){return this._leafNode(new d(e,t,r))}add(e,t){return this._leafNode(new h(e,r.operators.ADD,t))}code(e){return"function"==typeof e?e():e!==l.nil&&this._leafNode(new v(e)),this}object(...e){var t,r,n=["{"];for([t,r]of e)1<n.length&&n.push(","),n.push(t),t===r&&!this.opts.es5||(n.push(":"),(0,l.addCodeArg)(n,r));return n.push("}"),new l._Code(n)}if(e,t,r){if(this._blockNode(new E(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new E(e))}else(){return this._elseNode(new $)}endIf(){return this._endBlockNode(E,$)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new O(e),t)}forRange(e,t,r,n,s=this.opts.es5?u.varKinds.var:u.varKinds.let){const o=this._scope.toName(e);return this._for(new P(s,o,t,r),()=>n(o))}forOf(e,t,r,n=u.varKinds.const){const s=this._scope.toName(e);if(this.opts.es5){const o=t instanceof l.Name?t:this.var("_arr",t);return this.forRange("_i",0,(0,l._)`${o}.length`,e=>{this.var(s,(0,l._)`${o}[${e}]`),r(s)})}return this._for(new k("of",n,s,t),()=>r(s))}forIn(e,t,r,n=this.opts.es5?u.varKinds.var:u.varKinds.const){if(this.opts.ownProperties)return this.forOf(e,(0,l._)`Object.keys(${t})`,r);const s=this._scope.toName(e);return this._for(new k("in",n,s,t),()=>r(s))}endFor(){return this._endBlockNode(S)}label(e){return this._leafNode(new m(e))}break(e){return this._leafNode(new g(e))}return(e){var t=new N;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(N)}try(e,t,r){var n;if(t||r)return n=new x,this._blockNode(n),this.code(e),t&&(e=this.name("e"),this._currNode=n.catch=new T(e),t(e)),r&&(this._currNode=n.finally=new j,this.code(r)),this._endBlockNode(T,j);throw new Error('CodeGen: "try" without "catch" and "finally"')}throw(e){return this._leafNode(new y(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){var t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");var r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,t=l.nil,r,n){return this._blockNode(new A(e,t,r)),n&&this.code(n).endFunc(),this}endFunc(){return this._endBlockNode(A)}optimize(e=1){for(;0<e--;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){var r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?e.kind+"/"+t.kind:e.kind}"`)}_elseNode(e){var t=this._currNode;if(t instanceof E)return this._currNode=t.else=e,this;throw new Error('CodeGen: "else" without "if"')}get _root(){return this._nodes[0]}get _currNode(){var e=this._nodes;return e[e.length-1]}set _currNode(e){var t=this._nodes;t[t.length-1]=e}},r.not=i;const C=a(r.operators.AND);r.and=function(...e){return e.reduce(C)};const M=a(r.operators.OR);function a(r){return(e,t)=>e===l.nil?t:t===l.nil?e:(0,l._)`${c(e)} ${r} ${c(t)}`}function c(e){return e instanceof l.Name?e:(0,l._)`(${e})`}r.or=function(...e){return e.reduce(M)}}}return mr}var $r,Er={};function I(){if(!$r){$r=1;{var e=Er;Object.defineProperty(e,"__esModule",{value:!0}),e.checkStrictMode=e.getErrorPath=e.Type=e.useFunc=e.setEvaluated=e.evaluatedPropsToName=e.mergeEvaluated=e.eachItem=e.unescapeJsonPointer=e.escapeJsonPointer=e.escapeFragment=e.unescapeFragment=e.schemaRefOrVal=e.schemaHasRulesButRef=e.schemaHasRules=e.checkUnknownRules=e.alwaysValidSchema=e.toHash=void 0;const p=M(),f=yr();function r(e,t=e.schema){var{opts:r,self:n}=e;if(r.strictSchema&&"boolean"!=typeof t){var s=n.RULES.keywords;for(const o in t)s[o]||u(e,`unknown keyword: "${o}"`)}}function n(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function s(e){return"number"==typeof e?""+e:e.replace(/~/g,"~0").replace(/\//g,"~1")}function t(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function o({mergeNames:s,mergeToName:o,mergeValues:i,resultToName:a}){return(e,t,r,n)=>{t=void 0===r?t:r instanceof p.Name?((t instanceof p.Name?s:o)(e,t,r),r):t instanceof p.Name?(o(e,r,t),t):i(t,r);return n!==p.Name||t instanceof p.Name?t:a(e,t)}}function i(e,t){var r;return!0===t?e.var("props",!0):(r=e.var("props",(0,p._)`{}`),void 0!==t&&a(e,r,t),r)}function a(t,r,e){Object.keys(e).forEach(e=>t.assign((0,p._)`${r}${(0,p.getProperty)(e)}`,!0))}e.toHash=function(e){var t={};for(const r of e)t[r]=!0;return t},e.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(r(e,t),!n(t,e.self.RULES.all))},e.checkUnknownRules=r,e.schemaHasRules=n,e.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},e.schemaRefOrVal=function({topSchemaRef:e,schemaPath:t},r,n,s){if(!s){if("number"==typeof r||"boolean"==typeof r)return r;if("string"==typeof r)return(0,p._)`${r}`}return(0,p._)`${e}${t}${(0,p.getProperty)(n)}`},e.unescapeFragment=function(e){return t(decodeURIComponent(e))},e.escapeFragment=function(e){return encodeURIComponent(s(e))},e.escapeJsonPointer=s,e.unescapeJsonPointer=t,e.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},e.mergeEvaluated={props:o({mergeNames:(e,t,r)=>e.if((0,p._)`${r} !== true && ${t} !== undefined`,()=>{e.if((0,p._)`${t} === true`,()=>e.assign(r,!0),()=>e.assign(r,(0,p._)`${r} || {}`).code((0,p._)`Object.assign(${r}, ${t})`))}),mergeToName:(e,t,r)=>e.if((0,p._)`${r} !== true`,()=>{!0===t?e.assign(r,!0):(e.assign(r,(0,p._)`${r} || {}`),a(e,r,t))}),mergeValues:(e,t)=>!0===e||{...e,...t},resultToName:i}),items:o({mergeNames:(e,t,r)=>e.if((0,p._)`${r} !== true && ${t} !== undefined`,()=>e.assign(r,(0,p._)`${t} === true ? true : ${r} > ${t} ? ${r} : ${t}`)),mergeToName:(e,t,r)=>e.if((0,p._)`${r} !== true`,()=>e.assign(r,!0===t||(0,p._)`${r} > ${t} ? ${r} : ${t}`)),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},e.evaluatedPropsToName=i,e.setEvaluated=a;const d={};var c,l;function u(e,t,r=e.opts.strictSchema){if(r){if(t="strict mode: "+t,!0===r)throw new Error(t);e.self.logger.warn(t)}}e.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:d[t.code]||(d[t.code]=new f._Code(t.code))})},(l=c=e.Type||(e.Type={}))[l.Num=0]="Num",l[l.Str=1]="Str",e.getErrorPath=function(e,t,r){return e instanceof p.Name?(t=t===c.Num,r?t?(0,p._)`"[" + ${e} + "]"`:(0,p._)`"['" + ${e} + "']"`:t?(0,p._)`"/" + ${e}`:(0,p._)`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`):r?(0,p.getProperty)(e).toString():"/"+s(e)},e.checkStrictMode=u}}return Er}var Sr,Or,Pr,kr={};function $(){var e;return Sr||(Sr=1,Object.defineProperty(kr,"__esModule",{value:!0}),e={data:new(e=M()).Name("data"),valCxt:new e.Name("valCxt"),instancePath:new e.Name("instancePath"),parentData:new e.Name("parentData"),parentDataProperty:new e.Name("parentDataProperty"),rootData:new e.Name("rootData"),dynamicAnchors:new e.Name("dynamicAnchors"),vErrors:new e.Name("vErrors"),errors:new e.Name("errors"),this:new e.Name("this"),self:new e.Name("self"),scope:new e.Name("scope"),json:new e.Name("json"),jsonPos:new e.Name("jsonPos"),jsonLen:new e.Name("jsonLen"),jsonPart:new e.Name("jsonPart")},kr.default=e),kr}function Ar(){if(!Or){Or=1;{var c=hr;Object.defineProperty(c,"__esModule",{value:!0}),c.extendErrors=c.resetErrorsCount=c.reportExtraError=c.reportError=c.keyword$DataError=c.keywordError=void 0;const d=M(),h=I(),m=$();function l(e,t){const r=e.const("err",t);e.if((0,d._)`${m.default.vErrors} === null`,()=>e.assign(m.default.vErrors,(0,d._)`[${r}]`),(0,d._)`${m.default.vErrors}.push(${r})`),e.code((0,d._)`${m.default.errors}++`)}function u(e,t){var{gen:r,validateName:n,schemaEnv:s}=e;s.$async?r.throw((0,d._)`new ${e.ValidationError}(${t})`):(r.assign((0,d._)`${n}.errors`,t),r.return(!1))}c.keywordError={message:({keyword:e})=>(0,d.str)`must pass "${e}" keyword validation`},c.keyword$DataError={message:({keyword:e,schemaType:t})=>t?(0,d.str)`"${e}" keyword must be ${t} ($data)`:(0,d.str)`"${e}" keyword is invalid ($data)`},c.reportError=function(e,t=c.keywordError,r,n){var s=e["it"],{gen:o,compositeRule:i,allErrors:a}=s,e=p(e,t,r);(null!=n?n:i||a)?l(o,e):u(s,(0,d._)`[${e}]`)},c.reportExtraError=function(e,t=c.keywordError,r){var n=e["it"],{gen:s,compositeRule:o,allErrors:i}=n;l(s,p(e,t,r)),o||i||u(n,m.default.vErrors)},c.resetErrorsCount=function(e,t){e.assign(m.default.errors,t),e.if((0,d._)`${m.default.vErrors} !== null`,()=>e.if(t,()=>e.assign((0,d._)`${m.default.vErrors}.length`,t),()=>e.assign(m.default.vErrors,null)))},c.extendErrors=function({gen:t,keyword:r,schemaValue:n,data:s,errsCount:e,it:o}){if(void 0===e)throw new Error("ajv implementation error");const i=t.name("err");t.forRange("i",e,m.default.errors,e=>{t.const(i,(0,d._)`${m.default.vErrors}[${e}]`),t.if((0,d._)`${i}.instancePath === undefined`,()=>t.assign((0,d._)`${i}.instancePath`,(0,d.strConcat)(m.default.instancePath,o.errorPath))),t.assign((0,d._)`${i}.schemaPath`,(0,d.str)`${o.errSchemaPath}/${r}`),o.opts.verbose&&(t.assign((0,d._)`${i}.schema`,n),t.assign((0,d._)`${i}.data`,s))})};const g={keyword:new d.Name("keyword"),schemaPath:new d.Name("schemaPath"),params:new d.Name("params"),propertyName:new d.Name("propertyName"),message:new d.Name("message"),schema:new d.Name("schema"),parentSchema:new d.Name("parentSchema")};function p(e,t,r){var n,s,o,i,a,c,l,u,p,f=e.it["createErrors"];return!1===f?(0,d._)`{}`:([f,e,t={}]=[e,t,r],{gen:r,it:n}=f,n=[function({errorPath:e},{instancePath:t}){t=t?(0,d.str)`${e}${(0,h.getErrorPath)(t,h.Type.Str)}`:e;return[m.default.instancePath,(0,d.strConcat)(m.default.instancePath,t)]}(n,t),function({keyword:e,it:{errSchemaPath:t}},{schemaPath:r,parentSchema:n}){let s=n?t:(0,d.str)`${t}/${e}`;r&&(s=(0,d.str)`${s}${(0,h.getErrorPath)(r,h.Type.Str)}`);return[g.schemaPath,s]}(f,t)],[t,{params:f,message:e},s]=[f,e,n],{keyword:o,data:i,schemaValue:a,it:c}=t,{opts:c,propertyName:l,topSchemaRef:u,schemaPath:p}=c,s.push([g.keyword,o],[g.params,"function"==typeof f?f(t):f||(0,d._)`{}`]),c.messages&&s.push([g.message,"function"==typeof e?e(t):e]),c.verbose&&s.push([g.schema,a],[g.parentSchema,(0,d._)`${u}${p}`],[m.default.data,i]),l&&s.push([g.propertyName,l]),r.object(...n))}}}return hr}function Nr(){if(!Pr){Pr=1,Object.defineProperty(dr,"__esModule",{value:!0}),dr.boolOrEmptySchema=dr.topBoolOrEmptySchema=void 0;const o=Ar(),i=M(),a=$(),c={message:"boolean schema is false"};function s(e,t){var{gen:r,data:n}=e,r={gen:r,keyword:"false schema",data:n,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};(0,o.reportError)(r,c,void 0,t)}dr.topBoolOrEmptySchema=function(e){var{gen:t,schema:r,validateName:n}=e;!1===r?s(e,!1):"object"==typeof r&&!0===r.$async?t.return(a.default.data):(t.assign((0,i._)`${n}.errors`,null),t.return(!0))},dr.boolOrEmptySchema=function(e,t){var{gen:r,schema:n}=e;!1===n?(r.var(t,!1),s(e)):r.var(t,!0)}}return dr}var xr,Tr={},jr={};function Cr(){if(!xr){xr=1,Object.defineProperty(jr,"__esModule",{value:!0}),jr.getRules=jr.isJSONType=void 0;const t=new Set(["string","number","integer","boolean","null","object","array"]);jr.isJSONType=function(e){return"string"==typeof e&&t.has(e)},jr.getRules=function(){var e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}}}return jr}var Mr,Ir,w={};function Rr(){return Mr||(Mr=1,Object.defineProperty(w,"__esModule",{value:!0}),w.shouldUseRule=w.shouldUseGroup=w.schemaHasRulesForType=void 0,w.schemaHasRulesForType=function({schema:e,self:t},r){return(t=t.RULES.types[r])&&!0!==t&&n(e,t)},w.shouldUseGroup=n,w.shouldUseRule=r),w;function n(t,e){return e.rules.some(e=>r(t,e))}function r(t,e){return void 0!==t[e.keyword]||(null==(e=e.definition.implements)?void 0:e.some(e=>void 0!==t[e]))}}function Lr(){if(!Ir){Ir=1;{var e=Tr;Object.defineProperty(e,"__esModule",{value:!0}),e.reportTypeError=e.checkDataTypes=e.checkDataType=e.coerceAndCheckDataType=e.getJSONTypes=e.getSchemaTypes=e.DataType=void 0;const n=Cr(),o=Rr(),s=Ar(),h=M(),l=I();var a,t;function r(e){e=Array.isArray(e)?e:e?[e]:[];if(e.every(n.isJSONType))return e;throw new Error("type must be JSONType or JSONType[]: "+e.join(","))}(t=a=e.DataType||(e.DataType={}))[t.Correct=0]="Correct",t[t.Wrong=1]="Wrong",e.getSchemaTypes=function(e){var t=r(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},e.getJSONTypes=r,e.coerceAndCheckDataType=function(l,u){var t,{gen:e,data:r,opts:n}=l;s=u;const p=(t=n.coerceTypes)?s.filter(e=>m.has(e)||"array"===t&&"array"===e):[];var s=0<u.length&&!(0===p.length&&1===u.length&&(0,o.schemaHasRulesForType)(l,u[0]));return s&&(r=f(u,r,n.strictNumbers,a.Wrong),e.if(r,()=>{if(p.length){var s=l,e=u,t=p;const{gen:o,data:i,opts:r}=s,n=o.let("dataType",(0,h._)`typeof ${i}`),a=o.let("coerced",(0,h._)`undefined`);"array"===r.coerceTypes&&o.if((0,h._)`${n} == 'object' && Array.isArray(${i}) && ${i}.length == 1`,()=>o.assign(i,(0,h._)`${i}[0]`).assign(n,(0,h._)`typeof ${i}`).if(f(e,i,r.strictNumbers),()=>o.assign(a,i))),o.if((0,h._)`${a} !== undefined`);for(const c of t)(m.has(c)||"array"===c&&"array"===r.coerceTypes)&&!function(e){switch(e){case"string":return o.elseIf((0,h._)`${n} == "number" || ${n} == "boolean"`).assign(a,(0,h._)`"" + ${i}`).elseIf((0,h._)`${i} === null`).assign(a,(0,h._)`""`);case"number":return o.elseIf((0,h._)`${n} == "boolean" || ${i} === null
              || (${n} == "string" && ${i} && ${i} == +${i})`).assign(a,(0,h._)`+${i}`);case"integer":return o.elseIf((0,h._)`${n} === "boolean" || ${i} === null
              || (${n} === "string" && ${i} && ${i} == +${i} && !(${i} % 1))`).assign(a,(0,h._)`+${i}`);case"boolean":return o.elseIf((0,h._)`${i} === "false" || ${i} === 0 || ${i} === null`).assign(a,!1).elseIf((0,h._)`${i} === "true" || ${i} === 1`).assign(a,!0);case"null":return o.elseIf((0,h._)`${i} === "" || ${i} === 0 || ${i} === false`),o.assign(a,null);case"array":o.elseIf((0,h._)`${n} === "string" || ${n} === "number"
              || ${n} === "boolean" || ${i} === null`).assign(a,(0,h._)`[${i}]`)}}(c);o.else(),d(s),o.endIf(),o.if((0,h._)`${a} !== undefined`,()=>{var e,t,r,n;o.assign(i,a),[{gen:e,parentData:t,parentDataProperty:r},n]=[s,a],e.if((0,h._)`${t} !== undefined`,()=>e.assign((0,h._)`${t}[${r}]`,n))})}else d(l)})),s};const m=new Set(["string","number","integer","boolean","null"]);function c(e,t,r,n=a.Correct){var s=n===a.Correct?h.operators.EQ:h.operators.NEQ;let o;switch(e){case"null":return(0,h._)`${t} ${s} null`;case"array":o=(0,h._)`Array.isArray(${t})`;break;case"object":o=(0,h._)`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":o=i((0,h._)`!(${t} % 1) && !isNaN(${t})`);break;case"number":o=i();break;default:return(0,h._)`typeof ${t} ${s} ${e}`}return n===a.Correct?o:(0,h.not)(o);function i(e=h.nil){return(0,h.and)((0,h._)`typeof ${t} == "number"`,e,r?(0,h._)`isFinite(${t})`:h.nil)}}function f(e,t,r,n){if(1===e.length)return c(e[0],t,r,n);let s;var o,e=(0,l.toHash)(e);e.array&&e.object?(o=(0,h._)`typeof ${t} != "object"`,s=e.null?o:(0,h._)`!${t} || ${o}`,delete e.null,delete e.array,delete e.object):s=h.nil,e.number&&delete e.integer;for(const i in e)s=(0,h.and)(s,c(i,t,r,n));return s}e.checkDataType=c,e.checkDataTypes=f;const i={message:({schema:e})=>"must be "+e,params:({schema:e,schemaValue:t})=>"string"==typeof e?(0,h._)`{type: ${e}}`:(0,h._)`{type: ${t}}`};function d(e){e=function(e){var{gen:t,data:r,schema:n}=e,s=(0,l.schemaRefOrVal)(e,n,"type");return{gen:t,keyword:"type",data:r,schema:n.type,schemaCode:s,schemaValue:s,parentSchema:n,params:{},it:e}}(e);(0,s.reportError)(e,i)}e.reportTypeError=d}}return Tr}var Dr,Fr={};function Vr(){if(!Dr){Dr=1,Object.defineProperty(Fr,"__esModule",{value:!0}),Fr.assignDefaults=void 0;const a=M(),c=I();function o(e,t,r){var{gen:n,compositeRule:s,data:o,opts:i}=e;if(void 0!==r){o=(0,a._)`${o}${(0,a.getProperty)(t)}`;if(s)(0,c.checkStrictMode)(e,"default is ignored for: "+o);else{let e=(0,a._)`${o} === undefined`;"empty"===i.useDefaults&&(e=(0,a._)`${e} || ${o} === null || ${o} === ""`),n.if(e,(0,a._)`${o} = ${(0,a.stringify)(r)}`)}}}Fr.assignDefaults=function(r,e){var{properties:t,items:n}=r.schema;if("object"===e&&t)for(const s in t)o(r,s,t[s].default);else"array"===e&&Array.isArray(n)&&n.forEach((e,t)=>o(r,t,e.default))}}return Fr}var Br,Ur,E={},S={};function O(){if(!Br){Br=1,Object.defineProperty(S,"__esModule",{value:!0}),S.validateUnion=S.validateArray=S.usePattern=S.callValidateCode=S.schemaProperties=S.allSchemaProperties=S.noPropertyInData=S.propertyInData=S.isOwnProperty=S.hasPropFunc=S.reportMissingProp=S.checkMissingProp=S.checkReportMissingProp=void 0;const u=M(),c=I(),p=$(),a=I(),l=(S.checkReportMissingProp=function(e,t){var{gen:r,data:n,it:s}=e;r.if(i(r,n,t,s.opts.ownProperties),()=>{e.setParams({missingProperty:(0,u._)`${t}`},!0),e.error()})},S.checkMissingProp=function({gen:t,data:r,it:{opts:n}},e,s){return(0,u.or)(...e.map(e=>(0,u.and)(i(t,r,e,n.ownProperties),(0,u._)`${s} = ${e}`)))},S.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},S.hasPropFunc=n,S.isOwnProperty=o,S.propertyInData=function(e,t,r,n){var s=(0,u._)`${t}${(0,u.getProperty)(r)} !== undefined`;return n?(0,u._)`${s} && ${o(e,t,r)}`:s},S.noPropertyInData=i,S.allSchemaProperties=e,S.schemaProperties=function(t,r){return e(r).filter(e=>!(0,c.alwaysValidSchema)(t,r[e]))},S.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:n,schemaPath:s,errorPath:o},it:i},a,c,l){return l=l?(0,u._)`${e}, ${t}, ${n}${s}`:t,e=[[p.default.instancePath,(0,u.strConcat)(p.default.instancePath,o)],[p.default.parentData,i.parentData],[p.default.parentDataProperty,i.parentDataProperty],[p.default.rootData,p.default.rootData]],i.opts.dynamicRef&&e.push([p.default.dynamicAnchors,p.default.dynamicAnchors]),n=(0,u._)`${l}, ${r.object(...e)}`,c!==u.nil?(0,u._)`${a}.call(${c}, ${n})`:(0,u._)`${a}(${n})`},(0,u._)`new RegExp`);function n(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:(0,u._)`Object.prototype.hasOwnProperty`})}function o(e,t,r){return(0,u._)`${n(e)}.call(${t}, ${r})`}function i(e,t,r,n){var s=(0,u._)`${t}${(0,u.getProperty)(r)} === undefined`;return n?(0,u.or)(s,(0,u.not)(o(e,t,r))):s}function e(e){return e?Object.keys(e).filter(e=>"__proto__"!==e):[]}S.usePattern=function({gen:e,it:{opts:t}},r){var n=t.unicodeRegExp?"u":"",s=(t=t.code["regExp"])(r,n);return e.scopeValue("pattern",{key:s.toString(),ref:s,code:(0,u._)`${"new RegExp"===t.code?l:(0,a.useFunc)(e,t)}(${r}, ${n})`})},S.validateArray=function(r){const{gen:n,data:s,keyword:o,it:e}=r,i=n.name("valid");if(e.allErrors){const a=n.let("valid",!0);return t(()=>n.assign(a,!1)),a}return n.var(i,!0),t(()=>n.break()),i;function t(t){var e=n.const("len",(0,u._)`${s}.length`);n.forRange("i",0,e,e=>{r.subschema({keyword:o,dataProp:e,dataPropType:c.Type.Num},i),n.if((0,u.not)(i),t)})}},S.validateUnion=function(r){const{gen:n,schema:e,keyword:s,it:t}=r;if(!Array.isArray(e))throw new Error("ajv implementation error");var o=e.some(e=>(0,c.alwaysValidSchema)(t,e));if(!o||t.opts.unevaluated){const i=n.let("valid",!1),a=n.name("_valid");n.block(()=>e.forEach((e,t)=>{t=r.subschema({keyword:s,schemaProp:t,compositeRule:!0},a),n.assign(i,(0,u._)`${i} || ${a}`),t=r.mergeValidEvaluated(t,a);t||n.if((0,u.not)(i))})),r.result(i,()=>r.reset(),()=>r.error(!0))}}}return S}function Yr(){if(!Ur){Ur=1,Object.defineProperty(E,"__esModule",{value:!0}),E.validateKeywordUsage=E.validSchemaType=E.funcKeywordCode=E.macroKeywordCode=void 0;const g=M(),y=$(),v=O(),b=Ar();function h(e){const{gen:t,data:r,it:n}=e;t.if(n.parentData,()=>t.assign(r,(0,g._)`${n.parentData}[${n.parentDataProperty}]`))}function m(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:(0,g.stringify)(r)})}E.macroKeywordCode=function(e,t){var{gen:r,keyword:n,schema:s,parentSchema:o,it:i}=e,t=t.macro.call(i.self,s,o,i),s=m(r,n,t),o=(!1!==i.opts.validateSchema&&i.self.validateSchema(t,!0),r.name("valid"));e.subschema({schema:t,schemaPath:g.nil,errSchemaPath:i.errSchemaPath+"/"+n,topSchemaRef:s,compositeRule:!0},o),e.pass(o,()=>e.error(!0))},E.funcKeywordCode=function(s,o){const{gen:i,keyword:e,schema:t,parentSchema:r,$data:n,it:a}=s;var[c,l]=[a.schemaEnv,o];if(l.async&&!c.$async)throw new Error("async keyword in sync schema");l=!n&&o.compile?o.compile.call(a.self,t,r,a):o.validate;const u=m(i,e,l),p=i.let("valid");function f(e=o.async?(0,g._)`await `:g.nil){var t=a.opts.passContext?y.default.this:y.default.self,r=!("compile"in o&&!n||!1===o.schema);i.assign(p,(0,g._)`${e}${(0,v.callValidateCode)(s,u,t,r)}`,o.modifying)}function d(e){var t;i.if((0,g.not)(null!=(t=o.valid)?t:p),e)}s.block$data(p,function(){if(!1===o.errors)f(),o.modifying&&h(s),d(()=>s.error());else{const n=(o.async?function(){const t=i.let("ruleErrs",null);return i.try(()=>f((0,g._)`await `),e=>i.assign(p,!1).if((0,g._)`${e} instanceof ${a.ValidationError}`,()=>i.assign(t,(0,g._)`${e}.errors`),()=>i.throw(e))),t}:function(){var e=(0,g._)`${u}.errors`;return i.assign(e,null),f(g.nil),e})();o.modifying&&h(s),d(()=>{{var e=s,t=n;const r=e["gen"];r.if((0,g._)`Array.isArray(${t})`,()=>{r.assign(y.default.vErrors,(0,g._)`${y.default.vErrors} === null ? ${t} : ${y.default.vErrors}.concat(${t})`).assign(y.default.errors,(0,g._)`${y.default.vErrors}.length`),(0,b.extendErrors)(e)},()=>e.error())}})}}),s.ok(null!=(c=o.valid)?c:p)},E.validSchemaType=function(t,e,r=!1){return!e.length||e.some(e=>"array"===e?Array.isArray(t):"object"===e?t&&"object"==typeof t&&!Array.isArray(t):typeof t==e||r&&void 0===t)},E.validateKeywordUsage=function({schema:t,opts:e,self:r,errSchemaPath:n},s,o){if(Array.isArray(s.keyword)?!s.keyword.includes(o):s.keyword!==o)throw new Error("ajv implementation error");var i=s.dependencies;if(null!=i&&i.some(e=>!Object.prototype.hasOwnProperty.call(t,e)))throw new Error(`parent schema must have dependencies of ${o}: `+i.join(","));if(s.validateSchema&&!s.validateSchema(t[o])){i=`keyword "${o}" value is invalid at path "${n}": `+r.errorsText(s.validateSchema.errors);if("log"!==e.validateSchema)throw new Error(i);r.logger.error(i)}}}return E}var zr,P={};function qr(){if(!zr){zr=1,Object.defineProperty(P,"__esModule",{value:!0}),P.extendSubschemaMode=P.extendSubschemaData=P.getSubschema=void 0;const f=M(),d=I();P.getSubschema=function(e,{keyword:t,schemaProp:r,schema:n,schemaPath:s,errSchemaPath:o,topSchemaRef:i}){if(void 0!==t&&void 0!==n)throw new Error('both "keyword" and "schema" passed, only one allowed');var a;if(void 0!==t)return a=e.schema[t],void 0===r?{schema:a,schemaPath:(0,f._)`${e.schemaPath}${(0,f.getProperty)(t)}`,errSchemaPath:e.errSchemaPath+"/"+t}:{schema:a[r],schemaPath:(0,f._)`${e.schemaPath}${(0,f.getProperty)(t)}${(0,f.getProperty)(r)}`,errSchemaPath:e.errSchemaPath+`/${t}/`+(0,d.escapeFragment)(r)};if(void 0===n)throw new Error('either "keyword" or "schema" must be passed');if(void 0===s||void 0===o||void 0===i)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:n,schemaPath:s,topSchemaRef:i,errSchemaPath:o}},P.extendSubschemaData=function(t,r,{dataProp:e,dataPropType:n,data:s,dataTypes:o,propertyName:i}){if(void 0!==s&&void 0!==e)throw new Error('both "data" and "dataProp" passed, only one allowed');var a,c,l,u=r["gen"];function p(e){t.data=e,t.dataLevel=r.dataLevel+1,t.dataTypes=[],r.definedProperties=new Set,t.parentData=r.data,t.dataNames=[...r.dataNames,e]}void 0!==e&&({errorPath:a,dataPathArr:c,opts:l}=r,p(u.let("data",(0,f._)`${r.data}${(0,f.getProperty)(e)}`,!0)),t.errorPath=(0,f.str)`${a}${(0,d.getErrorPath)(e,n,l.jsPropertySyntax)}`,t.parentDataProperty=(0,f._)`${e}`,t.dataPathArr=[...c,t.parentDataProperty]),void 0!==s&&(p(s instanceof f.Name?s:u.let("data",s,!0)),void 0!==i)&&(t.propertyName=i),o&&(t.dataTypes=o)},P.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:n,createErrors:s,allErrors:o}){void 0!==n&&(e.compositeRule=n),void 0!==s&&(e.createErrors=s),void 0!==o&&(e.allErrors=o),e.jtdDiscriminator=t,e.jtdMetadata=r}}return P}var Kr,Wr,k={};function Jr(){return Wr||(Wr=1,Kr=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,s,o;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(s=n;0!=s--;)if(!e(t[s],r[s]))return!1}else{if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(s=n;0!=s--;)if(!Object.prototype.hasOwnProperty.call(r,o[s]))return!1;for(s=n;0!=s--;){var i=o[s];if(!e(t[i],r[i]))return!1}}return!0}return t!=t&&r!=r}),Kr}var Gr,Hr,Qr,Zr={exports:{}};function Xr(){var m;return Gr||(Gr=1,(m=Zr.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),function e(t,r,n,s,o,i,a,c,l,u){if(s&&"object"==typeof s&&!Array.isArray(s)){for(var p in r(s,o,i,a,c,l,u),s){var f=s[p];if(Array.isArray(f)){if(p in m.arrayKeywords)for(var d=0;d<f.length;d++)e(t,r,n,f[d],o+"/"+p+"/"+d,i,o,p,s,d)}else if(p in m.propsKeywords){if(f&&"object"==typeof f)for(var h in f)e(t,r,n,f[h],o+"/"+p+"/"+g(h),i,o,p,s,h)}else(p in m.keywords||t.allKeys&&!(p in m.skipKeywords))&&e(t,r,n,f,o+"/"+p,i,o,p,s)}n(s,o,i,a,c,l,u)}}(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e)}).keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},m.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},m.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},m.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}),Zr.exports;function g(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}}function en(){if(!Hr){Hr=1,Object.defineProperty(k,"__esModule",{value:!0}),k.getSchemaRefs=k.resolveUrl=k.normalizeId=k._getFullPath=k.getFullPath=k.inlineRef=void 0;const i=I(),a=Jr(),g=Xr(),c=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]),l=(k.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!n(e):!!t&&function t(e){let r=0;for(const n in e){if("$ref"===n)return 1/0;if(r++,!c.has(n)&&("object"==typeof e[n]&&(0,i.eachItem)(e[n],e=>r+=t(e)),r===1/0))return 1/0}return r}(e)<=t)},new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"])),t=(k.getFullPath=s,k._getFullPath=o,/#\/?$/),y=(k.normalizeId=m,k.resolveUrl=function(e,t,r){return r=m(r),e.resolve(t,r)},/^[a-z_][-a-z0-9._]*$/i);function n(e){for(const r in e){if(l.has(r))return!0;var t=e[r];if(Array.isArray(t)&&t.some(n))return!0;if("object"==typeof t&&n(t))return!0}return!1}function s(e,t="",r){!1!==r&&(t=m(t));r=e.parse(t);return o(e,r)}function o(e,t){return e.serialize(t).split("#")[0]+"#"}function m(e){return e?e.replace(t,""):""}k.getSchemaRefs=function(e,t){if("boolean"==typeof e)return{};const{schemaId:c,uriResolver:r}=this.opts,l={"":t=m(e[c]||t)},u=s(r,t,!1),p={},f=new Set;return g(e,{allKeys:!0},(s,e,t,r)=>{if(void 0!==r){const a=u+e;let n=l[r];function o(e){var t=this.opts.uriResolver.resolve;if(e=m(n?t(n,e):e),f.has(e))throw h(e);f.add(e);let r=this.refs[e];return"object"==typeof(r="string"==typeof r?this.refs[r]:r)?d(s,r.schema,e):e!==m(a)&&("#"===e[0]?(d(s,p[e],e),p[e]=s):this.refs[e]=a),e}function i(e){if("string"==typeof e){if(!y.test(e))throw new Error(`invalid anchor "${e}"`);o.call(this,"#"+e)}}"string"==typeof s[c]&&(n=o.call(this,s[c])),i.call(this,s.$anchor),i.call(this,s.$dynamicAnchor),l[e]=n}}),p;function d(e,t,r){if(void 0!==t&&!a(e,t))throw h(r)}function h(e){return new Error(`reference "${e}" resolves to more than one schema`)}}}return k}function tn(){if(!Qr){Qr=1,Object.defineProperty(_,"__esModule",{value:!0}),_.getData=_.KeywordCxt=_.validateFunctionCode=void 0;const p=Nr(),a=Lr(),N=Rr(),x=Lr(),f=Vr(),d=Yr(),h=qr(),T=M(),j=$(),m=en(),C=I(),r=Ar();_.validateFunctionCode=function(e){if(l(e)&&(u(e),c(e))){var m=e;const{schema:g,opts:y,gen:v}=m;t(m,()=>{y.$comment&&g.$comment&&w(m);var e=m,{schema:t,opts:r}=e;if(void 0!==t.default&&r.useDefaults&&r.strictSchema&&(0,C.checkStrictMode)(e,"default is ignored in the schema root"),v.let(j.default.vErrors,null),v.let(j.default.errors,0),y.unevaluated){var n=m;const{gen:c,validateName:l}=n;n.evaluated=c.const("evaluated",(0,T._)`${l}.evaluated`),c.if((0,T._)`${n.evaluated}.dynamicProps`,()=>c.assign((0,T._)`${n.evaluated}.props`,(0,T._)`undefined`)),c.if((0,T._)`${n.evaluated}.dynamicItems`,()=>c.assign((0,T._)`${n.evaluated}.items`,(0,T._)`undefined`))}b(m);{const{gen:u,schemaEnv:p,validateName:f,ValidationError:d,opts:h}=t=m;var s,o,i,a;p.$async?u.if((0,T._)`${j.default.errors} === 0`,()=>u.return(j.default.data),()=>u.throw((0,T._)`new ${d}(${j.default.vErrors})`)):(u.assign((0,T._)`${f}.errors`,j.default.vErrors),h.unevaluated&&([{gen:s,evaluated:o,props:i,items:a}]=[t],i instanceof T.Name&&s.assign((0,T._)`${o}.props`,i),a instanceof T.Name)&&s.assign((0,T._)`${o}.items`,a),u.return((0,T._)`${j.default.errors} === 0`))}})}else t(e,()=>(0,p.topBoolOrEmptySchema)(e))};class g{constructor(e,t,r){if((0,d.validateKeywordUsage)(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=(0,C.schemaRefOrVal)(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",o(this.$data,e));else if(this.schemaCode=this.schemaValue,!(0,d.validSchemaType)(this.schema,t.schemaType,t.allowUndefined))throw new Error(r+" value must be "+JSON.stringify(t.schemaType));("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",j.default.errors))}result(e,t,r){this.failResult((0,T.not)(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult((0,T.not)(e),void 0,t)}fail(e){void 0===e?(this.error(),this.allErrors||this.gen.if(!1)):(this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else())}fail$data(e){if(!this.$data)return this.fail(e);var t=this["schemaCode"];this.fail((0,T._)`${t} !== undefined && (${(0,T.or)(this.invalid$data(),e)})`)}error(e,t,r){t?(this.setParams(t),this._error(e,r),this.setParams({})):this._error(e,r)}_error(e,t){(e?r.reportExtraError:r.reportError)(this,this.def.error,t)}$dataError(){(0,r.reportError)(this,this.def.$dataError||r.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');(0,r.resetErrorsCount)(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=T.nil){this.gen.block(()=>{this.check$data(e,r),t()})}check$data(e=T.nil,t=T.nil){var r,n,s,o;this.$data&&({gen:r,schemaCode:n,schemaType:s,def:o}=this,r.if((0,T.or)((0,T._)`${n} === undefined`,t)),e!==T.nil&&r.assign(e,!0),(s.length||o.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==T.nil)&&r.assign(e,!1),r.else())}invalid$data(){const{gen:t,schemaCode:r,schemaType:n,def:s,it:o}=this;return(0,T.or)(function(){if(n.length){var e;if(r instanceof T.Name)return e=Array.isArray(n)?n:[n],(0,T._)`${(0,x.checkDataTypes)(e,r,o.opts.strictNumbers,x.DataType.Wrong)}`;throw new Error("ajv implementation error")}return T.nil}(),function(){{var e;if(s.validateSchema)return e=t.scopeValue("validate$data",{ref:s.validateSchema}),(0,T._)`!${e}(${r})`}return T.nil}())}subschema(e,t){var r=(0,h.getSubschema)(this.it,e),e=((0,h.extendSubschemaData)(r,this.it,e),(0,h.extendSubschemaMode)(r,e),{...this.it,...r,items:void 0,props:void 0});return n(e,t),e}mergeEvaluated(e,t){var{it:r,gen:n}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=C.mergeEvaluated.props(n,e.props,r.props,t)),!0!==r.items)&&void 0!==e.items&&(r.items=C.mergeEvaluated.items(n,e.items,r.items,t))}mergeValidEvaluated(e,t){var{it:r,gen:n}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return n.if(t,()=>this.mergeEvaluated(e,T.Name)),!0}}_.KeywordCxt=g;const y=/^\/(?:[^~]|~0|~1)*$/,v=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function t({gen:r,validateName:e,schema:n,schemaEnv:t,opts:s},o){s.code.es5?r.func(e,(0,T._)`${j.default.data}, ${j.default.valCxt}`,t.$async,()=>{var e,t;r.code((0,T._)`"use strict"; ${i(n,s)}`),t=s,(e=r).if(j.default.valCxt,()=>{e.var(j.default.instancePath,(0,T._)`${j.default.valCxt}.${j.default.instancePath}`),e.var(j.default.parentData,(0,T._)`${j.default.valCxt}.${j.default.parentData}`),e.var(j.default.parentDataProperty,(0,T._)`${j.default.valCxt}.${j.default.parentDataProperty}`),e.var(j.default.rootData,(0,T._)`${j.default.valCxt}.${j.default.rootData}`),t.dynamicRef&&e.var(j.default.dynamicAnchors,(0,T._)`${j.default.valCxt}.${j.default.dynamicAnchors}`)},()=>{e.var(j.default.instancePath,(0,T._)`""`),e.var(j.default.parentData,(0,T._)`undefined`),e.var(j.default.parentDataProperty,(0,T._)`undefined`),e.var(j.default.rootData,j.default.data),t.dynamicRef&&e.var(j.default.dynamicAnchors,(0,T._)`{}`)}),r.code(o)}):r.func(e,(0,T._)`${j.default.data}, ${e=s,(0,T._)`{${j.default.instancePath}="", ${j.default.parentData}, ${j.default.parentDataProperty}, ${j.default.rootData}=${j.default.data}${e.dynamicRef?(0,T._)`, ${j.default.dynamicAnchors}={}`:T.nil}}={}`}`,t.$async,()=>r.code(i(n,s)).code(o))}function i(e,t){e="object"==typeof e&&e[t.schemaId];return e&&(t.code.source||t.code.process)?(0,T._)`/*# sourceURL=${e} */`:T.nil}function n(e,t){if(l(e)&&(u(e),c(e))){var r=e,n=t,{schema:s,gen:o,opts:i}=r,s=(i.$comment&&s.$comment&&w(r),r),a=s.schema[s.opts.schemaId],s=(a&&(s.baseId=(0,m.resolveUrl)(s.opts.uriResolver,s.baseId,a)),r);if(s.schema.$async&&!s.schemaEnv.$async)throw new Error("async schema in sync schema");i=o.const("_errs",j.default.errors),b(r,i),o.var(n,(0,T._)`${i} === ${j.default.errors}`)}else(0,p.boolOrEmptySchema)(e,t)}function c({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return 1}function l(e){return"boolean"!=typeof e.schema}function u(e){(0,C.checkUnknownRules)(e);var{schema:e,errSchemaPath:t,opts:r,self:n}=e;e.$ref&&r.ignoreKeywordsWithRef&&(0,C.schemaHasRulesButRef)(e,n.RULES)&&n.logger.warn(`$ref: keywords ignored in schema at path "${t}"`)}function b(e,t){if(e.opts.jtd)return s(e,[],!1,t);var r=(0,a.getSchemaTypes)(e.schema);s(e,r,!(0,a.coerceAndCheckDataType)(e,r),t)}function w({gen:e,schemaEnv:t,schema:r,errSchemaPath:n,opts:s}){r=r.$comment;!0===s.$comment?e.code((0,T._)`${j.default.self}.logger.log(${r})`):"function"==typeof s.$comment&&(s=(0,T.str)`${n}/$comment`,n=e.scopeValue("root",{ref:t.root}),e.code((0,T._)`${j.default.self}.opts.$comment(${r}, ${s}, ${n}.schema)`))}function s(t,r,n,s){const{gen:o,schema:i,data:a,allErrors:c,opts:l,self:e}=t,u=e["RULES"];if(!i.$ref||!l.ignoreKeywordsWithRef&&(0,C.schemaHasRulesButRef)(i,u)){if(!l.jtd){var p=t,f=r;if(!p.schemaEnv.meta&&p.opts.strictTypes){var d=p,h=f;if(h.length)if(d.dataTypes.length){h.forEach(e=>{P(d.dataTypes,e)||k(d,`type "${e}" not allowed by context "${d.dataTypes.join(",")}"`)});var m=d,g=h,y=[];for(const E of m.dataTypes)P(g,E)?y.push(E):g.includes("integer")&&"number"===E&&y.push("integer");m.dataTypes=y}else d.dataTypes=h;p.opts.allowUnionTypes||(m=p,1<(h=f).length&&(2!==h.length||!h.includes("null"))&&k(m,"use allowUnionTypes to allow union type keyword"));var v=p,b=p.dataTypes,w=v.self.RULES.all;for(const S in w){var _=w[S];"object"==typeof _&&(0,N.shouldUseRule)(v.schema,_)&&(_=_.definition["type"],_.length)&&!_.some(e=>{return e=e,(t=b).includes(e)||"number"===e&&t.includes("integer");var t})&&k(v,`missing type "${_.join(",")}" for keyword "${S}"`)}}}o.block(()=>{for(const e of u.rules)$(e);$(u.post)})}else o.block(()=>A(t,"$ref",u.all.$ref.definition));function $(e){(0,N.shouldUseGroup)(i,e)&&(e.type?(o.if((0,x.checkDataType)(e.type,a,l.strictNumbers)),O(t,e),1===r.length&&r[0]===e.type&&n&&(o.else(),(0,x.reportTypeError)(t)),o.endIf()):O(t,e),c||o.if((0,T._)`${j.default.errors} === ${s||0}`))}}function O(t,r){const{gen:e,schema:n,opts:{useDefaults:s}}=t;s&&(0,f.assignDefaults)(t,r.type),e.block(()=>{for(const e of r.rules)(0,N.shouldUseRule)(n,e)&&A(t,e.keyword,e.definition,r.type)})}function P(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function k(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,(0,C.checkStrictMode)(e,t,e.opts.strictTypes)}function A(e,t,r,n){e=new g(e,r,t);"code"in r?r.code(e,n):e.$data&&r.validate?(0,d.funcKeywordCode)(e,r):"macro"in r?(0,d.macroKeywordCode)(e,r):(r.compile||r.validate)&&(0,d.funcKeywordCode)(e,r)}function o(e,{dataLevel:r,dataNames:t,dataPathArr:n}){let s,o;if(""===e)return j.default.rootData;if("/"===e[0]){if(!y.test(e))throw new Error("Invalid JSON-pointer: "+e);s=e,o=j.default.rootData}else{var i=v.exec(e);if(!i)throw new Error("Invalid JSON-pointer: "+e);e=+i[1];if("#"===(s=i[2])){if(r<=e)throw new Error(c("property/index",e));return n[r-e]}if(r<e)throw new Error(c("data",e));if(o=t[r-e],!s)return o}let a=o;for(const l of s.split("/"))l&&(o=(0,T._)`${o}${(0,T.getProperty)((0,C.unescapeJsonPointer)(l))}`,a=(0,T._)`${a} && ${o}`);return a;function c(e,t){return`Cannot access ${e} ${t} levels up, current level is `+r}}_.getData=o}return _}var rn,nn={};function sn(){if(!rn){rn=1,Object.defineProperty(nn,"__esModule",{value:!0});class e extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}nn.default=e}return nn}var on,an={};function cn(){if(!on){on=1,Object.defineProperty(an,"__esModule",{value:!0});const s=en();class e extends Error{constructor(e,t,r,n){super(n||`can't resolve reference ${r} from id `+t),this.missingRef=(0,s.resolveUrl)(e,t,r),this.missingSchema=(0,s.normalizeId)((0,s.getFullPath)(e,this.missingRef))}}an.default=e}return an}var ln,A={};function un(){if(!ln){ln=1,Object.defineProperty(A,"__esModule",{value:!0}),A.resolveSchema=A.getCompilingSchema=A.resolveRef=A.compileSchema=A.SchemaEnv=void 0;const f=M(),d=sn(),h=$(),m=en(),u=I(),g=tn();class y{constructor(e){var t;this.refs={},this.dynamicAnchors={};let r;"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!=(t=e.baseId)?t:(0,m.normalizeId)(null===r||void 0===r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null===r||void 0===r?void 0:r.$async,this.refs={}}}A.SchemaEnv=y,A.compileSchema=a,A.resolveRef=function(e,t,r){r=(0,m.resolveUrl)(this.opts.uriResolver,t,r);var n,s=e.refs[r];if(s)return s;let o=function(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||c.call(this,e,t)}.call(this,e,r);return void 0!==(o=void 0===o&&(s=null==(s=e.localRefs)?void 0:s[r],n=this.opts["schemaId"],s)?new y({schema:s,schemaId:n,root:e,baseId:t}):o)?e.refs[r]=function(e){return(0,m.inlineRef)(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:a.call(this,e)}.call(this,o):void 0},A.getCompilingSchema=p,A.resolveSchema=c;const v=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function a(t){var e=p.call(this,t);if(e)return e;var e=(0,m.getFullPath)(this.opts.uriResolver,t.root.baseId),{es5:r,lines:n}=this.opts.code,s=this.opts["ownProperties"],r=new f.CodeGen(this.scope,{es5:r,lines:n,ownProperties:s});let o;t.$async&&(o=r.scopeValue("Error",{ref:d.default,code:(0,f._)`require("ajv/dist/runtime/validation_error").default`}));n=r.scopeName("validate"),t.validateName=n,s={gen:r,allErrors:this.opts.allErrors,data:h.default.data,parentData:h.default.parentData,parentDataProperty:h.default.parentDataProperty,dataNames:[h.default.data],dataPathArr:[f.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:r.scopeValue("schema",!0===this.opts.code.source?{ref:t.schema,code:(0,f.stringify)(t.schema)}:{ref:t.schema}),validateName:n,ValidationError:o,schema:t.schema,schemaEnv:t,rootId:e,baseId:t.baseId||e,schemaPath:f.nil,errSchemaPath:t.schemaPath||(this.opts.jtd?"":"#"),errorPath:(0,f._)`""`,opts:this.opts,self:this};let i;try{this._compilations.add(t),(0,g.validateFunctionCode)(s),r.optimize(this.opts.code.optimize);var a=r.toString();i=r.scopeRefs(h.default.scope)+"return "+a,this.opts.code.process&&(i=this.opts.code.process(i,t));var c,l,u=new Function(""+h.default.self,""+h.default.scope,i)(this,this.scope.get());return this.scope.value(n,{ref:u}),u.errors=null,u.schema=t.schema,(u.schemaEnv=t).$async&&(u.$async=!0),!0===this.opts.code.source&&(u.source={validateName:n,validateCode:a,scopeValues:r._values}),this.opts.unevaluated&&({props:c,items:l}=s,u.evaluated={props:c instanceof f.Name?void 0:c,items:l instanceof f.Name?void 0:l,dynamicProps:c instanceof f.Name,dynamicItems:l instanceof f.Name},u.source)&&(u.source.evaluated=(0,f.stringify)(u.evaluated)),t.validate=u,t}catch(e){throw delete t.validate,delete t.validateName,i&&this.logger.error("Error compiling schema, function code:",i),e}finally{this._compilations.delete(t)}}function p(e){for(const n of this._compilations)if(t=n,r=e,t.schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return n;var t,r}function c(e,t){var r,n,s=this.opts.uriResolver.parse(t),o=(0,m._getFullPath)(this.opts.uriResolver,s);let i=(0,m.getFullPath)(this.opts.uriResolver,e.baseId,void 0);return 0<Object.keys(e.schema).length&&o===i?l.call(this,s,e):(o=(0,m.normalizeId)(o),"string"==typeof(r=this.refs[o]||this.schemas[o])?"object"!=typeof(null==(n=c.call(this,e,r))?void 0:n.schema)?void 0:l.call(this,s,n):"object"==typeof(null==r?void 0:r.schema)?(r.validate||a.call(this,r),o===(0,m.normalizeId)(t)?(n=r["schema"],o=this.opts["schemaId"],(t=n[o])&&(i=(0,m.resolveUrl)(this.opts.uriResolver,i,t)),new y({schema:n,schemaId:o,root:e,baseId:i})):l.call(this,s,r)):void 0)}function l(t,{baseId:r,schema:n,root:s}){if("/"===(null==(i=t.fragment)?void 0:i[0])){for(const a of t.fragment.slice(1).split("/")){if("boolean"==typeof n)return;var o=n[(0,u.unescapeFragment)(a)];if(void 0===o)return;o="object"==typeof(n=o)&&n[this.opts.schemaId];!v.has(a)&&o&&(r=(0,m.resolveUrl)(this.opts.uriResolver,r,o))}let e;var i,t=("boolean"!=typeof n&&n.$ref&&!(0,u.schemaHasRulesButRef)(n,this.RULES)&&(i=(0,m.resolveUrl)(this.opts.uriResolver,r,n.$ref),e=c.call(this,s,i)),this.opts)["schemaId"];return(e=e||new y({schema:n,schemaId:t,root:s,baseId:r})).schema!==e.root.schema?e:void 0}}}return A}var pn,fn,dn,hn={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1},mn={},gn={exports:{}};function yn(){var e,a,c,p,S,T,j,C,M,I,R,L,O,P,k,A,s,D,F,N,V,B,x,Y,g,l,z,q,n,o,i,K,t,W,r,J,G,H,d,Q,Z,X,u,ee,f,te,re;return pn||(pn=1,e=gn.exports,a=se(!1),c=se(!0),p=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){var r=t,n=[],s=!0,t=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(s=(i=a.next()).done)&&(n.push(i.value),!r||n.length!==r);s=!0);}catch(e){t=!0,o=e}finally{try{!s&&a.return&&a.return()}finally{if(t)throw o}}return n}throw new TypeError("Invalid attempt to destructure non-iterable instance")},S=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},T=2147483647,M=26,I=72,R=128,L="-",O=/^xn--/,P=/[^\0-\x7E]/,k=/[\x2E\u3002\uFF0E\uFF61]/g,A={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},s=(j=36)-(C=1),D=Math.floor,F=String.fromCharCode,N=function(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:j},V=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},B=function(e,t,r){var n=0;for(e=r?D(e/700):e>>1,e+=D(e/t);s*M>>1<e;n+=j)e=D(e/s);return D(n+(1+s)*e/(e+38))},g={version:"2.1.0",ucs2:{decode:ie,encode:function(e){return String.fromCodePoint.apply(String,S(e))}},decode:x=function(e){var t=[],r=e.length,n=0,s=R,o=I,i=e.lastIndexOf(L);i<0&&(i=0);for(var a=0;a<i;++a)128<=e.charCodeAt(a)&&U("not-basic"),t.push(e.charCodeAt(a));for(var c=0<i?i+1:0;c<r;){for(var l=n,u=1,p=j;;p+=j){r<=c&&U("invalid-input");var f=N(e.charCodeAt(c++)),d=((j<=f||f>D((T-n)/u))&&U("overflow"),n+=f*u,p<=o?C:o+M<=p?M:p-o);if(f<d)break;f=j-d;u>D(T/f)&&U("overflow"),u*=f}var h=t.length+1,o=B(n-l,h,0==l);D(n/h)>T-s&&U("overflow"),s+=D(n/h),n%=h,t.splice(n++,0,s)}return String.fromCodePoint.apply(String,t)},encode:Y=function(e){var t=[],r=(e=ie(e)).length,n=R,s=0,o=I,i=!0,a=!1,c=void 0;try{for(var l,u=e[Symbol.iterator]();!(i=(l=u.next()).done);i=!0){var p=l.value;p<128&&t.push(F(p))}}catch(e){a=!0,c=e}finally{try{!i&&u.return&&u.return()}finally{if(a)throw c}}var f=t.length,d=f;for(f&&t.push(L);d<r;){var h=T,m=!0,g=!1,y=void 0;try{for(var v,b=e[Symbol.iterator]();!(m=(v=b.next()).done);m=!0){var w=v.value;n<=w&&w<h&&(h=w)}}catch(e){g=!0,y=e}finally{try{!m&&b.return&&b.return()}finally{if(g)throw y}}var _=d+1,$=(h-n>D((T-s)/_)&&U("overflow"),s+=(h-n)*_,n=h,!0),g=!1,y=void 0;try{for(var E,S=e[Symbol.iterator]();!($=(E=S.next()).done);$=!0){var O=E.value;if(O<n&&++s>T&&U("overflow"),O==n){for(var P=s,k=j;;k+=j){var A=k<=o?C:o+M<=k?M:k-o;if(P<A)break;var N=P-A,x=j-A;t.push(F(V(A+N%x,0))),P=D(N/x)}t.push(F(V(P,0))),o=B(s,_,d==f),s=0,++d}}}catch(e){g=!0,y=e}finally{try{!$&&S.return&&S.return()}finally{if(g)throw y}}++s,++n}return t.join("")},toASCII:function(e){return oe(e,function(e){return P.test(e)?"xn--"+Y(e):e})},toUnicode:function(e){return oe(e,function(e){return O.test(e)?x(e.slice(4).toLowerCase()):e})}},l={},z=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,q=void 0==="".match(/(){0}/)[1],n=/^\.\.?\//,o=/^\/\.(\/|$)/,i=/^\/\.\.(\/|$)/,K=/^\/?(?:.|\n)*?(?=\/|$)/,W={scheme:"https",domainHost:(t={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}}).domainHost,parse:t.parse,serialize:t.serialize},J={scheme:"wss",domainHost:(r={scheme:"ws",domainHost:!0,parse:function(e,t){return e.secure=fe(e),e.resourceName=(e.path||"/")+(e.query?"?"+e.query:""),e.path=void 0,e.query=void 0,e},serialize:function(e,t){var r,n;return e.port!==(fe(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName&&(n=e.resourceName.split("?"),r=(n=p(n,2))[0],n=n[1],e.path=r&&"/"!==r?r:void 0,e.query=n,e.resourceName=void 0),e.fragment=void 0,e}}).domainHost,parse:r.parse,serialize:r.serialize},G={},f="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",b(b("%[EFef]"+(u="[0-9A-Fa-f]")+"%"+u+u+"%"+u+u)+"|"+b("%[89A-Fa-f]"+u+"%"+u+u)+"|"+b("%"+u+u)),u=v("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),H=new RegExp(f,"g"),d=new RegExp("(?:(?:%[EFef][0-9A-Fa-f]%[0-9A-Fa-f][0-9A-Fa-f]%[0-9A-Fa-f][0-9A-Fa-f])|(?:%[89A-Fa-f][0-9A-Fa-f]%[0-9A-Fa-f][0-9A-Fa-f])|(?:%[0-9A-Fa-f][0-9A-Fa-f]))","g"),Q=new RegExp(v("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',u),"g"),Z=new RegExp(v("[^]",f,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),X=Z,u={scheme:"mailto",parse:function(e,t){var r=e,n=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var s=!1,o={},i=r.query.split("&"),a=0,c=i.length;a<c;++a){var l=i[a].split("=");switch(l[0]){case"to":for(var u=l[1].split(","),p=0,f=u.length;p<f;++p)n.push(u[p]);break;case"subject":r.subject=E(l[1],t);break;case"body":r.body=E(l[1],t);break;default:s=!0,o[E(l[0],t)]=E(l[1],t)}}s&&(r.headers=o)}r.query=void 0;for(var d=0,h=n.length;d<h;++d){var m=n[d].split("@");if(m[0]=E(m[0]),t.unicodeSupport)m[1]=E(m[1],t).toLowerCase();else try{m[1]=g.toASCII(E(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}n[d]=m.join("@")}return r},serialize:function(e,t){var r,n=e,s=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(s){for(var o=0,i=s.length;o<i;++o){var a=String(s[o]),c=a.lastIndexOf("@"),l=a.slice(0,c).replace(d,de).replace(d,h).replace(Q,m),a=a.slice(c+1);try{a=t.iri?g.toUnicode(a):g.toASCII(E(a,t).toLowerCase())}catch(e){n.error=n.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}s[o]=l+"@"+a}n.path=s.join(",")}var u,p=e.headers=e.headers||{},f=(e.subject&&(p.subject=e.subject),e.body&&(p.body=e.body),[]);for(u in p)p[u]!==G[u]&&f.push(u.replace(d,de).replace(d,h).replace(Z,m)+"="+p[u].replace(d,de).replace(d,h).replace(X,m));return f.length&&(n.query=f.join("&")),n}},ee=/^([^\:]+)\:(.*)/,f={scheme:"urn",parse:function(e,t){var r,n,s=e.path&&e.path.match(ee);return s?(n=t.scheme||e.scheme||"urn",r=s[1].toLowerCase(),s=s[2],n=n+":"+(t.nid||r),n=l[n],e.nid=r,e.nss=s,e.path=void 0,n&&(e=n.parse(e,t))):e.error=e.error||"URN can not be parsed.",e},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",n=e.nid,r=r+":"+(t.nid||n),r=l[r],r=e=r?r.serialize(e,t):e,e=e.nss;return r.path=(n||t.nid)+":"+e,r}},te=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,re={scheme:"urn:uuid",parse:function(e,t){return e.uuid=e.nss,e.nss=void 0,t.tolerant||e.uuid&&e.uuid.match(te)||(e.error=e.error||"UUID is not valid."),e},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}},l[t.scheme]=t,l[W.scheme]=W,l[r.scheme]=r,l[J.scheme]=J,l[u.scheme]=u,l[f.scheme]=f,l[re.scheme]=re,e.SCHEMES=l,e.pctEncChar=m,e.pctDecChars=y,e.parse=w,e.removeDotSegments=_,e.serialize=$,e.resolveComponents=pe,e.resolve=function(e,t,r){r=function(e,t){var r=e;if(t)for(var n in t)r[n]=t[n];return r}({scheme:"null"},r);return $(pe(w(e,r),w(t,r),r,!0),r)},e.normalize=function(e,t){"string"==typeof e?e=$(w(e,t),t):"object"===ne(e)&&(e=w($(e,t),t));return e},e.equal=function(e,t,r){"string"==typeof e?e=$(w(e,r),r):"object"===ne(e)&&(e=$(e,r));"string"==typeof t?t=$(w(t,r),r):"object"===ne(t)&&(t=$(t,r));return e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace((t&&t.iri?c:a).ESCAPE,m)},e.unescapeComponent=E,Object.defineProperty(e,"__esModule",{value:!0})),gn.exports;function v(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(1<t.length){t[0]=t[0].slice(0,-1);for(var n=t.length-1,s=1;s<n;++s)t[s]=t[s].slice(1,-1);return t[n]=t[n].slice(1),t.join("")}return t[0]}function b(e){return"(?:"+e+")"}function ne(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function h(e){return e.toUpperCase()}function se(e){var t="[A-Za-z]",r="[0-9]",n=v(r,"[A-Fa-f]"),s=b(b("%[EFef]"+n+"%"+n+n+"%"+n+n)+"|"+b("%[89A-Fa-f]"+n+"%"+n+n)+"|"+b("%"+n+n)),o="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",i=v("[\\:\\/\\?\\#\\[\\]\\@]",o),a=e?"[\\uE000-\\uF8FF]":"[]",e=v(t,r,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]"),c=(v(t,r,"[\\+\\-\\.]"),b(s+"|"+v(e,o,"[\\:]")),"(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9][0-9])|(?:0?[1-9][0-9])|0?0?[0-9])"),c=b(c+"\\."+c+"\\."+c+"\\."+c),l=b(n+"{1,4}"),u=b(b(l+"\\:"+l)+"|"+c),p=b(b(l+"\\:")+"{6}"+u),f=b("\\:\\:"+b(l+"\\:")+"{5}"+u),d=b(b(l)+"?\\:\\:"+b(l+"\\:")+"{4}"+u),h=b(b(b(l+"\\:")+"{0,1}"+l)+"?\\:\\:"+b(l+"\\:")+"{3}"+u),m=b(b(b(l+"\\:")+"{0,2}"+l)+"?\\:\\:"+b(l+"\\:")+"{2}"+u),g=b(b(b(l+"\\:")+"{0,3}"+l)+"?\\:\\:"+l+"\\:"+u),u=b(b(b(l+"\\:")+"{0,4}"+l)+"?\\:\\:"+u),y=b(b(b(l+"\\:")+"{0,5}"+l)+"?\\:\\:"+l),l=b(b(b(l+"\\:")+"{0,6}"+l)+"?\\:\\:"),p=b([p,f,d,h,m,g,u,y,l].join("|")),f=b(b(e+"|"+s)+"+"),d=(v(e,o,"[\\:]"),b(s+"|"+v(e,o)),b(s+"|"+v(e,o,"[\\:\\@]")));return b(s+"|"+v(e,o,"[\\@]")),b(d+"|"+v("[\\/\\?]",a)),{NOT_SCHEME:new RegExp(v("[^]",t,r,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(v("[^\\%\\:]",e,o),"g"),NOT_HOST:new RegExp(v("[^\\%\\[\\]\\:]",e,o),"g"),NOT_PATH:new RegExp(v("[^\\%\\/\\:\\@]",e,o),"g"),NOT_PATH_NOSCHEME:new RegExp(v("[^\\%\\/\\@]",e,o),"g"),NOT_QUERY:new RegExp(v("[^\\%]",e,o,"[\\:\\@\\/\\?]",a),"g"),NOT_FRAGMENT:new RegExp(v("[^\\%]",e,o,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(v("[^]",e,o),"g"),UNRESERVED:new RegExp(e,"g"),OTHER_CHARS:new RegExp(v("[^\\%]",e,i),"g"),PCT_ENCODED:new RegExp(s,"g"),IPV4ADDRESS:new RegExp("^("+c+")$"),IPV6ADDRESS:new RegExp("^\\[?("+p+")"+b(b("\\%25|\\%(?!"+n+"{2})")+"("+f+")")+"?\\]?$")}}function U(e){throw new RangeError(A[e])}function oe(e,t){var r=e.split("@"),n="",r=(1<r.length&&(n=r[0]+"@",e=r[1]),(e=e.replace(k,".")).split("."));return n+function(e,t){for(var r=[],n=e.length;n--;)r[n]=t(e[n]);return r}(r,t).join(".")}function ie(e){for(var t=[],r=0,n=e.length;r<n;){var s,o=e.charCodeAt(r++);55296<=o&&o<=56319&&r<n?56320==(64512&(s=e.charCodeAt(r++)))?t.push(((1023&o)<<10)+(1023&s)+65536):(t.push(o),r--):t.push(o)}return t}function m(e){e=e.charCodeAt(0);return e<16?"%0"+e.toString(16).toUpperCase():e<128?"%"+e.toString(16).toUpperCase():e<2048?"%"+(e>>6|192).toString(16).toUpperCase()+"%"+(63&e|128).toString(16).toUpperCase():"%"+(e>>12|224).toString(16).toUpperCase()+"%"+(e>>6&63|128).toString(16).toUpperCase()+"%"+(63&e|128).toString(16).toUpperCase()}function y(e){for(var t="",r=0,n=e.length;r<n;){var s,o,i=parseInt(e.substr(r+1,2),16);i<128?(t+=String.fromCharCode(i),r+=3):194<=i&&i<224?(6<=n-r?(s=parseInt(e.substr(r+4,2),16),t+=String.fromCharCode((31&i)<<6|63&s)):t+=e.substr(r,6),r+=6):224<=i?(9<=n-r?(s=parseInt(e.substr(r+4,2),16),o=parseInt(e.substr(r+7,2),16),t+=String.fromCharCode((15&i)<<12|(63&s)<<6|63&o)):t+=e.substr(r,9),r+=9):(t+=e.substr(r,3),r+=3)}return t}function ae(e,r){function t(e){var t=y(e);return t.match(r.UNRESERVED)?t:e}e.scheme&&(e.scheme=String(e.scheme).replace(r.PCT_ENCODED,t).toLowerCase().replace(r.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(r.PCT_ENCODED,t).replace(r.NOT_USERINFO,m).replace(r.PCT_ENCODED,h)),void 0!==e.host&&(e.host=String(e.host).replace(r.PCT_ENCODED,t).toLowerCase().replace(r.NOT_HOST,m).replace(r.PCT_ENCODED,h)),void 0!==e.path&&(e.path=String(e.path).replace(r.PCT_ENCODED,t).replace(e.scheme?r.NOT_PATH:r.NOT_PATH_NOSCHEME,m).replace(r.PCT_ENCODED,h)),void 0!==e.query&&(e.query=String(e.query).replace(r.PCT_ENCODED,t).replace(r.NOT_QUERY,m).replace(r.PCT_ENCODED,h)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(r.PCT_ENCODED,t).replace(r.NOT_FRAGMENT,m).replace(r.PCT_ENCODED,h))}function ce(e){return e.replace(/^0*(.*)/,"$1")||"0"}function le(e,t){t=e.match(t.IPV4ADDRESS)||[],t=p(t,2)[1];return t?t.split(".").map(ce).join("."):e}function ue(e,t){var r=e.match(t.IPV6ADDRESS)||[],r=p(r,3),n=r[1],r=r[2];if(n){for(var n=n.toLowerCase().split("::").reverse(),n=p(n,2),s=n[0],n=n[1],o=n?n.split(":").map(ce):[],i=s.split(":").map(ce),n=t.IPV4ADDRESS.test(i[i.length-1]),a=n?7:8,c=i.length-a,l=Array(a),u=0;u<a;++u)l[u]=o[u]||i[c+u]||"";n&&(l[a-1]=le(l[a-1],t));var s=l.reduce(function(e,t,r){return t&&"0"!==t||((t=e[e.length-1])&&t.index+t.length===r?t.length++:e.push({index:r,length:1})),e},[]).sort(function(e,t){return t.length-e.length})[0],n=void 0;return n=s&&1<s.length?(t=l.slice(0,s.index),s=l.slice(s.index+s.length),t.join(":")+"::"+s.join(":")):l.join(":"),r&&(n+="%"+r),n}return e}function w(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r={},n=!1!==t.iri?c:a,s=(e="suffix"===t.reference?(t.scheme?t.scheme+":":"")+"//"+e:e).match(z);if(s){q?(r.scheme=s[1],r.userinfo=s[3],r.host=s[4],r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=s[7],r.fragment=s[8],isNaN(r.port)&&(r.port=s[5])):(r.scheme=s[1]||void 0,r.userinfo=-1!==e.indexOf("@")?s[3]:void 0,r.host=-1!==e.indexOf("//")?s[4]:void 0,r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=-1!==e.indexOf("?")?s[7]:void 0,r.fragment=-1!==e.indexOf("#")?s[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?s[4]:void 0)),r.host&&(r.host=ue(le(r.host,n),n)),r.reference=void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?"relative":void 0===r.fragment?"absolute":"uri":"same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");e=l[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||e&&e.unicodeSupport)ae(r,n);else{if(r.host&&(t.domainHost||e&&e.domainHost))try{r.host=g.toASCII(r.host.replace(n.PCT_ENCODED,y).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}ae(r,a)}e&&e.parse&&e.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function _(e){for(var t=[];e.length;)if(e.match(n))e=e.replace(n,"");else if(e.match(o))e=e.replace(o,"/");else if(e.match(i))e=e.replace(i,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(K);if(!r)throw new Error("Unexpected dot segment condition");r=r[0];e=e.slice(r.length),t.push(r)}return t.join("")}function $(t){var r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=r.iri?c:a,n=[],s=l[(r.scheme||t.scheme||"").toLowerCase()];if(s&&s.serialize&&s.serialize(t,r),t.host&&!e.IPV6ADDRESS.test(t.host)&&(r.domainHost||s&&s.domainHost))try{t.host=r.iri?g.toUnicode(t.host):g.toASCII(t.host.replace(e.PCT_ENCODED,y).toLowerCase())}catch(e){t.error=t.error||"Host's domain name can not be converted to "+(r.iri?"Unicode":"ASCII")+" via punycode: "+e}ae(t,e),"suffix"!==r.reference&&t.scheme&&(n.push(t.scheme),n.push(":"));e=t,i=!1!==(i=r).iri?c:a,o=[],void 0!==e.userinfo&&(o.push(e.userinfo),o.push("@")),void 0!==e.host&&o.push(ue(le(String(e.host),i),i).replace(i.IPV6ADDRESS,function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"})),"number"!=typeof e.port&&"string"!=typeof e.port||(o.push(":"),o.push(String(e.port)));var o,i=o.length?o.join(""):void 0;return void 0!==i&&("suffix"!==r.reference&&n.push("//"),n.push(i),t.path)&&"/"!==t.path.charAt(0)&&n.push("/"),void 0!==t.path&&(e=t.path,r.absolutePath||s&&s.absolutePath||(e=_(e)),void 0===i&&(e=e.replace(/^\/\//,"/%2F")),n.push(e)),void 0!==t.query&&(n.push("?"),n.push(t.query)),void 0!==t.fragment&&(n.push("#"),n.push(t.fragment)),n.join("")}function pe(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},n={};return arguments[3]||(e=w($(e,r),r),t=w($(t,r),r)),!(r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=_(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=_(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=_(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=_(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function E(e,t){return e&&e.toString().replace((t&&t.iri?c:a).PCT_ENCODED,y)}function fe(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}function de(e){var t=y(e);return t.match(H)?t:e}}function vn(){if(!dn){dn=1;{var e=fr;Object.defineProperty(e,"__esModule",{value:!0}),e.CodeGen=e.Name=e.nil=e.stringify=e.str=e._=e.KeywordCxt=void 0;var t,r=tn(),n=(Object.defineProperty(e,"KeywordCxt",{enumerable:!0,get:function(){return r.KeywordCxt}}),M()),s=(Object.defineProperty(e,"_",{enumerable:!0,get:function(){return n._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return n.str}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return n.stringify}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return n.nil}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return n.Name}}),Object.defineProperty(e,"CodeGen",{enumerable:!0,get:function(){return n.CodeGen}}),sn());const l=cn(),u=Cr(),p=un(),f=M(),d=en(),h=Lr(),m=I(),g=hn,y=(fn||(fn=1,Object.defineProperty(mn,"__esModule",{value:!0}),(t=yn()).code='require("ajv/dist/runtime/uri").default',mn.default=t),mn),v=(e,t)=>new RegExp(e,t),b=(v.code="new RegExp",["removeAdditional","useDefaults","coerceTypes"]),w=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),_={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},$={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'},E=200;class S{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,...(t=e,o=t.strict,r=!0===(r=null==(r=t.code)?void 0:r.optimize)||void 0===r?1:r||0,s=null!=(s=null==(s=t.code)?void 0:s.regExp)?s:v,n=null!=(n=t.uriResolver)?n:y.default,{strictSchema:null==(i=null!=(i=t.strictSchema)?i:o)||i,strictNumbers:null==(i=null!=(i=t.strictNumbers)?i:o)||i,strictTypes:null!=(i=null!=(i=t.strictTypes)?i:o)?i:"log",strictTuples:null!=(i=null!=(i=t.strictTuples)?i:o)?i:"log",strictRequired:null!=(i=null!=(i=t.strictRequired)?i:o)&&i,code:t.code?{...t.code,optimize:r,regExp:s}:{optimize:r,regExp:s},loopRequired:null!=(o=t.loopRequired)?o:E,loopEnum:null!=(i=t.loopEnum)?i:E,meta:null==(r=t.meta)||r,messages:null==(s=t.messages)||s,inlineRefs:null==(o=t.inlineRefs)||o,schemaId:null!=(i=t.schemaId)?i:"$id",addUsedSchema:null==(r=t.addUsedSchema)||r,validateSchema:null==(s=t.validateSchema)||s,validateFormats:null==(o=t.validateFormats)||o,unicodeRegExp:null==(i=t.unicodeRegExp)||i,int32range:null==(r=t.int32range)||r,uriResolver:n})};var t,r,n,{es5:s,lines:o}=this.opts.code,i=(this.scope=new f.ValueScope({scope:{},prefixes:w,es5:s,lines:o}),this.logger=function(e){if(!1===e)return O;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger),e.validateFormats);e.validateFormats=!1,this.RULES=(0,u.getRules)(),a.call(this,_,e,"NOT SUPPORTED"),a.call(this,$,e,"DEPRECATED","warn"),this._metaOpts=function(){var e={...this.opts};for(const t of b)delete e[t];return e}.call(this),e.formats&&function(){for(const t in this.opts.formats){var e=this.opts.formats[t];e&&this.addFormat(t,e)}}.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&function(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const r in e){var t=e[r];t.keyword||(t.keyword=r),this.addKeyword(t)}}}.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),function(){var e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}.call(this),e.validateFormats=i}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){var{$data:e,meta:t,schemaId:r}=this.opts;let n=g;"id"===r&&((n={...g}).id=n.$id,delete n.$id),t&&e&&this.addMetaSchema(n,n[r],!1)}defaultMeta(){var{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(!(r=this.getSchema(e)))throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);e=r(t);return"$async"in r||(this.errors=r.errors),e}compile(e,t){e=this._addSchema(e,t);return e.validate||this._compileSchemaEnv(e)}compileAsync(e,r){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const n=this.opts["loadSchema"];return t.call(this,e,r);async function t(e,t){await s.call(this,e.$schema);e=this._addSchema(e,t);return e.validate||o.call(this,e)}async function s(e){e&&!this.getSchema(e)&&await t.call(this,{$ref:e},!0)}async function o(t){try{return this._compileSchemaEnv(t)}catch(e){if(e instanceof l.default)return function({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}.call(this,e),await async function(e){var t=await async function(e){var t=this._loading[e];if(t)return t;try{return await(this._loading[e]=n(e))}finally{delete this._loading[e]}}.call(this,e);this.refs[e]||await s.call(this,t.$schema);this.refs[e]||this.addSchema(t,e,r)}.call(this,e.missingSchema),o.call(this,t);throw e}}}addSchema(t,r,n,s=this.opts.validateSchema){if(Array.isArray(t))for(const e of t)this.addSchema(e,void 0,n,s);else{let e;if("object"==typeof t){var o=this.opts["schemaId"];if(void 0!==(e=t[o])&&"string"!=typeof e)throw new Error(`schema ${o} must be string`)}r=(0,d.normalizeId)(r||e),this._checkUnique(r),this.schemas[r]=this._addSchema(t,n,r,s,!0)}return this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;var r=e.$schema;if(void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(!(r=r||this.opts.defaultMeta||this.defaultMeta()))return this.logger.warn("meta-schema not available"),!(this.errors=null);r=this.validate(r,e);if(!r&&t){e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return r}getSchema(e){let t;for(;"string"==typeof(t=o.call(this,e));)e=t;if(void 0===t){var r=this.opts["schemaId"],r=new p.SchemaEnv({schema:{},schemaId:r});if(!(t=p.resolveSchema.call(this,r,e)))return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":var t=o.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this;case"object":this._cache.delete(e);t=e[this.opts.schemaId];return t&&(t=(0,d.normalizeId)(t),delete this.schemas[t],delete this.refs[t]),this;default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(t=e,r=t.keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(!function(e,t){const r=this["RULES"];if((0,m.eachItem)(e,e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!P.test(e))throw new Error(`Keyword ${e} has invalid name`)}),t&&t.$data&&!("code"in t||"validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}.call(this,r,t),t){!function(e){let t=e["metaSchema"];void 0!==t&&(e.$data&&this.opts.$data&&(t=c(t)),e.validateSchema=this.compile(t,!0))}.call(this,t);const n={...t,type:(0,h.getJSONTypes)(t.type),schemaType:(0,h.getJSONTypes)(t.schemaType)};(0,m.eachItem)(r,0===n.type.length?e=>i.call(this,e,n):t=>n.type.forEach(e=>i.call(this,t,n,e)))}else(0,m.eachItem)(r,e=>i.call(this,e));return this}getKeyword(e){e=this.RULES.all[e];return"object"==typeof e?e.definition:!!e}removeKeyword(t){var e=this["RULES"];delete e.keywords[t],delete e.all[t];for(const n of e.rules){var r=n.rules.findIndex(e=>e.keyword===t);0<=r&&n.rules.splice(r,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:r=", ",dataVar:t="data"}={}){return e&&0!==e.length?e.map(e=>""+t+e.instancePath+" "+e.message).reduce((e,t)=>e+r+t):"No errors"}$dataMetaSchema(t,e){var r=this.RULES.all;t=JSON.parse(JSON.stringify(t));for(const o of e){let e=t;for(const i of o.split("/").slice(1))e=e[i];for(const a in r){var n,s=r[a];"object"==typeof s&&(s=s.definition["$data"],n=e[a],s&&n)&&(e[a]=c(n))}}return t}_removeAllSchemas(e,t){for(const n in e){var r=e[n];t&&!t.test(n)||("string"==typeof r?delete e[n]:r&&!r.meta&&(this._cache.delete(r.schema),delete e[n]))}}_addSchema(e,t,r,n=this.opts.validateSchema,s=this.opts.addUsedSchema){let o;var i=this.opts["schemaId"];if("object"==typeof e)o=e[i];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}var a,c=this._cache.get(e);return void 0===c&&(r=(0,d.normalizeId)(o||r),a=d.getSchemaRefs.call(this,e,r),c=new p.SchemaEnv({schema:e,schemaId:i,meta:t,baseId:r,localRefs:a}),this._cache.set(c.schema,c),s&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=c),n)&&this.validateSchema(e,!0),c}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):p.compileSchema.call(this,e),e.validate)return e.validate;throw new Error("ajv implementation error")}_compileMetaSchema(e){var t=this.opts;this.opts=this._metaOpts;try{p.compileSchema.call(this,e)}finally{this.opts=t}}}function a(e,t,r,n="error"){for(const o in e){var s=o;s in t&&this.logger[n](`${r}: option ${o}. `+e[s])}}function o(e){return e=(0,d.normalizeId)(e),this.schemas[e]||this.refs[e]}(e.default=S).ValidationError=s.default,S.MissingRefError=l.default;const O={log(){},warn(){},error(){}};const P=/^[a-z_$][a-z0-9_$:-]*$/i;function i(e,t,r){var n=null==t?void 0:t.post;if(r&&n)throw new Error('keyword with "post" flag cannot have "type"');var s=this["RULES"];let o=n?s.post:s.rules.find(({type:e})=>e===r);o||(o={type:r,rules:[]},s.rules.push(o)),s.keywords[e]=!0,t&&(n={keyword:e,definition:{...t,type:(0,h.getJSONTypes)(t.type),schemaType:(0,h.getJSONTypes)(t.schemaType)}},t.before?function(e,t,r){var n=e.rules.findIndex(e=>e.keyword===r);0<=n?e.rules.splice(n,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}.call(this,o,n,t.before):o.rules.push(n),s.all[e]=n,null!=(s=t.implements))&&s.forEach(e=>this.addKeyword(e))}const k={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function c(e){return{anyOf:[e,k]}}}}return fr}var bn,wn={},_n={},$n={};var En,Sn,On={};function Pn(){if(!En){En=1,Object.defineProperty(On,"__esModule",{value:!0}),On.callRef=On.getValidate=void 0;const g=cn(),d=O(),y=M(),v=$(),b=un(),w=I();var e={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:n}=e,{baseId:s,schemaEnv:o,validateName:i,opts:a,self:c}=n,l=o["root"];if(("#"===r||"#/"===r)&&s===l.baseId)return o===l?m(e,i,o,o.$async):(d=t.scopeValue("root",{ref:l}),m(e,(0,y._)`${d}.validate`,l,l.$async));var u,p,f,d=b.resolveRef.call(c,l,s,r);if(void 0===d)throw new g.default(n.opts.uriResolver,s,r);if(!(d instanceof b.SchemaEnv))return u=d,p=t.scopeValue("schema",!0===a.code.source?{ref:u,code:(0,y.stringify)(u)}:{ref:u}),f=t.name("valid"),u=e.subschema({schema:u,dataTypes:[],schemaPath:y.nil,topSchemaRef:p,errSchemaPath:r},f),e.mergeEvaluated(u),void e.ok(f);u=h(e,p=d),m(e,u,p,p.$async)}};function h(e,t){e=e.gen;return t.validate?e.scopeValue("validate",{ref:t.validate}):(0,y._)`${e.scopeValue("wrapper",{ref:t})}.validate`}function m(e,t,n,r){const{gen:s,it:o}=e,{allErrors:i,schemaEnv:a,opts:c}=o,l=c.passContext?v.default.this:y.nil;if(r){if(!a.$async)throw new Error("async schema referenced by sync schema");const f=s.let("valid");s.try(()=>{s.code((0,y._)`await ${(0,d.callValidateCode)(e,t,l)}`),p(t),i||s.assign(f,!0)},e=>{s.if((0,y._)`!(${e} instanceof ${o.ValidationError})`,()=>s.throw(e)),u(e),i||s.assign(f,!1)}),e.ok(f)}else e.result((0,d.callValidateCode)(e,t,l),()=>p(t),()=>u(t));function u(e){e=(0,y._)`${e}.errors`;s.assign(v.default.vErrors,(0,y._)`${v.default.vErrors} === null ? ${e} : ${v.default.vErrors}.concat(${e})`),s.assign(v.default.errors,(0,y._)`${v.default.vErrors}.length`)}function p(e){var t,r;o.opts.unevaluated&&(t=null==(t=null==n?void 0:n.validate)?void 0:t.evaluated,!0!==o.props&&(t&&!t.dynamicProps?void 0!==t.props&&(o.props=w.mergeEvaluated.props(s,t.props,o.props)):(r=s.var("props",(0,y._)`${e}.evaluated.props`),o.props=w.mergeEvaluated.props(s,r,o.props,y.Name))),!0!==o.items)&&(t&&!t.dynamicItems?void 0!==t.items&&(o.items=w.mergeEvaluated.items(s,t.items,o.items)):(r=s.var("items",(0,y._)`${e}.evaluated.items`),o.items=w.mergeEvaluated.items(s,r,o.items,y.Name)))}}On.getValidate=h,On.callRef=m,On.default=e}return On}function kn(){var e,t;return Sn||(Sn=1,Object.defineProperty(_n,"__esModule",{value:!0}),bn||(bn=1,Object.defineProperty($n,"__esModule",{value:!0}),$n.default={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}}),t=$n,e=Pn(),t=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",t.default,e.default],_n.default=t),_n}var An,Nn={},xn={};var Tn,jn={};var Cn,Mn,In={},Rn={};function Ln(){if(!Mn){Mn=1,Object.defineProperty(In,"__esModule",{value:!0});const o=M(),i=I(),a=(Cn||(Cn=1,Object.defineProperty(Rn,"__esModule",{value:!0}),(Rn.default=e).code='require("ajv/dist/runtime/ucs2length").default'),Rn);function e(e){var t,r=e.length;let n=0,s=0;for(;s<r;)n++,55296<=(t=e.charCodeAt(s++))&&t<=56319&&s<r&&56320==(64512&e.charCodeAt(s))&&s++;return n}In.default={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxLength"===e?"more":"fewer";return(0,o.str)`must NOT have ${e} than ${t} characters`},params:({schemaCode:e})=>(0,o._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:n,it:s}=e,t="maxLength"===t?o.operators.GT:o.operators.LT,s=!1===s.opts.unicode?(0,o._)`${r}.length`:(0,o._)`${(0,i.useFunc)(e.gen,a.default)}(${r})`;e.fail$data((0,o._)`${s} ${t} ${n}`)}}}return In}var Dn,Fn={};var Vn,Bn={};var Un,Yn={};function zn(){if(!Un){Un=1,Object.defineProperty(Yn,"__esModule",{value:!0});const y=O(),v=M(),b=I();Yn.default={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>(0,v.str)`must have required property '${e}'`,params:({params:{missingProperty:e}})=>(0,v._)`{missingProperty: ${e}}`},code(r){const{gen:n,schema:e,schemaCode:s,data:o,$data:t,it:i}=r,a=i["opts"];if(t||0!==e.length){const f=e.length>=a.loopRequired;if(i.allErrors)if(f||t)r.block$data(v.nil,p);else for(const d of e)(0,y.checkReportMissingProp)(r,d);else{const h=n.let("missing");if(f||t){const m=n.let("valid",!0);r.block$data(m,()=>{return e=h,t=m,r.setParams({missingProperty:e}),void n.forOf(e,s,()=>{n.assign(t,(0,y.propertyInData)(n,o,e,a.ownProperties)),n.if((0,v.not)(t),()=>{r.error(),n.break()})},v.nil);var e,t}),r.ok(m)}else n.if((0,y.checkMissingProp)(r,e,h)),(0,y.reportMissingProp)(r,h),n.else()}if(a.strictRequired){var c,l=r.parentSchema.properties,u=r.it["definedProperties"];for(const g of e)void 0!==(null==l?void 0:l[g])||u.has(g)||(c=i.schemaEnv.baseId+i.errSchemaPath,c=`required property "${g}" is not defined at "${c}" (strictRequired)`,(0,b.checkStrictMode)(i,c,i.opts.strictRequired))}function p(){n.forOf("prop",s,e=>{r.setParams({missingProperty:e}),n.if((0,y.noPropertyInData)(n,o,e,a.ownProperties),()=>r.error())})}}}}}return Yn}var qn,Kn={};var Wn,Jn,Gn={},Hn={};function Qn(){var e;return Wn||(Wn=1,Object.defineProperty(Hn,"__esModule",{value:!0}),(e=Jr()).code='require("ajv/dist/runtime/equal").default',Hn.default=e),Hn}function Zn(){if(!Jn){Jn=1,Object.defineProperty(Gn,"__esModule",{value:!0});const p=Lr(),f=M(),s=I(),d=Qn();Gn.default={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>(0,f.str)`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>(0,f._)`{i: ${e}, j: ${t}}`},code(o){const{gen:i,data:a,$data:e,schema:t,parentSchema:r,schemaCode:n,it:c}=o;if(e||t){const l=i.let("valid"),u=r.items?(0,p.getSchemaTypes)(r.items):[];o.block$data(l,function(){const e=i.let("i",(0,f._)`${a}.length`),t=i.let("j");o.setParams({i:e,j:t}),i.assign(l,!0),i.if((0,f._)`${e} > 1`,()=>(0<u.length&&!u.some(e=>"object"===e||"array"===e)?function(e,t){const r=i.name("item"),n=(0,p.checkDataTypes)(u,r,c.opts.strictNumbers,p.DataType.Wrong),s=i.const("indices",(0,f._)`{}`);i.for((0,f._)`;${e}--;`,()=>{i.let(r,(0,f._)`${a}[${e}]`),i.if(n,(0,f._)`continue`),1<u.length&&i.if((0,f._)`typeof ${r} == "string"`,(0,f._)`${r} += "_"`),i.if((0,f._)`typeof ${s}[${r}] == "number"`,()=>{i.assign(t,(0,f._)`${s}[${r}]`),o.error(),i.assign(l,!1).break()}).code((0,f._)`${s}[${r}] = ${e}`)})}:function(e,t){const r=(0,s.useFunc)(i,d.default),n=i.name("outer");i.label(n).for((0,f._)`;${e}--;`,()=>i.for((0,f._)`${t} = ${e}; ${t}--;`,()=>i.if((0,f._)`${r}(${a}[${e}], ${a}[${t}])`,()=>{o.error(),i.assign(l,!1).break(n)})))})(e,t))},(0,f._)`${n} === false`),o.ok(l)}}}}return Gn}var Xn,es={};var ts,rs,ns={};function ss(){if(!ts){ts=1,Object.defineProperty(ns,"__esModule",{value:!0});const f=M(),d=I(),h=Qn();ns.default={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>(0,f._)`{allowedValues: ${e}}`},code(e){const{gen:t,data:s,$data:r,schema:o,schemaCode:n,it:i}=e;if(!r&&0===o.length)throw new Error("enum must have non-empty array");var a=o.length>=i.opts.loopEnum;let c;const l=()=>null!==c&&void 0!==c?c:c=(0,d.useFunc)(t,h.default);let u;if(a||r)u=t.let("valid"),e.block$data(u,function(){t.assign(u,!1),t.forOf("v",n,e=>t.if((0,f._)`${l()}(${s}, ${e})`,()=>t.assign(u,!0).break()))});else{if(!Array.isArray(o))throw new Error("ajv implementation error");const p=t.const("vSchema",n);u=(0,f.or)(...o.map((e,t)=>{return r=p,t=t,"object"==typeof(n=o[t])&&null!==n?(0,f._)`${l()}(${s}, ${r}[${t}])`:(0,f._)`${s} === ${n}`;var r,n}))}e.pass(u)}}}return ns}function os(){var e,t,r,n,s,o,i,a,c,l;return rs||(rs=1,Object.defineProperty(Nn,"__esModule",{value:!0}),l=function(){if(!An){An=1,Object.defineProperty(xn,"__esModule",{value:!0});const s=M();var e=s.operators;const o={maximum:{okStr:"<=",ok:e.LTE,fail:e.GT},minimum:{okStr:">=",ok:e.GTE,fail:e.LT},exclusiveMaximum:{okStr:"<",ok:e.LT,fail:e.GTE},exclusiveMinimum:{okStr:">",ok:e.GT,fail:e.LTE}};e={message:({keyword:e,schemaCode:t})=>(0,s.str)`must be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>(0,s._)`{comparison: ${o[e].okStr}, limit: ${t}}`},e={keyword:Object.keys(o),type:"number",schemaType:"number",$data:!0,error:e,code(e){var{keyword:t,data:r,schemaCode:n}=e;e.fail$data((0,s._)`${r} ${o[t].fail} ${n} || isNaN(${r})`)}};xn.default=e}return xn}(),e=function(){if(!Tn){Tn=1,Object.defineProperty(jn,"__esModule",{value:!0});const o=M();jn.default={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>(0,o.str)`must be multiple of ${e}`,params:({schemaCode:e})=>(0,o._)`{multipleOf: ${e}}`},code(e){var{gen:t,data:r,schemaCode:n,it:s}=e,s=s.opts.multipleOfPrecision,t=t.let("res"),s=s?(0,o._)`Math.abs(Math.round(${t}) - ${t}) > 1e-${s}`:(0,o._)`${t} !== parseInt(${t})`;e.fail$data((0,o._)`(${n} === 0 || (${t} = ${r}/${n}, ${s}))`)}}}return jn}(),t=Ln(),r=function(){if(!Dn){Dn=1,Object.defineProperty(Fn,"__esModule",{value:!0});const i=O(),a=M();Fn.default={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>(0,a.str)`must match pattern "${e}"`,params:({schemaCode:e})=>(0,a._)`{pattern: ${e}}`},code(e){var{data:t,$data:r,schema:n,schemaCode:s,it:o}=e,o=o.opts.unicodeRegExp?"u":"",r=r?(0,a._)`(new RegExp(${s}, ${o}))`:(0,i.usePattern)(e,n);e.fail$data((0,a._)`!${r}.test(${t})`)}}}return Fn}(),n=function(){if(!Vn){Vn=1,Object.defineProperty(Bn,"__esModule",{value:!0});const s=M();Bn.default={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxProperties"===e?"more":"fewer";return(0,s.str)`must NOT have ${e} than ${t} properties`},params:({schemaCode:e})=>(0,s._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:n}=e,t="maxProperties"===t?s.operators.GT:s.operators.LT;e.fail$data((0,s._)`Object.keys(${r}).length ${t} ${n}`)}}}return Bn}(),s=zn(),o=function(){if(!qn){qn=1,Object.defineProperty(Kn,"__esModule",{value:!0});const s=M();Kn.default={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxItems"===e?"more":"fewer";return(0,s.str)`must NOT have ${e} than ${t} items`},params:({schemaCode:e})=>(0,s._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:n}=e,t="maxItems"===t?s.operators.GT:s.operators.LT;e.fail$data((0,s._)`${r}.length ${t} ${n}`)}}}return Kn}(),i=Zn(),a=function(){if(!Xn){Xn=1,Object.defineProperty(es,"__esModule",{value:!0});const i=M(),a=I(),c=Qn();es.default={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>(0,i._)`{allowedValue: ${e}}`},code(e){var{gen:t,data:r,$data:n,schemaCode:s,schema:o}=e;n||o&&"object"==typeof o?e.fail$data((0,i._)`!${(0,a.useFunc)(t,c.default)}(${r}, ${s})`):e.fail((0,i._)`${o} !== ${r}`)}}}return es}(),c=ss(),l=[l.default,e.default,t.default,r.default,n.default,s.default,o.default,i.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},a.default,c.default],Nn.default=l),Nn}var is,as={},cs={};function ls(){if(!is){is=1,Object.defineProperty(cs,"__esModule",{value:!0}),cs.validateAdditionalItems=void 0;const l=M(),u=I();var e={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>(0,l.str)`must NOT have more than ${e} items`,params:({params:{len:e}})=>(0,l._)`{limit: ${e}}`},code(e){var{parentSchema:t,it:r}=e,t=t["items"];Array.isArray(t)?n(e,t):(0,u.checkStrictMode)(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function n(r,e){const{gen:n,schema:t,data:s,keyword:o,it:i}=r,a=(i.items=!0,n.const("len",(0,l._)`${s}.length`));if(!1===t)r.setParams({len:e.length}),r.pass((0,l._)`${a} <= ${e.length}`);else if("object"==typeof t&&!(0,u.alwaysValidSchema)(i,t)){const c=n.var("valid",(0,l._)`${a} <= ${e.length}`);n.if((0,l.not)(c),()=>{var t;t=c,n.forRange("i",e.length,a,e=>{r.subschema({keyword:o,dataProp:e,dataPropType:u.Type.Num},t),i.allErrors||n.if((0,l.not)(t),()=>n.break())})}),r.ok(c)}}cs.validateAdditionalItems=n,cs.default=e}return cs}var us,ps,fs={},ds={};function hs(){if(!us){us=1,Object.defineProperty(ds,"__esModule",{value:!0}),ds.validateTuple=void 0;const h=M(),m=I(),s=O();var e={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){var{schema:t,it:r}=e;if(Array.isArray(t))return n(e,"additionalItems",t);r.items=!0,(0,m.alwaysValidSchema)(r,t)||e.ok((0,s.validateArray)(e))}};function n(r,e,t=r.schema){const{gen:n,parentSchema:s,data:o,keyword:i,it:a}=r;var c=s,{opts:l,errSchemaPath:u}=a,p=t.length,c=p===c.minItems&&(p===c.maxItems||!1===c[e]);l.strictTuples&&!c&&(c=`"${i}" is ${p}-tuple, but minItems or maxItems/${e} are not specified or different at path "${u}"`,(0,m.checkStrictMode)(a,c,l.strictTuples)),a.opts.unevaluated&&t.length&&!0!==a.items&&(a.items=m.mergeEvaluated.items(n,t.length,a.items));const f=n.name("valid"),d=n.const("len",(0,h._)`${o}.length`);t.forEach((e,t)=>{(0,m.alwaysValidSchema)(a,e)||(n.if((0,h._)`${d} > ${t}`,()=>r.subschema({keyword:i,schemaProp:t,dataProp:t},f)),r.ok(f))})}ds.validateTuple=n,ds.default=e}return ds}var ms,gs={};var ys,vs={};function bs(){if(!ys){ys=1,Object.defineProperty(vs,"__esModule",{value:!0});const h=M(),m=I();vs.default={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?(0,h.str)`must contain at least ${e} valid item(s)`:(0,h.str)`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?(0,h._)`{minContains: ${e}}`:(0,h._)`{minContains: ${e}, maxContains: ${t}}`},code(n){const{gen:s,schema:e,parentSchema:t,data:r,it:o}=n;let i,a;var{minContains:c,maxContains:l}=t;o.opts.next?(i=void 0===c?1:c,a=l):i=1;const u=s.const("len",(0,h._)`${r}.length`);if(n.setParams({min:i,max:a}),void 0===a&&0===i)(0,m.checkStrictMode)(o,'"minContains" == 0 without "maxContains": "contains" keyword ignored');else if(void 0!==a&&i>a)(0,m.checkStrictMode)(o,'"minContains" > "maxContains" is always invalid'),n.fail();else if((0,m.alwaysValidSchema)(o,e)){let e=(0,h._)`${u} >= ${i}`;void 0!==a&&(e=(0,h._)`${e} && ${u} <= ${a}`),void n.pass(e)}else{o.items=!0;const d=s.name("valid");function p(){const e=s.name("_valid"),t=s.let("count",0);f(e,()=>s.if(e,()=>{return e=t,s.code((0,h._)`${e}++`),void(void 0===a?s.if((0,h._)`${e} >= ${i}`,()=>s.assign(d,!0).break()):(s.if((0,h._)`${e} > ${a}`,()=>s.assign(d,!1).break()),1===i?s.assign(d,!0):s.if((0,h._)`${e} >= ${i}`,()=>s.assign(d,!0))));var e}))}function f(t,r){s.forRange("i",0,u,e=>{n.subschema({keyword:"contains",dataProp:e,dataPropType:m.Type.Num,compositeRule:!0},t),r()})}void 0===a&&1===i?f(d,()=>s.if(d,()=>s.break())):0===i?(s.let(d,!0),void 0!==a&&s.if((0,h._)`${r}.length > 0`,p)):(s.let(d,!1),p()),n.result(d,()=>n.reset())}}}}return vs}var ws,_s={};function $s(){if(!ws){ws=1;{var e=_s;Object.defineProperty(e,"__esModule",{value:!0}),e.validateSchemaDeps=e.validatePropertyDeps=e.error=void 0;const l=M(),c=I(),u=O();e.error={message:({params:{property:e,depsCount:t,deps:r}})=>{t=1===t?"property":"properties";return(0,l.str)`must have ${t} ${r} when property ${e} is present`},params:({params:{property:e,depsCount:t,deps:r,missingProperty:n}})=>(0,l._)`{property: ${e},
    missingProperty: ${n},
    depsCount: ${t},
    deps: ${r}}`};var t={keyword:"dependencies",type:"object",schemaType:"object",error:e.error,code(e){var[t,r]=function({schema:e}){var t={},r={};for(const n in e)"__proto__"!==n&&((Array.isArray(e[n])?t:r)[n]=e[n]);return[t,r]}(e);n(e,t),s(e,r)}};function n(t,e=t.schema){var{gen:r,data:n,it:s}=t;if(0!==Object.keys(e).length){var o,i=r.let("missing");for(const a in e){const c=e[a];0!==c.length&&(o=(0,u.propertyInData)(r,n,a,s.opts.ownProperties),t.setParams({property:a,depsCount:c.length,deps:c.join(", ")}),s.allErrors?r.if(o,()=>{for(const e of c)(0,u.checkReportMissingProp)(t,e)}):(r.if((0,l._)`${o} && (${(0,u.checkMissingProp)(t,c,i)})`),(0,u.reportMissingProp)(t,i),r.else()))}}}function s(t,e=t.schema){const{gen:r,data:n,keyword:s,it:o}=t,i=r.name("valid");for(const a in e)(0,c.alwaysValidSchema)(o,e[a])||(r.if((0,u.propertyInData)(r,n,a,o.opts.ownProperties),()=>{var e=t.subschema({keyword:s,schemaProp:a},i);t.mergeValidEvaluated(e,i)},()=>r.var(i,!0)),t.ok(i))}e.validatePropertyDeps=n,e.validateSchemaDeps=s,e.default=t}}return _s}var Es,Ss={};var Os,Ps={};function ks(){if(!Os){Os=1,Object.defineProperty(Ps,"__esModule",{value:!0});const h=O(),m=M(),g=$(),y=I();Ps.default={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>(0,m._)`{additionalProperty: ${e.additionalProperty}}`},code(n){const{gen:s,schema:r,parentSchema:o,data:t,errsCount:e,it:i}=n;if(!e)throw new Error("ajv implementation error");const{allErrors:a,opts:c}=i;if(i.props=!0,"all"===c.removeAdditional||!(0,y.alwaysValidSchema)(i,r)){const f=(0,h.allSchemaProperties)(o.properties),d=(0,h.allSchemaProperties)(o.patternProperties);function l(e){s.code((0,m._)`delete ${t}[${e}]`)}function u(e){var t;"all"===c.removeAdditional||c.removeAdditional&&!1===r?l(e):!1===r?(n.setParams({additionalProperty:e}),n.error(),a||s.break()):"object"!=typeof r||(0,y.alwaysValidSchema)(i,r)||(t=s.name("valid"),"failing"===c.removeAdditional?(p(e,t,!1),s.if((0,m.not)(t),()=>{n.reset(),l(e)})):(p(e,t),a||s.if((0,m.not)(t),()=>s.break())))}function p(e,t,r){e={keyword:"additionalProperties",dataProp:e,dataPropType:y.Type.Str};!1===r&&Object.assign(e,{compositeRule:!0,createErrors:!1,allErrors:!1}),n.subschema(e,t)}s.forIn("key",t,e=>{f.length||d.length?s.if(function(t){let e;{var r;e=8<f.length?(r=(0,y.schemaRefOrVal)(i,o.properties,"properties"),(0,h.isOwnProperty)(s,r,t)):f.length?(0,m.or)(...f.map(e=>(0,m._)`${t} === ${e}`)):m.nil}d.length&&(e=(0,m.or)(e,...d.map(e=>(0,m._)`${(0,h.usePattern)(n,e)}.test(${t})`)));return(0,m.not)(e)}(e),()=>u(e)):u(e)}),n.ok((0,m._)`${e} === ${g.default.errors}`)}}}}return Ps}var As,Ns={};function xs(){if(!As){As=1,Object.defineProperty(Ns,"__esModule",{value:!0});const f=tn(),d=O(),h=I(),m=ks();Ns.default={keyword:"properties",type:"object",schemaType:"object",code(t){const{gen:e,schema:r,parentSchema:n,data:s,it:o}=t;"all"===o.opts.removeAdditional&&void 0===n.additionalProperties&&m.default.code(new f.KeywordCxt(o,m.default,"additionalProperties"));var i=(0,d.allSchemaProperties)(r);for(const l of i)o.definedProperties.add(l);o.opts.unevaluated&&i.length&&!0!==o.props&&(o.props=h.mergeEvaluated.props(e,(0,h.toHash)(i),o.props));var a,i=i.filter(e=>!(0,h.alwaysValidSchema)(o,r[e]));if(0!==i.length){const u=e.name("valid");for(const p of i)a=p,o.opts.useDefaults&&!o.compositeRule&&void 0!==r[a].default?c(p):(e.if((0,d.propertyInData)(e,s,p,o.opts.ownProperties)),c(p),o.allErrors||e.else().var(u,!0),e.endIf()),t.it.definedProperties.add(p),t.ok(u);function c(e){t.subschema({keyword:"properties",schemaProp:e,dataProp:e},u)}}}}}return Ns}var Ts,js={};function Cs(){if(!Ts){Ts=1,Object.defineProperty(js,"__esModule",{value:!0});const g=O(),y=M(),v=I(),b=I();js.default={keyword:"patternProperties",type:"object",schemaType:"object",code(n){const{gen:s,schema:t,data:e,parentSchema:r,it:o}=n;var i=o["opts"];const a=(0,g.allSchemaProperties)(t),c=a.filter(e=>(0,v.alwaysValidSchema)(o,t[e]));if(0!==a.length&&(c.length!==a.length||o.opts.unevaluated&&!0!==o.props)){const p=i.strictSchema&&!i.allowMatchingProperties&&r.properties,f=s.name("valid"),d=(!0===o.props||o.props instanceof y.Name||(o.props=(0,b.evaluatedPropsToName)(s,o.props)),o)["props"];for(const h of a){if(p){l=void 0;var l=h;for(const m in p)new RegExp(l).test(m)&&(0,v.checkStrictMode)(o,`property ${m} matches pattern ${l} (use allowMatchingProperties)`)}o.allErrors?u(h):(s.var(f,!0),u(h),s.if(f))}function u(r){s.forIn("key",e,t=>{s.if((0,y._)`${(0,g.usePattern)(n,r)}.test(${t})`,()=>{var e=c.includes(r);e||n.subschema({keyword:"patternProperties",schemaProp:r,dataProp:t,dataPropType:b.Type.Str},f),o.opts.unevaluated&&!0!==d?s.assign((0,y._)`${d}[${t}]`,!0):e||o.allErrors||s.if((0,y.not)(f),()=>s.break())})})}}}}}return js}var Ms,Is={};var Rs,Ls={};var Ds,Fs={};var Vs,Bs={};var Us,Ys={};function zs(){if(!Us){Us=1,Object.defineProperty(Ys,"__esModule",{value:!0});const p=M(),f=I();function u(e,t){t=e.schema[t];return void 0!==t&&!(0,f.alwaysValidSchema)(e,t)}Ys.default={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>(0,p.str)`must match "${e.ifClause}" schema`,params:({params:e})=>(0,p._)`{failingKeyword: ${e.ifClause}}`},code(n){const{gen:s,parentSchema:e,it:t}=n;void 0===e.then&&void 0===e.else&&(0,f.checkStrictMode)(t,'"if" without "then" and "else" is ignored');var r,o=u(t,"then"),i=u(t,"else");if(o||i){const c=s.let("valid",!0),l=s.name("_valid");function a(t,r){return()=>{var e=n.subschema({keyword:t},l);s.assign(c,l),n.mergeValidEvaluated(e,c),r?s.assign(r,(0,p._)`${t}`):n.setParams({ifClause:t})}}r=n.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},l),n.mergeEvaluated(r),n.reset(),o&&i?(r=s.let("ifClause"),n.setParams({ifClause:r}),s.if(l,a("then",r),a("else",r))):o?s.if(l,a("then")):s.if((0,p.not)(l),a("else")),n.pass(c,()=>n.error(!0))}}}}return Ys}var qs,Ks,Ws={};function Js(){if(!Ks){Ks=1,Object.defineProperty(as,"__esModule",{value:!0});const r=ls(),n=function(){if(!ps){ps=1,Object.defineProperty(fs,"__esModule",{value:!0});const t=hs();fs.default={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>(0,t.validateTuple)(e,"items")}}return fs}(),s=hs(),o=function(){if(!ms){ms=1,Object.defineProperty(gs,"__esModule",{value:!0});const t=M(),s=I(),o=O(),i=ls();gs.default={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>(0,t.str)`must NOT have more than ${e} items`,params:({params:{len:e}})=>(0,t._)`{limit: ${e}}`},code(e){var{schema:t,parentSchema:r,it:n}=e,r=r["prefixItems"];n.items=!0,(0,s.alwaysValidSchema)(n,t)||(r?(0,i.validateAdditionalItems)(e,r):e.ok((0,o.validateArray)(e)))}}}return gs}(),i=bs(),a=$s(),c=function(){if(!Es){Es=1,Object.defineProperty(Ss,"__esModule",{value:!0});const i=M(),a=I();Ss.default={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>(0,i._)`{propertyName: ${e.propertyName}}`},code(t){const{gen:r,schema:e,data:n,it:s}=t;if(!(0,a.alwaysValidSchema)(s,e)){const o=r.name("valid");r.forIn("key",n,e=>{t.setParams({propertyName:e}),t.subschema({keyword:"propertyNames",data:e,dataTypes:["string"],propertyName:e,compositeRule:!0},o),r.if((0,i.not)(o),()=>{t.error(!0),s.allErrors||r.break()})}),t.ok(o)}}}}return Ss}(),l=ks(),u=xs(),p=Cs(),f=function(){if(!Ms){Ms=1,Object.defineProperty(Is,"__esModule",{value:!0});const s=I();Is.default={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){var{gen:t,schema:r,it:n}=e;(0,s.alwaysValidSchema)(n,r)?e.fail():(n=t.name("valid"),e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},n),e.failResult(n,()=>e.reset(),()=>e.error()))},error:{message:"must NOT be valid"}}}return Is}(),d=(Rs||(Rs=1,Object.defineProperty(Ls,"__esModule",{value:!0}),e={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:O().validateUnion,error:{message:"must match a schema in anyOf"}},Ls.default=e),Ls);var e;const h=function(){if(!Ds){Ds=1,Object.defineProperty(Fs,"__esModule",{value:!0});const l=M(),u=I();Fs.default={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>(0,l._)`{passingSchemas: ${e.passing}}`},code(n){const{gen:s,schema:e,parentSchema:t,it:o}=n;if(!Array.isArray(e))throw new Error("ajv implementation error");if(!o.opts.discriminator||!t.discriminator){const r=e,i=s.let("valid",!1),a=s.let("passing",null),c=s.name("_valid");n.setParams({passing:a}),s.block(function(){r.forEach((e,t)=>{let r;(0,u.alwaysValidSchema)(o,e)?s.var(c,!0):r=n.subschema({keyword:"oneOf",schemaProp:t,compositeRule:!0},c),0<t&&s.if((0,l._)`${c} && ${i}`).assign(i,!1).assign(a,(0,l._)`[${a}, ${t}]`).else(),s.if(c,()=>{s.assign(i,!0),s.assign(a,t),r&&n.mergeEvaluated(r,l.Name)})})}),n.result(i,()=>n.reset(),()=>n.error(!0))}}}}return Fs}(),m=function(){if(!Vs){Vs=1,Object.defineProperty(Bs,"__esModule",{value:!0});const o=I();Bs.default={keyword:"allOf",schemaType:"array",code(r){const{gen:e,schema:t,it:n}=r;if(!Array.isArray(t))throw new Error("ajv implementation error");const s=e.name("valid");t.forEach((e,t)=>{(0,o.alwaysValidSchema)(n,e)||(e=r.subschema({keyword:"allOf",schemaProp:t},s),r.ok(s),r.mergeEvaluated(e))})}}}return Bs}(),g=zs(),y=function(){if(!qs){qs=1,Object.defineProperty(Ws,"__esModule",{value:!0});const n=I();Ws.default={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&(0,n.checkStrictMode)(r,`"${e}" without "if" is ignored`)}}}return Ws}();as.default=function(e=!1){var t=[f.default,d.default,h.default,m.default,g.default,y.default,c.default,l.default,a.default,u.default,p.default];return e?t.push(n.default,o.default):t.push(r.default,s.default),t.push(i.default),t}}return as}var Gs,Hs,Qs={},Zs={};function Xs(){if(!Gs){Gs=1,Object.defineProperty(Zs,"__esModule",{value:!0});const _=M();Zs.default={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>(0,_.str)`must match format "${e}"`,params:({schemaCode:e})=>(0,_._)`{format: ${e}}`},code(e,t){const{gen:r,data:n,$data:s,schema:o,schemaCode:i,it:a}=e,{opts:c,errSchemaPath:l,schemaEnv:u,self:p}=a;if(c.validateFormats)if(s){const d=r.scopeValue("formats",{ref:p.formats,code:c.code.formats}),h=r.const("fDef",(0,_._)`${d}[${i}]`),m=r.let("fType"),g=r.let("format");r.if((0,_._)`typeof ${h} == "object" && !(${h} instanceof RegExp)`,()=>r.assign(m,(0,_._)`${h}.type || "string"`).assign(g,(0,_._)`${h}.validate`),()=>r.assign(m,(0,_._)`"string"`).assign(g,h)),e.fail$data((0,_.or)(!1===c.strictSchema?_.nil:(0,_._)`${i} && !${g}`,function(){var e=u.$async?(0,_._)`(${h}.async ? await ${g}(${n}) : ${g}(${n}))`:(0,_._)`${g}(${n})`,e=(0,_._)`(typeof ${g} == "function" ? ${e} : ${g}.test(${n}))`;return(0,_._)`${g} && ${g} !== true && ${m} === ${t} && !${e}`}()))}else{const y=p.formats[o];if(y){if(!0!==y){const[v,b,w]=function(e){var t=e instanceof RegExp?(0,_.regexpCode)(e):c.code.formats?(0,_._)`${c.code.formats}${(0,_.getProperty)(o)}`:void 0,t=r.scopeValue("formats",{key:o,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,t]:[e.type||"string",e.validate,(0,_._)`${t}.validate`]}(y);v===t&&e.pass(function(){if("object"!=typeof y||y instanceof RegExp||!y.async)return"function"==typeof b?(0,_._)`${w}(${n})`:(0,_._)`${w}.test(${n})`;if(u.$async)return(0,_._)`await ${w}(${n})`;throw new Error("async format in sync schema")}())}}else{if(!1!==c.strictSchema)throw new Error(f());function f(){return`unknown format "${o}" ignored in schema at path "${l}"`}p.logger.warn(f())}}}}}return Zs}var eo,to,ro={};function no(){var e,t,r,n,s;return to||(to=1,Object.defineProperty(wn,"__esModule",{value:!0}),s=kn(),e=os(),t=Js(),Hs||(Hs=1,Object.defineProperty(Qs,"__esModule",{value:!0}),r=[Xs().default],Qs.default=r),r=Qs,eo||(eo=1,Object.defineProperty(ro,"__esModule",{value:!0}),ro.contentVocabulary=ro.metadataVocabulary=void 0,ro.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],ro.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"]),n=ro,s=[s.default,e.default,(0,t.default)(),r.default,n.metadataVocabulary,n.contentVocabulary],wn.default=s),wn}var so,oo,io={},ao={};function co(){if(!oo){oo=1,Object.defineProperty(io,"__esModule",{value:!0});const i=M(),a=(so||(so=1,e=ao,Object.defineProperty(e,"__esModule",{value:!0}),e.DiscrError=void 0,(e=e.DiscrError||(e.DiscrError={})).Tag="tag",e.Mapping="mapping"),ao);var e;const f=un(),d=I();io.default={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===a.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>(0,i._)`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(r){const{gen:n,data:e,schema:t,parentSchema:c,it:l}=r,u=c["oneOf"];if(!l.opts.discriminator)throw new Error("discriminator: requires discriminator option");const p=t.propertyName;if("string"!=typeof p)throw new Error("discriminator: requires propertyName");if(t.mapping)throw new Error("discriminator: mapping is not supported");if(!u)throw new Error("discriminator: requires oneOf keyword");const s=n.let("valid",!1),o=n.const("tag",(0,i._)`${e}${(0,i.getProperty)(p)}`);n.if((0,i._)`typeof ${o} == "string"`,()=>{var e=function(){const r={},n=i(c);let s=!0;for(let t=0;t<u.length;t++){let e=u[t];null!==e&&void 0!==e&&e.$ref&&!(0,d.schemaHasRulesButRef)(e,l.self.RULES)&&(e=f.resolveRef.call(l.self,l.schemaEnv.root,l.baseId,null===e||void 0===e?void 0:e.$ref))instanceof f.SchemaEnv&&(e=e.schema);var o=null==(o=null===e||void 0===e?void 0:e.properties)?void 0:o[p];if("object"!=typeof o)throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${p}"`);s=s&&(n||i(e)),!function(e,t){if(e.const)a(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${p}" must have "const" or "enum"`);for(const r of e.enum)a(r,t)}}(o,t)}if(s)return r;throw new Error(`discriminator: "${p}" must be required`);function i({required:e}){return Array.isArray(e)&&e.includes(p)}function a(e,t){if("string"!=typeof e||e in r)throw new Error(`discriminator: "${p}" values must be unique strings`);r[e]=t}}();n.if(!1);for(const t in e)n.elseIf((0,i._)`${o} === ${t}`),n.assign(s,function(e){var t=n.name("valid"),e=r.subschema({keyword:"oneOf",schemaProp:e},t);return r.mergeEvaluated(e,i.Name),t}(e[t]));n.else(),r.error(!1,{discrError:a.DiscrError.Mapping,tag:o,tagName:p}),n.endIf()},()=>r.error(!1,{discrError:a.DiscrError.Tag,tag:o,tagName:p})),r.ok(s)}}}return io}var lo,uo={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};function po(){if(!lo){lo=1;{var e=pr;var t=pr.exports;Object.defineProperty(t,"__esModule",{value:!0}),t.MissingRefError=t.ValidationError=t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;var r=vn();const a=no(),c=co(),l=uo,u=["/properties"],p="http://json-schema.org/draft-07/schema";class f extends r.default{_addVocabularies(){super._addVocabularies(),a.default.forEach(e=>this.addVocabulary(e)),this.opts.discriminator&&this.addKeyword(c.default)}_addDefaultMetaSchema(){var e;super._addDefaultMetaSchema(),this.opts.meta&&(e=this.opts.$data?this.$dataMetaSchema(l,u):l,this.addMetaSchema(e,p,!1),this.refs["http://json-schema.org/schema"]=p)}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(p)?p:void 0)}}e.exports=t=f,Object.defineProperty(t,"__esModule",{value:!0}),t.default=f;var n=tn(),s=(Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return n.KeywordCxt}}),M()),o=(Object.defineProperty(t,"_",{enumerable:!0,get:function(){return s._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return s.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return s.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return s.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return s.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return s.CodeGen}}),sn()),i=(Object.defineProperty(t,"ValidationError",{enumerable:!0,get:function(){return o.default}}),cn());Object.defineProperty(t,"MissingRefError",{enumerable:!0,get:function(){return i.default}})}}return pr.exports}var fo,ho={exports:{}};function mo(){if(!fo){fo=1;{var e=ho;var t=ho.exports;Object.defineProperty(t,"__esModule",{value:!0});const L=po(),D=M(),s=yr(),o=tn(),F=Ar(),V=$(),B="errorMessage",U=new L.Name("emUsed"),Y={required:"missingProperty",dependencies:"property",dependentRequired:"property"},i=/\$\{[^}]+\}/,a=/\$\{([^}]+)\}/g,c=/^""\s*\+\s*|\s*\+\s*""$/g;function r(R){return{keyword:B,schemaType:["string","object"],post:!0,code(O){const{gen:P,data:k,schema:A,schemaValue:N,it:x}=O;if(!1!==x.createErrors){const M=A,I=D.strConcat(V.default.instancePath,x.errorPath);function T(e,t){return D.and(L._`${e}.keyword !== ${B}`,L._`!${e}.${U}`,L._`${e}.instancePath === ${I}`,L._`${e}.keyword in ${t}`,L._`${e}.schemaPath.indexOf(${x.errSchemaPath}) === 0`,L._`/^\\/[^\\/]*$/.test(${e}.schemaPath.slice(${x.errSchemaPath.length}))`)}function j(e,t){var r=[];for(const s in e){var n=t[s];i.test(n)&&r.push([s,(n=n,L._`function(){return ${C(n)}}`)])}return P.object(...r)}function C(e){return i.test(e)?new s._Code(s.safeStringify(e).replace(a,(e,t)=>`" + JSON.stringify(${o.getData(t,x)}) + "`).replace(c,"")):L.stringify(e)}P.if(L._`${V.default.errors} > 0`,()=>{if("object"==typeof M){var[r,n]=function(e){let t,r;for(const o in e)if("properties"!==o&&"items"!==o){var n=e[o];if("object"==typeof n){var s=(t=t||{})[o]={};for(const i in n)s[i]=[]}else(r=r||{})[o]=[]}return[t,r]}(M);if(n){const a=P.const("emErrors",L.stringify(n)),c=P.const("templates",j(n,A)),l=(P.forOf("err",V.default.vErrors,e=>P.if(T(e,a),()=>P.code(L._`${a}[${e}.keyword].push(${e})`).assign(L._`${e}.${U}`,!0))),R)["singleError"];if(l){const u=P.let("message",L._`""`),p=P.let("paramsErrors",L._`[]`);e(e=>{P.if(u,()=>P.code(L._`${u} += ${"string"==typeof l?l:";"}`)),P.code(L._`${u} += ${t(e)}`),P.assign(p,L._`${p}.concat(${a}[${e}])`)}),F.reportError(O,{message:u,params:L._`{errors: ${p}}`})}else e(e=>F.reportError(O,{message:t(e),params:L._`{errors: ${a}[${e}]}`}));function e(t){P.forIn("key",a,e=>P.if(L._`${a}[${e}].length`,()=>t(e)))}function t(e){return L._`${e} in ${c} ? ${c}[${e}]() : ${N}[${e}]`}}if(r){var s=r;const f=P.const("emErrors",L.stringify(s)),d=[];for(const v in s)d.push([v,j(s[v],A[v])]);const h=P.const("templates",P.object(...d)),m=P.scopeValue("obj",{ref:Y,code:L.stringify(Y)}),g=P.let("emPropParams"),y=P.let("emParamsErrors");P.forOf("err",V.default.vErrors,e=>P.if(T(e,f),()=>{P.assign(g,L._`${m}[${e}.keyword]`),P.assign(y,L._`${f}[${e}.keyword][${e}.params[${g}]]`),P.if(y,()=>P.code(L._`${y}.push(${e})`).assign(L._`${e}.${U}`,!0))})),P.forIn("key",f,r=>P.forIn("keyProp",L._`${f}[${r}]`,t=>{P.assign(y,L._`${f}[${r}][${t}]`),P.if(L._`${y}.length`,()=>{var e=P.const("tmpl",L._`${h}[${r}] && ${h}[${r}][${t}]`);F.reportError(O,{message:L._`${e} ? ${e}() : ${N}[${r}][${t}]`,params:L._`{errors: ${y}}`})})}))}{n=function({properties:e,items:t}){var r={};if(e){r.props={};for(const n in e)r.props[n]=[]}if(t){r.items={};for(let e=0;e<t.length;e++)r.items[e]=[]}return r}(M);const{props:b,items:w}=n;if(b||w){n=L._`typeof ${k} == "object"`,r=L._`Array.isArray(${k})`;const _=P.let("emErrors");let e,t;const $=P.let("templates");function o(e,t){P.assign(_,L.stringify(e)),P.assign($,j(e,t))}b&&w?(e=P.let("emChildKwd"),P.if(n),P.if(r,()=>{o(w,A.items),P.assign(e,L.str`items`)},()=>{o(b,A.properties),P.assign(e,L.str`properties`)}),t=L._`[${e}]`):w?(P.if(r),o(w,A.items),t=L._`.items`):b&&(P.if(D.and(n,D.not(r))),o(b,A.properties),t=L._`.properties`),P.forOf("err",V.default.vErrors,t=>{var r,n,s;r=t,n=_,s=e=>P.code(L._`${_}[${e}].push(${t})`).assign(L._`${t}.${U}`,!0),P.if(D.and(L._`${r}.keyword !== ${B}`,L._`!${r}.${U}`,L._`${r}.instancePath.indexOf(${I}) === 0`),()=>{var e=P.scopeValue("pattern",{ref:/^\/([^/]*)(?:\/|$)/,code:L._`new RegExp("^\\\/([^/]*)(?:\\\/|$)")`}),e=P.const("emMatches",L._`${e}.exec(${r}.instancePath.slice(${I}.length))`);const t=P.const("emChild",L._`${e} && ${e}[1].replace(/~1/g, "/").replace(/~0/g, "~")`);P.if(L._`${t} !== undefined && ${t} in ${n}`,()=>s(t))})}),P.forIn("key",_,e=>P.if(L._`${_}[${e}].length`,()=>{F.reportError(O,{message:L._`${e} in ${$} ? ${$}[${e}]() : ${N}${t}[${e}]`,params:L._`{errors: ${_}[${e}]}`}),P.assign(L._`${V.default.vErrors}[${V.default.errors}-1].instancePath`,L._`${I} + "/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`)})),P.endIf()}}}n="string"==typeof M?M:M._;if(n){var i=n;const E=P.const("emErrs",L._`[]`);P.forOf("err",V.default.vErrors,e=>{return P.if((t=e,D.and(L._`${t}.keyword !== ${B}`,L._`!${t}.${U}`,D.or(L._`${t}.instancePath === ${I}`,D.and(L._`${t}.instancePath.indexOf(${I}) === 0`,L._`${t}.instancePath[${I}.length] === "/"`)),L._`${t}.schemaPath.indexOf(${x.errSchemaPath}) === 0`,L._`${t}.schemaPath[${x.errSchemaPath}.length] === "/"`)),()=>P.code(L._`${E}.push(${e})`).assign(L._`${e}.${U}`,!0));var t}),P.if(L._`${E}.length`,()=>F.reportError(O,{message:C(i),params:L._`{errors: ${E}}`}))}if(!R.keepErrors){const S=P.const("emErrs",L._`[]`);P.forOf("err",V.default.vErrors,e=>P.if(L._`!${e}.${U}`,()=>P.code(L._`${S}.push(${e})`))),P.assign(V.default.vErrors,S).assign(V.default.errors,L._`${S}.length`)}})}},metaSchema:{anyOf:[{type:"string"},{type:"object",properties:{properties:{$ref:"#/$defs/stringMap"},items:{$ref:"#/$defs/stringList"},required:{$ref:"#/$defs/stringOrMap"},dependencies:{$ref:"#/$defs/stringOrMap"}},additionalProperties:{type:"string"}}],$defs:{stringMap:{type:"object",additionalProperties:{type:"string"}},stringOrMap:{anyOf:[{type:"string"},{$ref:"#/$defs/stringMap"}]},stringList:{type:"array",items:{type:"string"}}}}}}var n=(e,t={})=>{if(!e.opts.allErrors)throw new Error("ajv-errors: Ajv option allErrors must be true");if(e.opts.jsPropertySyntax)throw new Error("ajv-errors: ajv option jsPropertySyntax is not supported");return e.addKeyword(r(t))};t.default=n,e.exports=n,e.exports.default=n}}return ho.exports}i=Z.exports;{function go(t,e){var r,n=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)),n}function yo(s){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?go(Object(o),!0).forEach(function(e){var t,r=s,n=o[e];(e="symbol"==typeof(t=function(e){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0===t)return String(e);if("object"!=typeof(t=t.call(e,"string")))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}(e))?t:t+"")in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(o)):go(Object(o)).forEach(function(e){Object.defineProperty(s,e,Object.getOwnPropertyDescriptor(o,e))})}return s}function vo(){vo=function(e,t){return new n(e,void 0,t)};var s=RegExp.prototype,i=new WeakMap;function n(e,t,r){return t=RegExp(e,t),i.set(t,r||i.get(e)),bo(t,n.prototype)}function o(s,e){var o=i.get(e);return Object.keys(o).reduce(function(e,t){var r=o[t];if("number"==typeof r)e[t]=s[r];else{for(var n=0;void 0===s[r[n]]&&n+1<r.length;)n++;e[t]=s[r[n]]}return e},Object.create(null))}var e=n,t=RegExp;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&bo(e,t),n.prototype.exec=function(e){var t;return(e=s.exec.call(this,e))&&(e.groups=o(e,this),t=e.indices)&&(t.groups=o(t,this)),e},n.prototype[Symbol.replace]=function(e,t){var r,n;return"string"==typeof t?(r=i.get(this),s[Symbol.replace].call(this,e,t.replace(/\$<([^>]+)>/g,function(e,t){return t=r[t],"$"+(Array.isArray(t)?t.join("$"):t)}))):"function"==typeof t?(n=this,s[Symbol.replace].call(this,e,function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(o(e,n)),t.apply(this,e)})):s[Symbol.replace].call(this,e,t)},vo.apply(this,arguments)}function bo(e,t){return(bo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}const T=(e,t,r)=>{let n=e;var s=t.split("/"),o=s.length;for(let e=0;e<o-1;e+=1){var i=s[e];n[i]||(n[i]={}),n=n[i]}n[s[o-1]]=r};function N(t,r){Object.keys(t[r]||[]).forEach(e=>{(e=t[r][e])&&e.external&&e.external.name&&(e.name=e.external.name,e.external=!0)})}const To=vo(/^(([A-Za-z]:\/|[A-Za-z]:\\)?.*?):(([A-Za-z]:\/|[A-Za-z]:[\\])?.*?)(?::((rw|ro|z|Z)(,(rw|ro|z|Z))*))?$/,{volume:1,container_path:3,flags:5}),jo=e=>null===(e=e.match(To))?"":e.groups.volume,Co=e=>e&&!e.includes("/")&&!e.includes("\\")&&!e.includes("~")&&!e.includes(".")&&!e.includes("$"),Mo=lr();Mo.scalarOptions.null.nullStr="";class Io extends Error{constructor(e,t,r){super(e),this.lines=t,this.details=r,this.name="YamlSyntaxError"}}const Ro=e=>{e=Mo.parseDocument(e,{prettyErrors:!0});const n=[],s=[];if(e.errors.forEach((r,e)=>{var t=r.message.split(":\n")[0];s.push({line:r.linePos.start.line,message:t,pos:r.linePos}),Array.from({length:r.linePos.end?r.linePos.end.line-r.linePos.start.line:1},(e,t)=>r.linePos.start.line+t).forEach(e=>n.push(e))}),0<s.length)throw new Io(s.map(e=>e.message).join("\n"),n,s)},Lo=e=>(Ro(e),Mo.parse(e)),Do=vo(/^((\[?([a-fA-F\d.:]+)\]?:)?([\d]*(\x2D[\d]+)?):)?([\d]+(\x2D[\d]+)?)(\/((udp|tcp|sctp)))?$/,{ip_part:2,ip:3,host:4,container:6,proto_part:8,proto:9}),Fo=e=>{const r=e.match(Do);if(null===r)return[e];if((e=r.groups.container)&&e.includes("-")){var n=e.split("-");const o=parseInt(n[0],10);var n=parseInt(n[1],10),s=((s=r.groups.host)||e).split("-");const i=parseInt(s[0],10);let t=[];return Array.from({length:n-o+1},(e,t)=>t).forEach(e=>{t=[...t,...Fo("".concat(r.groups.ip_part||"").concat(i+e,":").concat(o+e).concat(r.groups.proto_part||""))]}),t}return s={target:parseInt(e,10)},r.groups.ip&&(s.host_ip=r.groups.ip),r.groups.host&&(s.published=r.groups.host),r.groups.proto&&(s.protocol=r.groups.proto),s.mode="ingress",[s]},Vo=lr(),Bo=(Vo.scalarOptions.null.nullStr="",(e,t)=>(Uo(e,t),Vo.stringify(e,{indent:(t||{}).indent||4,simpleKeys:!0}).trim())),Uo=(e,t)=>(t&&t.expandVolumes&&Object.values(e.services).forEach(t=>{if(t.volumes)for(let e=0;e<t.volumes.length;e+=1)"string"==typeof t.volumes[e]&&(t.volumes[e]=(n=void 0,null!==(n=(r=t.volumes[e]).match(To))&&(r={type:Co(n.groups.volume)?"volume":"bind",source:n.groups.volume,target:n.groups.container_path},(n=(n.groups.flags||"").replace(/\s+/,"").split(",")).includes("ro")&&(r.volume={nocopy:!0}),n.includes("z")?r.bind={selinux:"z"}:n.includes("Z")&&(r.bind={selinux:"Z"})),r));var r,n}),t&&t.expandPorts&&Object.values(e.services).forEach(r=>{if(r.ports){let t=[];for(let e=0;e<r.ports.length;e+=1)t="string"==typeof r.ports[e]?[...t,...Fo(r.ports[e])]:[...t,r.ports[e]];r.ports=t}}),e),Yo={$id:"compose_spec.json",type:"object",title:"Compose Specification",description:"The Compose file is a YAML file defining a multi-containers based application.",properties:{version:{type:"string",description:"declared for backward compatibility, ignored."},name:{type:"string",pattern:"^[a-z0-9][a-z0-9_-]*$",description:"define the Compose project name, until user defines one explicitly."},include:{type:"array",items:{type:"object",$ref:"#/definitions/include"},description:"compose sub-projects to be included."},services:{$id:"#/properties/services",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/service"}},additionalProperties:!1},networks:{$id:"#/properties/networks",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/network"}}},volumes:{$id:"#/properties/volumes",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/volume"}},additionalProperties:!1},secrets:{$id:"#/properties/secrets",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/secret"}},additionalProperties:!1},configs:{$id:"#/properties/configs",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/config"}},additionalProperties:!1}},patternProperties:{"^x-":{}},additionalProperties:!1,definitions:{service:{$id:"#/definitions/service",type:"object",properties:{develop:{$ref:"#/definitions/development"},deploy:{$ref:"#/definitions/deployment"},annotations:{$ref:"#/definitions/list_or_dict"},attach:{type:"boolean"},build:{oneOf:[{type:"string"},{type:"object",properties:{context:{type:"string"},dockerfile:{type:"string"},dockerfile_inline:{type:"string"},args:{$ref:"#/definitions/list_or_dict"},ssh:{$ref:"#/definitions/list_or_dict"},labels:{$ref:"#/definitions/list_or_dict"},cache_from:{type:"array",items:{type:"string"}},cache_to:{type:"array",items:{type:"string"}},no_cache:{type:"boolean"},additional_contexts:{$ref:"#/definitions/list_or_dict"},network:{type:"string"},pull:{type:"boolean"},target:{type:"string"},shm_size:{type:["integer","string"]},extra_hosts:{$ref:"#/definitions/list_or_dict"},isolation:{type:"string"},privileged:{type:"boolean"},secrets:{$ref:"#/definitions/service_config_or_secret"},tags:{type:"array",items:{type:"string"}},ulimits:{$ref:"#/definitions/ulimits"},platforms:{type:"array",items:{type:"string"}}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},blkio_config:{type:"object",properties:{device_read_bps:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_read_iops:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_write_bps:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_write_iops:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},weight:{type:"integer"},weight_device:{type:"array",items:{$ref:"#/definitions/blkio_weight"}}},additionalProperties:!1},cap_add:{type:"array",items:{type:"string"},uniqueItems:!0},cap_drop:{type:"array",items:{type:"string"},uniqueItems:!0},cgroup:{type:"string",enum:["host","private"]},cgroup_parent:{type:"string"},command:{$ref:"#/definitions/command"},configs:{$ref:"#/definitions/service_config_or_secret"},container_name:{type:"string"},cpu_count:{type:"integer",minimum:0},cpu_percent:{type:"integer",minimum:0,maximum:100},cpu_shares:{type:["number","string"]},cpu_quota:{type:["number","string"]},cpu_period:{type:["number","string"]},cpu_rt_period:{type:["number","string"]},cpu_rt_runtime:{type:["number","string"]},cpus:{type:["number","string"]},cpuset:{type:"string"},credential_spec:{type:"object",properties:{config:{type:"string"},file:{type:"string"},registry:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},depends_on:{oneOf:[{$ref:"#/definitions/list_of_strings"},{type:"object",additionalProperties:!1,patternProperties:{"^[a-zA-Z0-9._-]+$":{type:"object",additionalProperties:!1,properties:{restart:{type:"boolean"},required:{type:"boolean",default:!0},condition:{type:"string",enum:["service_started","service_healthy","service_completed_successfully"]}},required:["condition"]}}}]},device_cgroup_rules:{$ref:"#/definitions/list_of_strings"},devices:{type:"array",items:{type:"string"},uniqueItems:!0},dns:{$ref:"#/definitions/string_or_list"},dns_opt:{type:"array",items:{type:"string"},uniqueItems:!0},dns_search:{$ref:"#/definitions/string_or_list"},domainname:{type:"string"},entrypoint:{$ref:"#/definitions/command"},env_file:{$ref:"#/definitions/string_or_list"},environment:{$ref:"#/definitions/list_or_dict"},expose:{type:"array",items:{type:["string","number"],format:"expose"},uniqueItems:!0},extends:{oneOf:[{type:"string"},{type:"object",properties:{service:{type:"string"},file:{type:"string"}},required:["service"],additionalProperties:!1}]},external_links:{type:"array",items:{type:"string"},uniqueItems:!0},extra_hosts:{$ref:"#/definitions/list_or_dict"},group_add:{type:"array",items:{type:["string","number"]},uniqueItems:!0},healthcheck:{$ref:"#/definitions/healthcheck"},hostname:{type:"string"},image:{type:"string"},init:{type:"boolean"},ipc:{type:"string"},isolation:{type:"string"},labels:{$ref:"#/definitions/list_or_dict"},links:{type:"array",items:{type:"string"},uniqueItems:!0},logging:{type:"object",properties:{driver:{type:"string"},options:{type:"object",patternProperties:{"^.+$":{type:["string","number","null"]}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},mac_address:{type:"string"},mem_limit:{type:["number","string"]},mem_reservation:{type:["string","integer"]},mem_swappiness:{type:"integer"},memswap_limit:{type:["number","string"]},network_mode:{type:"string"},networks:{oneOf:[{$ref:"#/definitions/list_of_strings"},{type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{oneOf:[{type:"object",properties:{aliases:{$ref:"#/definitions/list_of_strings"},ipv4_address:{type:"string"},ipv6_address:{type:"string"},link_local_ips:{$ref:"#/definitions/list_of_strings"},mac_address:{type:"string"},priority:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}},{type:"null"}]}},additionalProperties:!1}]},oom_kill_disable:{type:"boolean"},oom_score_adj:{type:"integer",minimum:-1e3,maximum:1e3},pid:{type:["string","null"]},pids_limit:{type:["number","string"]},platform:{type:"string"},ports:{type:"array",items:{oneOf:[{type:"number",format:"ports"},{type:"string",format:"ports"},{type:"object",properties:{mode:{type:"string"},host_ip:{type:"string"},target:{type:"integer"},published:{type:["string","integer"]},protocol:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},uniqueItems:!0},privileged:{type:"boolean"},profiles:{$ref:"#/definitions/list_of_strings"},pull_policy:{type:"string",enum:["always","never","if_not_present","build","missing"]},read_only:{type:"boolean"},restart:{type:"string"},runtime:{type:"string"},scale:{type:"integer"},security_opt:{type:"array",items:{type:"string"},uniqueItems:!0},shm_size:{type:["number","string"]},secrets:{$ref:"#/definitions/service_config_or_secret"},sysctls:{$ref:"#/definitions/list_or_dict"},stdin_open:{type:"boolean"},stop_grace_period:{type:"string",format:"duration"},stop_signal:{type:"string"},storage_opt:{type:"object"},tmpfs:{$ref:"#/definitions/string_or_list"},tty:{type:"boolean"},ulimits:{$ref:"#/definitions/ulimits"},user:{type:"string"},uts:{type:"string"},userns_mode:{type:"string"},volumes:{type:"array",items:{oneOf:[{type:"string",format:"volumes"},{type:"object",required:["type"],properties:{type:{type:"string"},source:{type:"string"},target:{type:"string"},read_only:{type:"boolean"},consistency:{type:"string"},bind:{type:"object",properties:{propagation:{type:"string"},create_host_path:{type:"boolean"},selinux:{type:"string",enum:["z","Z"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},volume:{type:"object",properties:{nocopy:{type:"boolean"}},additionalProperties:!1,patternProperties:{"^x-":{}}},tmpfs:{type:"object",properties:{size:{oneOf:[{type:"integer",minimum:0},{type:"string"}]},mode:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},uniqueItems:!0},volumes_from:{type:"array",items:{type:"string"},uniqueItems:!0},working_dir:{type:"string"}},patternProperties:{"^x-":{}},additionalProperties:!1},healthcheck:{$id:"#/definitions/healthcheck",type:"object",properties:{disable:{type:"boolean"},interval:{type:"string",format:"duration"},retries:{type:"number"},test:{oneOf:[{type:"string"},{type:"array",items:{type:"string"}}]},timeout:{type:"string",format:"duration"},start_period:{type:"string",format:"duration"},start_interval:{type:"string",format:"duration"}},additionalProperties:!1,patternProperties:{"^x-":{}}},development:{$id:"#/definitions/development",type:["object","null"],properties:{watch:{type:"array",items:{type:"object",properties:{ignore:{type:"array",items:{type:"string"}},path:{type:"string"},action:{type:"string",enum:["rebuild","sync","sync+restart"]},target:{type:"string"}}},required:["path","action"],additionalProperties:!1,patternProperties:{"^x-":{}}}}},deployment:{$id:"#/definitions/deployment",type:["object","null"],properties:{mode:{type:"string"},endpoint_mode:{type:"string"},replicas:{type:"integer"},labels:{$ref:"#/definitions/list_or_dict"},rollback_config:{type:"object",properties:{parallelism:{type:"integer"},delay:{type:"string",format:"duration"},failure_action:{type:"string"},monitor:{type:"string",format:"duration"},max_failure_ratio:{type:"number"},order:{type:"string",enum:["start-first","stop-first"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},update_config:{type:"object",properties:{parallelism:{type:"integer"},delay:{type:"string",format:"duration"},failure_action:{type:"string"},monitor:{type:"string",format:"duration"},max_failure_ratio:{type:"number"},order:{type:"string",enum:["start-first","stop-first"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},resources:{type:"object",properties:{limits:{type:"object",properties:{cpus:{type:["number","string"]},memory:{type:"string"},pids:{type:"integer"}},additionalProperties:!1,patternProperties:{"^x-":{}}},reservations:{type:"object",properties:{cpus:{type:["number","string"]},memory:{type:"string"},generic_resources:{$ref:"#/definitions/generic_resources"},devices:{$ref:"#/definitions/devices"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},restart_policy:{type:"object",properties:{condition:{type:"string"},delay:{type:"string",format:"duration"},max_attempts:{type:"integer"},window:{type:"string",format:"duration"}},additionalProperties:!1,patternProperties:{"^x-":{}}},placement:{type:"object",properties:{constraints:{type:"array",items:{type:"string"}},preferences:{type:"array",items:{type:"object",properties:{spread:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},max_replicas_per_node:{type:"integer"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},generic_resources:{$id:"#/definitions/generic_resources",type:"array",items:{type:"object",properties:{discrete_resource_spec:{type:"object",properties:{kind:{type:"string"},value:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}},devices:{$id:"#/definitions/devices",type:"array",items:{type:"object",properties:{capabilities:{$ref:"#/definitions/list_of_strings"},count:{type:["string","integer"]},device_ids:{$ref:"#/definitions/list_of_strings"},driver:{type:"string"},options:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},include:{$id:"#/definitions/include",oneOf:[{type:"string"},{type:"object",properties:{path:{$ref:"#/definitions/string_or_list"},env_file:{$ref:"#/definitions/string_or_list"},project_directory:{type:"string"}},additionalProperties:!1}]},network:{$id:"#/definitions/network",type:["object","null"],properties:{name:{type:"string"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},ipam:{type:"object",properties:{driver:{type:"string"},config:{type:"array",items:{type:"object",properties:{subnet:{type:"string",format:"subnet_ip_address"},ip_range:{type:"string"},gateway:{type:"string"},aux_addresses:{type:"object",additionalProperties:!1,patternProperties:{"^.+$":{type:"string"}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}},options:{type:"object",additionalProperties:!1,patternProperties:{"^.+$":{type:"string"}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},internal:{type:"boolean"},enable_ipv6:{type:"boolean"},attachable:{type:"boolean"},labels:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}},volume:{$id:"#/definitions/volume",type:["object","null"],properties:{name:{type:"string"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},labels:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}},secret:{$id:"#/definitions/secret",type:"object",properties:{name:{type:"string"},environment:{type:"string"},file:{type:"string"},external:{type:["boolean","object"],properties:{name:{type:"string"}}},labels:{$ref:"#/definitions/list_or_dict"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},template_driver:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},config:{$id:"#/definitions/config",type:"object",properties:{name:{type:"string"},content:{type:"string"},environment:{type:"string"},file:{type:"string"},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}}},labels:{$ref:"#/definitions/list_or_dict"},template_driver:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},command:{oneOf:[{type:"null"},{type:"string"},{type:"array",items:{type:"string"}}]},string_or_list:{oneOf:[{type:"string"},{$ref:"#/definitions/list_of_strings"}]},list_of_strings:{type:"array",items:{type:"string"},uniqueItems:!0},list_or_dict:{oneOf:[{type:"object",patternProperties:{".+":{type:["string","number","boolean","null"]}},additionalProperties:!1},{type:"array",items:{type:"string"},uniqueItems:!0}]},blkio_limit:{type:"object",properties:{path:{type:"string"},rate:{type:["integer","string"]}},additionalProperties:!1},blkio_weight:{type:"object",properties:{path:{type:"string"},weight:{type:"integer"}},additionalProperties:!1},service_config_or_secret:{type:"array",items:{oneOf:[{type:"string"},{type:"object",properties:{source:{type:"string"},target:{type:"string"},uid:{type:"string"},gid:{type:"string"},mode:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}]}},ulimits:{type:"object",patternProperties:{"^[a-z]+$":{oneOf:[{type:"integer"},{type:"object",properties:{hard:{type:"integer"},soft:{type:"integer"}},required:["soft","hard"],additionalProperties:!1,patternProperties:{"^x-":{}}}]}}},constraints:{service:{$id:"#/definitions/constraints/service",anyOf:[{required:["build"]},{required:["image"]}],properties:{build:{required:["context"]}}}}}},zo=lr(),qo=po(),Ko=mo(),Wo={expose:/^\d+(-\d+)?(\/[a-zA-Z]+)?$/,ports:Do,volumes:To,duration:/^(\d+(us|ms|s|m|h))+$/,byte:/^\d+(b|kb?|mb?|gb?)$/,subnet_ip_address:/^((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\/(\d|[1-2]\d|3[0-2])$|^((([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,7}:)|(([0-9a-fA-F]{1,4}:){1,6}(:[0-9a-fA-F]{1,4}){1,1})|(([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2})|(([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3})|(([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4})|(([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5})|(([0-9a-fA-F]{1,4}:){1,1}(:[0-9a-fA-F]{1,4}){1,6})|(:((:[0-9a-fA-F]{1,4}){1,7}|:))|(fe80:(:[0-9a-fA-F]{1,4}){0,4}%[0-9a-zA-Z]{1,})|(::(ffff(:0{1,4}){0,1}:){0,1}((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-fA-F]{1,4}:){1,4}:((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])))\/(\d|[1-9]\d|1[0-1]\d|12[0-8])$/},Jo=t=>{if(Array.isArray(t))for(let e=0;e<t.length;e+=1)Jo(t[e]);else"object"==typeof t&&(t.type&&t.format&&(t.pattern=Wo[t.format].toString(),delete t.format),Object.keys(t).forEach(e=>{Jo(t[e])}));return t};function wo(e,t){var r,n=function(e){const t=[];return Object.values(e).forEach(e=>(e.volumes||[]).forEach(e=>t.push(e))),e=new Set(t.map(e=>(e=jo(e),Co(e)?e:void 0))),Array.from(e).filter(e=>e).map(e=>({[e]:{external:!0,name:e}}))}(e.services);0<n.length&&(r=n.map(e=>JSON.stringify(e)).join(","),t("Named volumes (".concat(r,") must be explicitly declared. Creating a 'volumes' section with declarations.\n\nFor backwards-compatibility, they've been declared as external. If you don't mind the volume names being prefixed with the project name, you can remove the 'external' option from each one.")),e.volumes=n)}function _o(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;const a=Lo(e);if(!a)return e;if("string"==typeof a)return e;if(Object.prototype.hasOwnProperty.call(a,"services"))return e;const c=Object.keys(a),r=[],l=e=>r.push(e),n=(Object.keys(a).forEach(e=>{t=e,r=a[e],n=l,(r=r.links)&&(r=r[0].split(":")[0],n("Service ".concat(t," has links, which no longer create environment variables such as ").concat(r.toUpperCase(),"_PORT. If you are using those in your application code, you should instead connect directly to the hostname, e.g. '").concat(r,"'."))),n=e,t=a[e],r=l,(t=t.external_links)&&r("Service ".concat(n," has external_links: ").concat(t,", which now work slightly differently. In particular, two containers must be connected to at least one network in common to communicate, even if explicitly linked together.\n\nEither connect the external container to your app's default network, or connect both the external container and your service's containers to a pre-existing network. See https://docs.docker.com/compose/networking/ for more on how to do this."));var t,r=a[e],n=c;if(r.net){let e=r.net;e.startsWith("container:")&&(t=e.split(":")[1],n.includes(t))&&(e="service:".concat(t)),r.network_mode=e,delete r.net}(n=a[e]).dockerfile&&(n.build={context:n.build,dockerfile:n.dockerfile},delete n.dockerfile),(t=a[e]).log_driver&&(t.logging={driver:t.log_driver},t.log_opt&&(t.logging.options=t.log_opt,delete t.log_opt),delete t.log_driver);var s=a[e],o=c;if(s.volumes_from)for(let e=0;e<s.volumes_from.length;e+=1){var i=s.volumes_from[e];o.includes(i.split(":")[0])||(s.volumes_from[e]="container:".concat(i))}}),{});return Object.keys(a).forEach(e=>{n[e]=a[e],delete a[e]}),a.version="2.4",a.services=n,wo(a,l),N(a,"networks"),N(a,"volumes"),r.map(e=>"# ".concat(e.replace(/\n/g,"\n#"))).join("\n")+(0<r.length?"\n":"")+Bo(a,t)}i.getDockerComposeSchemaWithoutFormats=()=>Jo(Yo),i.getVolumeNameFromVolumeSpec=jo,i.isNamedVolume=Co,i.migrateFromV1ToV2x=_o,i.migrateFromV2xToV3x=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;const n=Lo(e);if(!n)return e;if("string"==typeof n)return e;if(!n.version||n.version.startsWith("3"))return e;const r=[],s=e=>r.push(e);return Object.keys(n.services).forEach(t=>{const r=n.services[t];r.cpus&&T(r,"deploy/resources/limits/cpus",r.cpus),r.mem_limit&&T(r,"deploy/resources/limits/memory",r.mem_limit),r.pids_limit&&T(r,"deploy/resources/limits/pids",r.pids_limit),r.mem_reservation&&T(r,"deploy/resources/reservations/memory",r.mem_reservation),r.volume_driver&&(s("Service ".concat(t," has volume_driver:").concat(r.volume_driver,": Instead of setting the volume driver on the service, define a volume using the top-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference) and specify the driver there.")),delete r.volume_driver),r.volumes_from&&(s("Service ".concat(t," has volumes_from:").concat(r.volumes_from," To share a volume between services, define it using the top-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference) and reference it from each service that shares it using the service-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#driver).")),delete r.volumes_from),["cpu_shares","cpu_quota","cpuset","memswap_limit"].forEach(e=>{Object.prototype.hasOwnProperty.call(r,e)&&s("Service ".concat(t," has ").concat(e,":").concat(r.k," These have been replaced by the resources key under deploy (https://docs.docker.com/compose/compose-file/compose-file-v3/#resources). deploy configuration only takes effect when using docker stack deploy, and is ignored by docker-compose.")),delete r[e]}),r.extends&&(s("Service ".concat(t," has extends:").concat(r.extends,' This option has been removed for version: "3.x" Compose files. For more information on extends, see https://docs.docker.com/compose/multiple-compose-files/extends/.')),delete r.extends),r.group_add&&(s("Service ".concat(t," has group_add:").concat(r.group_add,' This option has been removed for version: "3.x" Compose files.')),delete r.group_add),delete r.cpus,delete r.mem_limit,delete r.pids_limit,delete r.mem_reservation}),n.version="3",N(n,"networks"),N(n,"volumes"),r.map(e=>"# ".concat(e.replace(/\n/g,"\n#"))).join("\n")+(0<r.length?"\n":"")+Bo(n,t)},i.migrateFromV3xToV2x=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;const r=Lo(e);return r&&"string"!=typeof r&&r.version&&!r.version.startsWith("2")&&r.services?(Object.keys(r.services).forEach(e=>{var t;(e=r.services[e]).deploy&&e.deploy.resources&&((t=e.deploy.resources).limits&&(t.limits.cpus&&(e.cpus=t.limits.cpus),t.limits.memory&&(e.mem_limit=t.limits.memory),t.limits.pids)&&(e.pids_limit=t.limits.pids),t.reservations)&&t.reservations.memory&&(e.mem_reservation=t.reservations.memory),e.deploy&&e.deploy.restart_policy&&e.deploy.restart_policy.condition&&!e.restart&&(e.restart=e.deploy.restart_policy.condition),delete e.deploy}),r.version="2.4",N(r,"networks"),N(r,"volumes"),Bo(r,t)):e},i.migrateToCommonSpec=function(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=_o(e,r);const s=Lo(n);return s&&"string"!=typeof s?(n=n.match(/^\s*#[^\r\n]*/gm)||[],Object.keys(s.services||[]).forEach(e=>{(e=s.services[e]).cpus&&T(e,"deploy/resources/limits/cpus",e.cpus),e.mem_limit&&T(e,"deploy/resources/limits/memory",e.mem_limit),e.pids_limit&&T(e,"deploy/resources/limits/pids",e.pids_limit),e.mem_reservation&&T(e,"deploy/resources/reservations/memory",e.mem_reservation),delete e.cpus,delete e.mem_limit,delete e.pids_limit,delete e.mem_reservation}),delete(t=yo({name:"<your project name>"},s)).version,N(t,"networks"),N(t,"volumes"),n.map(e=>"# ".concat(e.replace(/^\s*#\s+/g,""))).join("\n")+(0<n.length?"\n":"")+Bo(t,r)):e},i.validateDockerComposeToCommonSpec=o=>{var e=Lo(o);const t=new qo({allErrors:!0,strict:!1});Ko(t),Object.keys(Wo).forEach(e=>t.addFormat(e,Wo[e]));var r=t.compile(Yo);if(r(e))return[];const i=zo.parseDocument(o,{prettyErrors:!0});return r.errors.map(e=>{let t=e.instancePath;"additionalProperties"===e.keyword&&(t+="/".concat(e.params.additionalProperty));var r=t.split("/").slice(1),n=i.getIn(r,!0),n=(n=null===n?i.getIn(r.slice(0,-1),!0):n)?n.range[0]+1:0,s="https://docs.docker.com/compose/compose-file/";return{line:n=(o.substring(0,n).match(/\n/g)||[]).length+1,message:"additionalProperties"===e.keyword?"Line ".concat(n,"(").concat(t,"): '").concat(e.params.additionalProperty,"' is unknown for '").concat(t,"'"):"format"===e.keyword?"Line ".concat(n,"(").concat(t,"): must have a valid syntax for '").concat(e.params.format,"'"):"oneOf"===e.keyword?"Line ".concat(n,"(").concat(t,"): must be either a Short Syntax (string(s)) or a Long Syntax (object(s))"):"Line ".concat(n,"(").concat(t,"): ").concat(e.message," (").concat(e.keyword,": ").concat(JSON.stringify(e.params),")"),helpLink:e=("services"===(e=r[0])?"".concat(s,"05-services/"):"networks"===e?"".concat(s,"06-networks/"):"volumes"===e?"".concat(s,"07-volumes/"):"configs"===e?"".concat(s,"08-configs/"):"secrets"===e?"".concat(s,"09-secrets/"):s)+(r[2]?"#".concat(r[2]):"")}})},i.yamlCheck=Ro,i.yamlParse=Lo,i.yamlStringify=Bo}var $o=re(Z.exports),Eo=re(function(e,t,r,n,s,o,i,a){var c,l,u;if(!e)throw void 0===t?u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."):(c=[r,n,s,o,i,a],l=0,(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"),u.framesToPop=1,u}),t=(e,t)=>({type:e,path:t});const x={"add-host":t("Array","extra_hosts"),"blkio-weight":t("IntValue","blkio_config/weight"),"blkio-weight-device":t("DeviceBlockIOConfigWeight","blkio_config/weight_device"),"cap-add":t("Array","cap_add"),"cap-drop":t("Array","cap_drop"),"cgroup-parent":t("Value","cgroup_parent"),cgroupns:t("Value","cgroup"),"cpu-period":t("Value","cpu_period"),"cpu-quota":t("Value","cpu_quota"),"cpu-rt-period":t("Value","cpu_rt_period"),"cpu-rt-runtime":t("Value","cpu_rt_runtime"),"cpu-shares":t("IntValue","cpu_shares"),cpus:t("FloatValue","deploy/resources/limits/cpus"),detached:t("Switch",""),"device-cgroup-rule":t("Array","device_cgroup_rules"),"device-read-bps":t("DeviceBlockIOConfigRate","blkio_config/device_read_bps"),"device-read-iops":t("DeviceBlockIOConfigRate","blkio_config/device_read_iops"),"device-write-bps":t("DeviceBlockIOConfigRate","blkio_config/device_write_bps"),"device-write-iops":t("DeviceBlockIOConfigRate","blkio_config/device_write_iops"),device:t("Array","devices"),"dns-opt":t("Array","dns_opt"),"dns-search":t("Array","dns_search"),dns:t("Array","dns"),domainname:t("Value","domainname"),entrypoint:t("Array","entrypoint"),"env-file":t("Array","env_file"),env:t("Envs","environment"),expose:t("Array","expose"),gpus:t("Gpus","deploy"),"group-add":t("Array","group_add"),"health-cmd":t("Value","healthcheck/test"),"health-interval":t("Value","healthcheck/interval"),"health-retries":t("Value","healthcheck/retries"),"health-start-period":t("Value","healthcheck/start_period"),"health-timeout":t("Value","healthcheck/timeout"),hostname:t("Value","hostname"),init:t("Switch","init"),interactive:t("Switch","stdin_open"),ip6:t("Value","networks/¤network¤/ipv6_address"),ip:t("Value","networks/¤network¤/ipv4_address"),ipc:t("Value","ipc"),isolation:t("Value","isolation"),label:t("Array","labels"),"link-local-ip":t("Array","networks/¤network¤/link_local_ips"),link:t("Array","links"),"log-driver":t("Value","logging/driver"),"log-opt":t("Map","logging/options"),"mac-address":t("Value","mac_address"),"memory-reservation":t("Value","deploy/resources/reservations/memory"),"memory-swap":t("Value","memswap_limit"),"memory-swappiness":t("Value","mem_swappiness"),memory:t("Value","deploy/resources/limits/memory"),mount:t("MapArray","volumes"),name:t("Value","container_name"),net:t("Networks","network_mode"),"network-alias":t("Array","networks/¤network¤/aliases"),network:t("Networks","network_mode"),"no-healthcheck":t("Switch","healthcheck/disable"),"oom-kill-disable":t("Switch","oom_kill_disable"),"oom-score-adj":t("Value","oom_score_adj"),pid:t("Value","pid"),"pids-limit":t("IntValue","deploy/resources/limits/pids"),platform:t("Value","platform"),privileged:t("Switch","privileged"),publish:t("Array","ports"),pull:t("Value","pull_policy"),"read-only":t("Switch","read_only"),restart:t("Value","restart"),rm:t("Switch",""),runtime:t("Value","runtime"),"security-opt":t("Array","security_opt"),"shm-size":t("Value","shm_size"),"stop-signal":t("Value","stop_signal"),"stop-timeout":t("Value","stop_grace_period"),"storage-opt":t("Map","storage_opt"),sysctl:t("Array","sysctls"),tmpfs:t("Value","tmpfs"),tty:t("Switch","tty"),ulimit:t("Ulimits","ulimits"),user:t("Value","user"),userns:t("Value","userns_mode"),uts:t("Value","uts"),volume:t("Array","volumes"),"volumes-from":t("Array","volume_from"),workdir:t("Value","working_dir")},So=(x.v=x.volume,x.p=x.publish,x.e=x.env,x.l=x.label,x.h=x.hostname,x.u=x.user,x.w=x.workdir,x.c=x["cpu-shares"],x.l=x.label,x.t=x.tty,x.i=x.interactive,x.m=x.memory,x.d=x.detached,e=>[...e].reduce((e,t)=>{var[t,r]=t;return C(C({},e),{},{[t]:r})},{})),Oo=(e,t,r)=>{e=e.split(t);return So(e.map(e=>{var[e,t]=e.split(r,2);return[e,/^-?\d+$/.test(String(t))?parseInt(t,10):t]}))},Po=(e,t)=>{var s,r,e=x[e];return e?""===e.path?{}:"Switch"===e.type||t?(t=t,"Array"===(s=e).type?{path:s.path,value:Array.isArray(t)?t:[String(t)]}:"Networks"===s.type?(r=String(t)).match(/^(host|bridge|none)$|^container:.+/)?{path:"network_mode",value:r}:{path:"networks",value:{[r]:{}}}:"Switch"===s.type?{path:s.path,value:"true"===t||!0===t}:"Gpus"===s.type?{path:"deploy",value:{resources:{reservations:{devices:[{driver:"nvidia",count:"all"===t?"all":parseInt(t,10),capabilities:["gpu"]}]}}}}:"Envs"===s.type?(Array.isArray(t)?t:[t]).map(e=>{var[e,...t]=String(e).split("=");return{path:s.path,value:[t.length?"".concat(e,"=").concat("string"!=typeof(t=t.join("="))||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]?t:t.substring(1,t.length-1)):e]}}):"MapArray"===s.type?(Array.isArray(t)?t:[t]).map(e=>({path:s.path,value:[Oo(String(e),",","=")]})):"Map"===s.type?(r=Array.isArray(t)?t.join(","):t,{path:s.path,value:Oo(String(r),",","=")}):"DeviceBlockIOConfigWeight"===s.type?(Array.isArray(t)?t:[t]).map(e=>{var[e,t]=String(e).split(":");return{path:s.path,value:[{path:e,weight:parseInt(t,10)}]}}):"DeviceBlockIOConfigRate"===s.type?(Array.isArray(t)?t:[t]).map(e=>{var[e,t]=String(e).split(":");return{path:s.path,value:[{path:e,rate:/^-?\d+$/.test(String(t))?parseInt(t,10):t}]}}):"Ulimits"===s.type?(Array.isArray(t)?t:[t]).map(e=>{var t,r,[e,n]=String(e).split("=");return Eo(e&&n,"".concat(s.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),n.includes(":")?([t,r]=n.split(":"),Eo(t&&r,"".concat(s.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),{path:"".concat(s.path,"/").concat(e),value:{soft:parseInt(t,10),hard:parseInt(r,10)}}):{path:"".concat(s.path,"/").concat(e),value:parseInt(n,10)}}):"IntValue"===s.type?{path:s.path,value:parseInt(t,10)}:"FloatValue"===s.type?{path:s.path,value:parseFloat(t)}:{path:s.path,value:String(t)}):null:null},ko=(e,t)=>e.path?e.path.replace("¤network¤",t.toString()).split("/").reduceRight((e,t)=>({[t]:e}),e.value):{},Ao=["_"],No=e=>{if(null===e||""===e||void 0===e)return"!!!invalid!!!";let t=e.includes("/")?e.split("/").slice(-1)[0]:e;return t=t.includes(":")?t.split(":")[0]:t},xo=(e,t)=>{var e=e.replace(/\n\s*#[^\n]+/g,"").replace(/(\s)+/g," ").trim().replace(/\s-p(\d)/g," -p $1").replace(/\s\\\s/g," ").replace(/^docker (run|create|container run|service create)/,""),e=Lt(e,{configuration:{"halt-at-non-option":!0,"camel-case-expansion":!1,"boolean-negation":!1},boolean:["i","interactive","t","tty","d","detach","rm","init","help","privileged","P","publish-all","no-healthcheck","oom-kill-disable","read-only","sig-proxy"]}),r=e["_"],e=R(e,Ao);let n={};var{net:s,network:o}=e;const i=s||o||"default",a=[];Object.entries(e).forEach(e=>{var[e,t]=e,r=Po(e,t);r?(Array.isArray(r)?r:[r]).forEach(e=>{e=ko(e,i);n=zt(n,e)}):(r=1===e.length?"-":"--",t=!0===t?"":"=".concat(t.toString()),a.push("# ".concat(r).concat(e).concat(t)))});var s=r[0];if(n.image=s,1<r.length){let e=1;for(var c=[];e<r.length;)c.push(r[e]),e+=1;n.command=c.join(" ")}var l,u=[];if(n.volumes)for(let t=0;t<n.volumes.length;t+=1){let e;e="string"==typeof n.volumes[t]?n.volumes[t].split(":")[0]:n.volumes[t].source,!(l=e)||l.includes("/")||l.includes("\\")||l.includes("$")||u.push([e,{external:{name:e}}])}if(n.networks)Object.keys(n.networks).forEach(e=>{var t;(t=n.networks[e])&&0===Object.keys(t).length&&t.constructor===Object&&(n.networks[e]=null)}),Object.values(n.networks).every(e=>!e)&&(n.networks=Object.keys(n.networks));const p=[];if(n.networks)if(Array.isArray(n.networks))for(let e=0;e<n.networks.length;e+=1)p.push([n.networks[e],{external:!0,name:n.networks[e]}]);else Object.keys(n.networks).forEach(e=>{p.push([e,{external:!0,name:e}])});o=No(s);let f;var e={version:"3",services:{[o]:n}},t=null!=(s=$o.yamlParse(null!=t?t:""))?s:{};f=zt(t,e),0<p.length&&(s={networks:So(p)},f=zt(f,s)),0<u.length&&(t={volumes:So(u)},f=zt(f,t));let d="";return 0<a.length&&(d="# ignored options for '".concat(o,"'\n").concat(a.join("\n"),"\n")),{composeFile:f,ignoredOptionsComments:d}};return function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"latest",n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:4;const s=[];let o={};e=e.split(/^\s*docker\s/gm);let i=t;if(t&&("v2x"===r?i=$o.migrateFromV3xToV2x(i,{indent:n}):"latest"===r&&(i=$o.migrateToCommonSpec(i,{indent:n}))),e.forEach(e=>{var t,r,e=String(e);e&&(e.match(/^\s*(run|create|container run|service create)/)?({composeFile:t,ignoredOptionsComments:r}=xo("docker ".concat(e),i),r&&s.push(r),o=zt(o,t)):s.push("# ignored : docker ".concat(e,"\n")))}),!o.services)throw new SyntaxError("must have at least a valid docker run/create/service create/container run command");let a=$o.yamlStringify(o,{indent:n}).trim();if("v2x"===r)a=$o.migrateFromV3xToV2x(a,{indent:n});else if("latest"===r)a=$o.migrateToCommonSpec(a,{indent:n});else if("v3x"!==r)throw new Error("Unknown ComposeVersion '".concat(r,"'"));return s.join("\n")+a}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
